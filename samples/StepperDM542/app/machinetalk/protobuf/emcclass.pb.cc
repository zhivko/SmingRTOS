// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: machinetalk/protobuf/emcclass.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "machinetalk/protobuf/emcclass.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace pb {

namespace {

const ::google::protobuf::Descriptor* PmCartesian_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PmCartesian_reflection_ = NULL;
const ::google::protobuf::Descriptor* EmcPose_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  EmcPose_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_machinetalk_2fprotobuf_2femcclass_2eproto() {
  protobuf_AddDesc_machinetalk_2fprotobuf_2femcclass_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "machinetalk/protobuf/emcclass.proto");
  GOOGLE_CHECK(file != NULL);
  PmCartesian_descriptor_ = file->message_type(0);
  static const int PmCartesian_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PmCartesian, x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PmCartesian, y_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PmCartesian, z_),
  };
  PmCartesian_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PmCartesian_descriptor_,
      PmCartesian::default_instance_,
      PmCartesian_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PmCartesian, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PmCartesian, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PmCartesian));
  EmcPose_descriptor_ = file->message_type(1);
  static const int EmcPose_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EmcPose, tran_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EmcPose, a_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EmcPose, b_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EmcPose, c_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EmcPose, u_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EmcPose, v_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EmcPose, w_),
  };
  EmcPose_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      EmcPose_descriptor_,
      EmcPose::default_instance_,
      EmcPose_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EmcPose, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EmcPose, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(EmcPose));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_machinetalk_2fprotobuf_2femcclass_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PmCartesian_descriptor_, &PmCartesian::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    EmcPose_descriptor_, &EmcPose::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_machinetalk_2fprotobuf_2femcclass_2eproto() {
  delete PmCartesian::default_instance_;
  delete PmCartesian_reflection_;
  delete EmcPose::default_instance_;
  delete EmcPose_reflection_;
}

void protobuf_AddDesc_machinetalk_2fprotobuf_2femcclass_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::protobuf_AddDesc_machinetalk_2fprotobuf_2fnanopb_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n#machinetalk/protobuf/emcclass.proto\022\002p"
    "b\032!machinetalk/protobuf/nanopb.proto\"6\n\013"
    "PmCartesian\022\t\n\001x\030\n \001(\001\022\t\n\001y\030\024 \001(\001\022\t\n\001z\030\036"
    " \001(\001:\006\222\?\003H\254\002\"r\n\007EmcPose\022\035\n\004tran\030\n \002(\0132\017."
    "pb.PmCartesian\022\t\n\001a\030\024 \001(\001\022\t\n\001b\030\036 \001(\001\022\t\n\001"
    "c\030( \001(\001\022\t\n\001u\0302 \001(\001\022\t\n\001v\030< \001(\001\022\t\n\001w\030F \001(\001"
    ":\006\222\?\003H\255\002", 248);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "machinetalk/protobuf/emcclass.proto", &protobuf_RegisterTypes);
  PmCartesian::default_instance_ = new PmCartesian();
  EmcPose::default_instance_ = new EmcPose();
  PmCartesian::default_instance_->InitAsDefaultInstance();
  EmcPose::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_machinetalk_2fprotobuf_2femcclass_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_machinetalk_2fprotobuf_2femcclass_2eproto {
  StaticDescriptorInitializer_machinetalk_2fprotobuf_2femcclass_2eproto() {
    protobuf_AddDesc_machinetalk_2fprotobuf_2femcclass_2eproto();
  }
} static_descriptor_initializer_machinetalk_2fprotobuf_2femcclass_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int PmCartesian::kXFieldNumber;
const int PmCartesian::kYFieldNumber;
const int PmCartesian::kZFieldNumber;
#endif  // !_MSC_VER

PmCartesian::PmCartesian()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.PmCartesian)
}

void PmCartesian::InitAsDefaultInstance() {
}

PmCartesian::PmCartesian(const PmCartesian& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.PmCartesian)
}

void PmCartesian::SharedCtor() {
  _cached_size_ = 0;
  x_ = 0;
  y_ = 0;
  z_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PmCartesian::~PmCartesian() {
  // @@protoc_insertion_point(destructor:pb.PmCartesian)
  SharedDtor();
}

void PmCartesian::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PmCartesian::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PmCartesian::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PmCartesian_descriptor_;
}

const PmCartesian& PmCartesian::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_machinetalk_2fprotobuf_2femcclass_2eproto();
  return *default_instance_;
}

PmCartesian* PmCartesian::default_instance_ = NULL;

PmCartesian* PmCartesian::New() const {
  return new PmCartesian;
}

void PmCartesian::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<PmCartesian*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(x_, z_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PmCartesian::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.PmCartesian)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional double x = 10;
      case 10: {
        if (tag == 81) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &x_)));
          set_has_x();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(161)) goto parse_y;
        break;
      }

      // optional double y = 20;
      case 20: {
        if (tag == 161) {
         parse_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &y_)));
          set_has_y();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(241)) goto parse_z;
        break;
      }

      // optional double z = 30;
      case 30: {
        if (tag == 241) {
         parse_z:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &z_)));
          set_has_z();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.PmCartesian)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.PmCartesian)
  return false;
#undef DO_
}

void PmCartesian::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.PmCartesian)
  // optional double x = 10;
  if (has_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(10, this->x(), output);
  }

  // optional double y = 20;
  if (has_y()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(20, this->y(), output);
  }

  // optional double z = 30;
  if (has_z()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(30, this->z(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.PmCartesian)
}

::google::protobuf::uint8* PmCartesian::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.PmCartesian)
  // optional double x = 10;
  if (has_x()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(10, this->x(), target);
  }

  // optional double y = 20;
  if (has_y()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(20, this->y(), target);
  }

  // optional double z = 30;
  if (has_z()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(30, this->z(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.PmCartesian)
  return target;
}

int PmCartesian::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional double x = 10;
    if (has_x()) {
      total_size += 1 + 8;
    }

    // optional double y = 20;
    if (has_y()) {
      total_size += 2 + 8;
    }

    // optional double z = 30;
    if (has_z()) {
      total_size += 2 + 8;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PmCartesian::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PmCartesian* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PmCartesian*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PmCartesian::MergeFrom(const PmCartesian& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_x()) {
      set_x(from.x());
    }
    if (from.has_y()) {
      set_y(from.y());
    }
    if (from.has_z()) {
      set_z(from.z());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PmCartesian::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PmCartesian::CopyFrom(const PmCartesian& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PmCartesian::IsInitialized() const {

  return true;
}

void PmCartesian::Swap(PmCartesian* other) {
  if (other != this) {
    std::swap(x_, other->x_);
    std::swap(y_, other->y_);
    std::swap(z_, other->z_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PmCartesian::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PmCartesian_descriptor_;
  metadata.reflection = PmCartesian_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int EmcPose::kTranFieldNumber;
const int EmcPose::kAFieldNumber;
const int EmcPose::kBFieldNumber;
const int EmcPose::kCFieldNumber;
const int EmcPose::kUFieldNumber;
const int EmcPose::kVFieldNumber;
const int EmcPose::kWFieldNumber;
#endif  // !_MSC_VER

EmcPose::EmcPose()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.EmcPose)
}

void EmcPose::InitAsDefaultInstance() {
  tran_ = const_cast< ::pb::PmCartesian*>(&::pb::PmCartesian::default_instance());
}

EmcPose::EmcPose(const EmcPose& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.EmcPose)
}

void EmcPose::SharedCtor() {
  _cached_size_ = 0;
  tran_ = NULL;
  a_ = 0;
  b_ = 0;
  c_ = 0;
  u_ = 0;
  v_ = 0;
  w_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

EmcPose::~EmcPose() {
  // @@protoc_insertion_point(destructor:pb.EmcPose)
  SharedDtor();
}

void EmcPose::SharedDtor() {
  if (this != default_instance_) {
    delete tran_;
  }
}

void EmcPose::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* EmcPose::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EmcPose_descriptor_;
}

const EmcPose& EmcPose::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_machinetalk_2fprotobuf_2femcclass_2eproto();
  return *default_instance_;
}

EmcPose* EmcPose::default_instance_ = NULL;

EmcPose* EmcPose::New() const {
  return new EmcPose;
}

void EmcPose::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<EmcPose*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 127) {
    ZR_(a_, w_);
    if (has_tran()) {
      if (tran_ != NULL) tran_->::pb::PmCartesian::Clear();
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool EmcPose::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.EmcPose)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .pb.PmCartesian tran = 10;
      case 10: {
        if (tag == 82) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_tran()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(161)) goto parse_a;
        break;
      }

      // optional double a = 20;
      case 20: {
        if (tag == 161) {
         parse_a:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &a_)));
          set_has_a();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(241)) goto parse_b;
        break;
      }

      // optional double b = 30;
      case 30: {
        if (tag == 241) {
         parse_b:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &b_)));
          set_has_b();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(321)) goto parse_c;
        break;
      }

      // optional double c = 40;
      case 40: {
        if (tag == 321) {
         parse_c:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &c_)));
          set_has_c();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(401)) goto parse_u;
        break;
      }

      // optional double u = 50;
      case 50: {
        if (tag == 401) {
         parse_u:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &u_)));
          set_has_u();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(481)) goto parse_v;
        break;
      }

      // optional double v = 60;
      case 60: {
        if (tag == 481) {
         parse_v:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &v_)));
          set_has_v();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(561)) goto parse_w;
        break;
      }

      // optional double w = 70;
      case 70: {
        if (tag == 561) {
         parse_w:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &w_)));
          set_has_w();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.EmcPose)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.EmcPose)
  return false;
#undef DO_
}

void EmcPose::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.EmcPose)
  // required .pb.PmCartesian tran = 10;
  if (has_tran()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, this->tran(), output);
  }

  // optional double a = 20;
  if (has_a()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(20, this->a(), output);
  }

  // optional double b = 30;
  if (has_b()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(30, this->b(), output);
  }

  // optional double c = 40;
  if (has_c()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(40, this->c(), output);
  }

  // optional double u = 50;
  if (has_u()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(50, this->u(), output);
  }

  // optional double v = 60;
  if (has_v()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(60, this->v(), output);
  }

  // optional double w = 70;
  if (has_w()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(70, this->w(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.EmcPose)
}

::google::protobuf::uint8* EmcPose::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.EmcPose)
  // required .pb.PmCartesian tran = 10;
  if (has_tran()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        10, this->tran(), target);
  }

  // optional double a = 20;
  if (has_a()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(20, this->a(), target);
  }

  // optional double b = 30;
  if (has_b()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(30, this->b(), target);
  }

  // optional double c = 40;
  if (has_c()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(40, this->c(), target);
  }

  // optional double u = 50;
  if (has_u()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(50, this->u(), target);
  }

  // optional double v = 60;
  if (has_v()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(60, this->v(), target);
  }

  // optional double w = 70;
  if (has_w()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(70, this->w(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.EmcPose)
  return target;
}

int EmcPose::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .pb.PmCartesian tran = 10;
    if (has_tran()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->tran());
    }

    // optional double a = 20;
    if (has_a()) {
      total_size += 2 + 8;
    }

    // optional double b = 30;
    if (has_b()) {
      total_size += 2 + 8;
    }

    // optional double c = 40;
    if (has_c()) {
      total_size += 2 + 8;
    }

    // optional double u = 50;
    if (has_u()) {
      total_size += 2 + 8;
    }

    // optional double v = 60;
    if (has_v()) {
      total_size += 2 + 8;
    }

    // optional double w = 70;
    if (has_w()) {
      total_size += 2 + 8;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EmcPose::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const EmcPose* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const EmcPose*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void EmcPose::MergeFrom(const EmcPose& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_tran()) {
      mutable_tran()->::pb::PmCartesian::MergeFrom(from.tran());
    }
    if (from.has_a()) {
      set_a(from.a());
    }
    if (from.has_b()) {
      set_b(from.b());
    }
    if (from.has_c()) {
      set_c(from.c());
    }
    if (from.has_u()) {
      set_u(from.u());
    }
    if (from.has_v()) {
      set_v(from.v());
    }
    if (from.has_w()) {
      set_w(from.w());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void EmcPose::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EmcPose::CopyFrom(const EmcPose& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EmcPose::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void EmcPose::Swap(EmcPose* other) {
  if (other != this) {
    std::swap(tran_, other->tran_);
    std::swap(a_, other->a_);
    std::swap(b_, other->b_);
    std::swap(c_, other->c_);
    std::swap(u_, other->u_);
    std::swap(v_, other->v_);
    std::swap(w_, other->w_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata EmcPose::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = EmcPose_descriptor_;
  metadata.reflection = EmcPose_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace pb

// @@protoc_insertion_point(global_scope)
