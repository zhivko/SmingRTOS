// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: machinetalk/protobuf/config.proto

#ifndef PROTOBUF_machinetalk_2fprotobuf_2fconfig_2eproto__INCLUDED
#define PROTOBUF_machinetalk_2fprotobuf_2fconfig_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "machinetalk/protobuf/nanopb.pb.h"
// @@protoc_insertion_point(includes)

namespace pb {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_machinetalk_2fprotobuf_2fconfig_2eproto();
void protobuf_AssignDesc_machinetalk_2fprotobuf_2fconfig_2eproto();
void protobuf_ShutdownFile_machinetalk_2fprotobuf_2fconfig_2eproto();

class File;
class Application;
class StdoutLine;
class MachineInfo;
class Launcher;

enum ApplicationType {
  QT5_QML = 1,
  GLADEVCP = 2,
  JAVASCRIPT = 3
};
bool ApplicationType_IsValid(int value);
const ApplicationType ApplicationType_MIN = QT5_QML;
const ApplicationType ApplicationType_MAX = JAVASCRIPT;
const int ApplicationType_ARRAYSIZE = ApplicationType_MAX + 1;

const ::google::protobuf::EnumDescriptor* ApplicationType_descriptor();
inline const ::std::string& ApplicationType_Name(ApplicationType value) {
  return ::google::protobuf::internal::NameOfEnum(
    ApplicationType_descriptor(), value);
}
inline bool ApplicationType_Parse(
    const ::std::string& name, ApplicationType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ApplicationType>(
    ApplicationType_descriptor(), name, value);
}
enum FileContent {
  CLEARTEXT = 1,
  ZLIB = 2
};
bool FileContent_IsValid(int value);
const FileContent FileContent_MIN = CLEARTEXT;
const FileContent FileContent_MAX = ZLIB;
const int FileContent_ARRAYSIZE = FileContent_MAX + 1;

const ::google::protobuf::EnumDescriptor* FileContent_descriptor();
inline const ::std::string& FileContent_Name(FileContent value) {
  return ::google::protobuf::internal::NameOfEnum(
    FileContent_descriptor(), value);
}
inline bool FileContent_Parse(
    const ::std::string& name, FileContent* value) {
  return ::google::protobuf::internal::ParseNamedEnum<FileContent>(
    FileContent_descriptor(), name, value);
}
// ===================================================================

class File : public ::google::protobuf::Message {
 public:
  File();
  virtual ~File();

  File(const File& from);

  inline File& operator=(const File& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const File& default_instance();

  void Swap(File* other);

  // implements Message ----------------------------------------------

  File* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const File& from);
  void MergeFrom(const File& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string name = 1;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 1;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // required .pb.FileContent encoding = 2;
  inline bool has_encoding() const;
  inline void clear_encoding();
  static const int kEncodingFieldNumber = 2;
  inline ::pb::FileContent encoding() const;
  inline void set_encoding(::pb::FileContent value);

  // optional bytes blob = 3;
  inline bool has_blob() const;
  inline void clear_blob();
  static const int kBlobFieldNumber = 3;
  inline const ::std::string& blob() const;
  inline void set_blob(const ::std::string& value);
  inline void set_blob(const char* value);
  inline void set_blob(const void* value, size_t size);
  inline ::std::string* mutable_blob();
  inline ::std::string* release_blob();
  inline void set_allocated_blob(::std::string* blob);

  // @@protoc_insertion_point(class_scope:pb.File)
 private:
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_encoding();
  inline void clear_has_encoding();
  inline void set_has_blob();
  inline void clear_has_blob();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* name_;
  ::std::string* blob_;
  int encoding_;
  friend void  protobuf_AddDesc_machinetalk_2fprotobuf_2fconfig_2eproto();
  friend void protobuf_AssignDesc_machinetalk_2fprotobuf_2fconfig_2eproto();
  friend void protobuf_ShutdownFile_machinetalk_2fprotobuf_2fconfig_2eproto();

  void InitAsDefaultInstance();
  static File* default_instance_;
};
// -------------------------------------------------------------------

class Application : public ::google::protobuf::Message {
 public:
  Application();
  virtual ~Application();

  Application(const Application& from);

  inline Application& operator=(const Application& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Application& default_instance();

  void Swap(Application* other);

  // implements Message ----------------------------------------------

  Application* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Application& from);
  void MergeFrom(const Application& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string name = 1;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 1;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // optional string description = 2;
  inline bool has_description() const;
  inline void clear_description();
  static const int kDescriptionFieldNumber = 2;
  inline const ::std::string& description() const;
  inline void set_description(const ::std::string& value);
  inline void set_description(const char* value);
  inline void set_description(const char* value, size_t size);
  inline ::std::string* mutable_description();
  inline ::std::string* release_description();
  inline void set_allocated_description(::std::string* description);

  // optional .pb.ApplicationType type = 3;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 3;
  inline ::pb::ApplicationType type() const;
  inline void set_type(::pb::ApplicationType value);

  // optional string weburi = 4;
  inline bool has_weburi() const;
  inline void clear_weburi();
  static const int kWeburiFieldNumber = 4;
  inline const ::std::string& weburi() const;
  inline void set_weburi(const ::std::string& value);
  inline void set_weburi(const char* value);
  inline void set_weburi(const char* value, size_t size);
  inline ::std::string* mutable_weburi();
  inline ::std::string* release_weburi();
  inline void set_allocated_weburi(::std::string* weburi);

  // repeated .pb.File file = 5;
  inline int file_size() const;
  inline void clear_file();
  static const int kFileFieldNumber = 5;
  inline const ::pb::File& file(int index) const;
  inline ::pb::File* mutable_file(int index);
  inline ::pb::File* add_file();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::File >&
      file() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::File >*
      mutable_file();

  // @@protoc_insertion_point(class_scope:pb.Application)
 private:
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_description();
  inline void clear_has_description();
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_weburi();
  inline void clear_has_weburi();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* name_;
  ::std::string* description_;
  ::std::string* weburi_;
  ::google::protobuf::RepeatedPtrField< ::pb::File > file_;
  int type_;
  friend void  protobuf_AddDesc_machinetalk_2fprotobuf_2fconfig_2eproto();
  friend void protobuf_AssignDesc_machinetalk_2fprotobuf_2fconfig_2eproto();
  friend void protobuf_ShutdownFile_machinetalk_2fprotobuf_2fconfig_2eproto();

  void InitAsDefaultInstance();
  static Application* default_instance_;
};
// -------------------------------------------------------------------

class StdoutLine : public ::google::protobuf::Message {
 public:
  StdoutLine();
  virtual ~StdoutLine();

  StdoutLine(const StdoutLine& from);

  inline StdoutLine& operator=(const StdoutLine& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const StdoutLine& default_instance();

  void Swap(StdoutLine* other);

  // implements Message ----------------------------------------------

  StdoutLine* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const StdoutLine& from);
  void MergeFrom(const StdoutLine& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 index = 1;
  inline bool has_index() const;
  inline void clear_index();
  static const int kIndexFieldNumber = 1;
  inline ::google::protobuf::int32 index() const;
  inline void set_index(::google::protobuf::int32 value);

  // optional string line = 2;
  inline bool has_line() const;
  inline void clear_line();
  static const int kLineFieldNumber = 2;
  inline const ::std::string& line() const;
  inline void set_line(const ::std::string& value);
  inline void set_line(const char* value);
  inline void set_line(const char* value, size_t size);
  inline ::std::string* mutable_line();
  inline ::std::string* release_line();
  inline void set_allocated_line(::std::string* line);

  // @@protoc_insertion_point(class_scope:pb.StdoutLine)
 private:
  inline void set_has_index();
  inline void clear_has_index();
  inline void set_has_line();
  inline void clear_has_line();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* line_;
  ::google::protobuf::int32 index_;
  friend void  protobuf_AddDesc_machinetalk_2fprotobuf_2fconfig_2eproto();
  friend void protobuf_AssignDesc_machinetalk_2fprotobuf_2fconfig_2eproto();
  friend void protobuf_ShutdownFile_machinetalk_2fprotobuf_2fconfig_2eproto();

  void InitAsDefaultInstance();
  static StdoutLine* default_instance_;
};
// -------------------------------------------------------------------

class MachineInfo : public ::google::protobuf::Message {
 public:
  MachineInfo();
  virtual ~MachineInfo();

  MachineInfo(const MachineInfo& from);

  inline MachineInfo& operator=(const MachineInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MachineInfo& default_instance();

  void Swap(MachineInfo* other);

  // implements Message ----------------------------------------------

  MachineInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MachineInfo& from);
  void MergeFrom(const MachineInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string type = 1;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline const ::std::string& type() const;
  inline void set_type(const ::std::string& value);
  inline void set_type(const char* value);
  inline void set_type(const char* value, size_t size);
  inline ::std::string* mutable_type();
  inline ::std::string* release_type();
  inline void set_allocated_type(::std::string* type);

  // optional string manufacturer = 2;
  inline bool has_manufacturer() const;
  inline void clear_manufacturer();
  static const int kManufacturerFieldNumber = 2;
  inline const ::std::string& manufacturer() const;
  inline void set_manufacturer(const ::std::string& value);
  inline void set_manufacturer(const char* value);
  inline void set_manufacturer(const char* value, size_t size);
  inline ::std::string* mutable_manufacturer();
  inline ::std::string* release_manufacturer();
  inline void set_allocated_manufacturer(::std::string* manufacturer);

  // optional string model = 3;
  inline bool has_model() const;
  inline void clear_model();
  static const int kModelFieldNumber = 3;
  inline const ::std::string& model() const;
  inline void set_model(const ::std::string& value);
  inline void set_model(const char* value);
  inline void set_model(const char* value, size_t size);
  inline ::std::string* mutable_model();
  inline ::std::string* release_model();
  inline void set_allocated_model(::std::string* model);

  // optional string variant = 4;
  inline bool has_variant() const;
  inline void clear_variant();
  static const int kVariantFieldNumber = 4;
  inline const ::std::string& variant() const;
  inline void set_variant(const ::std::string& value);
  inline void set_variant(const char* value);
  inline void set_variant(const char* value, size_t size);
  inline ::std::string* mutable_variant();
  inline ::std::string* release_variant();
  inline void set_allocated_variant(::std::string* variant);

  // @@protoc_insertion_point(class_scope:pb.MachineInfo)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_manufacturer();
  inline void clear_has_manufacturer();
  inline void set_has_model();
  inline void clear_has_model();
  inline void set_has_variant();
  inline void clear_has_variant();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* type_;
  ::std::string* manufacturer_;
  ::std::string* model_;
  ::std::string* variant_;
  friend void  protobuf_AddDesc_machinetalk_2fprotobuf_2fconfig_2eproto();
  friend void protobuf_AssignDesc_machinetalk_2fprotobuf_2fconfig_2eproto();
  friend void protobuf_ShutdownFile_machinetalk_2fprotobuf_2fconfig_2eproto();

  void InitAsDefaultInstance();
  static MachineInfo* default_instance_;
};
// -------------------------------------------------------------------

class Launcher : public ::google::protobuf::Message {
 public:
  Launcher();
  virtual ~Launcher();

  Launcher(const Launcher& from);

  inline Launcher& operator=(const Launcher& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Launcher& default_instance();

  void Swap(Launcher* other);

  // implements Message ----------------------------------------------

  Launcher* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Launcher& from);
  void MergeFrom(const Launcher& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 index = 1;
  inline bool has_index() const;
  inline void clear_index();
  static const int kIndexFieldNumber = 1;
  inline ::google::protobuf::int32 index() const;
  inline void set_index(::google::protobuf::int32 value);

  // optional string name = 2;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 2;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // optional string description = 3;
  inline bool has_description() const;
  inline void clear_description();
  static const int kDescriptionFieldNumber = 3;
  inline const ::std::string& description() const;
  inline void set_description(const ::std::string& value);
  inline void set_description(const char* value);
  inline void set_description(const char* value, size_t size);
  inline ::std::string* mutable_description();
  inline ::std::string* release_description();
  inline void set_allocated_description(::std::string* description);

  // optional .pb.File image = 4;
  inline bool has_image() const;
  inline void clear_image();
  static const int kImageFieldNumber = 4;
  inline const ::pb::File& image() const;
  inline ::pb::File* mutable_image();
  inline ::pb::File* release_image();
  inline void set_allocated_image(::pb::File* image);

  // optional .pb.MachineInfo info = 5;
  inline bool has_info() const;
  inline void clear_info();
  static const int kInfoFieldNumber = 5;
  inline const ::pb::MachineInfo& info() const;
  inline ::pb::MachineInfo* mutable_info();
  inline ::pb::MachineInfo* release_info();
  inline void set_allocated_info(::pb::MachineInfo* info);

  // optional bool running = 6;
  inline bool has_running() const;
  inline void clear_running();
  static const int kRunningFieldNumber = 6;
  inline bool running() const;
  inline void set_running(bool value);

  // optional bool terminating = 7;
  inline bool has_terminating() const;
  inline void clear_terminating();
  static const int kTerminatingFieldNumber = 7;
  inline bool terminating() const;
  inline void set_terminating(bool value);

  // optional string command = 8;
  inline bool has_command() const;
  inline void clear_command();
  static const int kCommandFieldNumber = 8;
  inline const ::std::string& command() const;
  inline void set_command(const ::std::string& value);
  inline void set_command(const char* value);
  inline void set_command(const char* value, size_t size);
  inline ::std::string* mutable_command();
  inline ::std::string* release_command();
  inline void set_allocated_command(::std::string* command);

  // optional bool shell = 9;
  inline bool has_shell() const;
  inline void clear_shell();
  static const int kShellFieldNumber = 9;
  inline bool shell() const;
  inline void set_shell(bool value);

  // repeated .pb.StdoutLine output = 10;
  inline int output_size() const;
  inline void clear_output();
  static const int kOutputFieldNumber = 10;
  inline const ::pb::StdoutLine& output(int index) const;
  inline ::pb::StdoutLine* mutable_output(int index);
  inline ::pb::StdoutLine* add_output();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::StdoutLine >&
      output() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::StdoutLine >*
      mutable_output();

  // optional int32 returncode = 11;
  inline bool has_returncode() const;
  inline void clear_returncode();
  static const int kReturncodeFieldNumber = 11;
  inline ::google::protobuf::int32 returncode() const;
  inline void set_returncode(::google::protobuf::int32 value);

  // optional string workdir = 12;
  inline bool has_workdir() const;
  inline void clear_workdir();
  static const int kWorkdirFieldNumber = 12;
  inline const ::std::string& workdir() const;
  inline void set_workdir(const ::std::string& value);
  inline void set_workdir(const char* value);
  inline void set_workdir(const char* value, size_t size);
  inline ::std::string* mutable_workdir();
  inline ::std::string* release_workdir();
  inline void set_allocated_workdir(::std::string* workdir);

  // @@protoc_insertion_point(class_scope:pb.Launcher)
 private:
  inline void set_has_index();
  inline void clear_has_index();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_description();
  inline void clear_has_description();
  inline void set_has_image();
  inline void clear_has_image();
  inline void set_has_info();
  inline void clear_has_info();
  inline void set_has_running();
  inline void clear_has_running();
  inline void set_has_terminating();
  inline void clear_has_terminating();
  inline void set_has_command();
  inline void clear_has_command();
  inline void set_has_shell();
  inline void clear_has_shell();
  inline void set_has_returncode();
  inline void clear_has_returncode();
  inline void set_has_workdir();
  inline void clear_has_workdir();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* name_;
  ::std::string* description_;
  ::pb::File* image_;
  ::pb::MachineInfo* info_;
  ::google::protobuf::int32 index_;
  bool running_;
  bool terminating_;
  bool shell_;
  ::std::string* command_;
  ::google::protobuf::RepeatedPtrField< ::pb::StdoutLine > output_;
  ::std::string* workdir_;
  ::google::protobuf::int32 returncode_;
  friend void  protobuf_AddDesc_machinetalk_2fprotobuf_2fconfig_2eproto();
  friend void protobuf_AssignDesc_machinetalk_2fprotobuf_2fconfig_2eproto();
  friend void protobuf_ShutdownFile_machinetalk_2fprotobuf_2fconfig_2eproto();

  void InitAsDefaultInstance();
  static Launcher* default_instance_;
};
// ===================================================================


// ===================================================================

// File

// required string name = 1;
inline bool File::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void File::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void File::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void File::clear_name() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& File::name() const {
  // @@protoc_insertion_point(field_get:pb.File.name)
  return *name_;
}
inline void File::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set:pb.File.name)
}
inline void File::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set_char:pb.File.name)
}
inline void File::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:pb.File.name)
}
inline ::std::string* File::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:pb.File.name)
  return name_;
}
inline ::std::string* File::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void File::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:pb.File.name)
}

// required .pb.FileContent encoding = 2;
inline bool File::has_encoding() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void File::set_has_encoding() {
  _has_bits_[0] |= 0x00000002u;
}
inline void File::clear_has_encoding() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void File::clear_encoding() {
  encoding_ = 1;
  clear_has_encoding();
}
inline ::pb::FileContent File::encoding() const {
  // @@protoc_insertion_point(field_get:pb.File.encoding)
  return static_cast< ::pb::FileContent >(encoding_);
}
inline void File::set_encoding(::pb::FileContent value) {
  assert(::pb::FileContent_IsValid(value));
  set_has_encoding();
  encoding_ = value;
  // @@protoc_insertion_point(field_set:pb.File.encoding)
}

// optional bytes blob = 3;
inline bool File::has_blob() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void File::set_has_blob() {
  _has_bits_[0] |= 0x00000004u;
}
inline void File::clear_has_blob() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void File::clear_blob() {
  if (blob_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    blob_->clear();
  }
  clear_has_blob();
}
inline const ::std::string& File::blob() const {
  // @@protoc_insertion_point(field_get:pb.File.blob)
  return *blob_;
}
inline void File::set_blob(const ::std::string& value) {
  set_has_blob();
  if (blob_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    blob_ = new ::std::string;
  }
  blob_->assign(value);
  // @@protoc_insertion_point(field_set:pb.File.blob)
}
inline void File::set_blob(const char* value) {
  set_has_blob();
  if (blob_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    blob_ = new ::std::string;
  }
  blob_->assign(value);
  // @@protoc_insertion_point(field_set_char:pb.File.blob)
}
inline void File::set_blob(const void* value, size_t size) {
  set_has_blob();
  if (blob_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    blob_ = new ::std::string;
  }
  blob_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:pb.File.blob)
}
inline ::std::string* File::mutable_blob() {
  set_has_blob();
  if (blob_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    blob_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:pb.File.blob)
  return blob_;
}
inline ::std::string* File::release_blob() {
  clear_has_blob();
  if (blob_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = blob_;
    blob_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void File::set_allocated_blob(::std::string* blob) {
  if (blob_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete blob_;
  }
  if (blob) {
    set_has_blob();
    blob_ = blob;
  } else {
    clear_has_blob();
    blob_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:pb.File.blob)
}

// -------------------------------------------------------------------

// Application

// required string name = 1;
inline bool Application::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Application::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Application::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Application::clear_name() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& Application::name() const {
  // @@protoc_insertion_point(field_get:pb.Application.name)
  return *name_;
}
inline void Application::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set:pb.Application.name)
}
inline void Application::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set_char:pb.Application.name)
}
inline void Application::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:pb.Application.name)
}
inline ::std::string* Application::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:pb.Application.name)
  return name_;
}
inline ::std::string* Application::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void Application::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:pb.Application.name)
}

// optional string description = 2;
inline bool Application::has_description() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Application::set_has_description() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Application::clear_has_description() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Application::clear_description() {
  if (description_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    description_->clear();
  }
  clear_has_description();
}
inline const ::std::string& Application::description() const {
  // @@protoc_insertion_point(field_get:pb.Application.description)
  return *description_;
}
inline void Application::set_description(const ::std::string& value) {
  set_has_description();
  if (description_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    description_ = new ::std::string;
  }
  description_->assign(value);
  // @@protoc_insertion_point(field_set:pb.Application.description)
}
inline void Application::set_description(const char* value) {
  set_has_description();
  if (description_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    description_ = new ::std::string;
  }
  description_->assign(value);
  // @@protoc_insertion_point(field_set_char:pb.Application.description)
}
inline void Application::set_description(const char* value, size_t size) {
  set_has_description();
  if (description_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    description_ = new ::std::string;
  }
  description_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:pb.Application.description)
}
inline ::std::string* Application::mutable_description() {
  set_has_description();
  if (description_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    description_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:pb.Application.description)
  return description_;
}
inline ::std::string* Application::release_description() {
  clear_has_description();
  if (description_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = description_;
    description_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void Application::set_allocated_description(::std::string* description) {
  if (description_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete description_;
  }
  if (description) {
    set_has_description();
    description_ = description;
  } else {
    clear_has_description();
    description_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:pb.Application.description)
}

// optional .pb.ApplicationType type = 3;
inline bool Application::has_type() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Application::set_has_type() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Application::clear_has_type() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Application::clear_type() {
  type_ = 1;
  clear_has_type();
}
inline ::pb::ApplicationType Application::type() const {
  // @@protoc_insertion_point(field_get:pb.Application.type)
  return static_cast< ::pb::ApplicationType >(type_);
}
inline void Application::set_type(::pb::ApplicationType value) {
  assert(::pb::ApplicationType_IsValid(value));
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:pb.Application.type)
}

// optional string weburi = 4;
inline bool Application::has_weburi() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Application::set_has_weburi() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Application::clear_has_weburi() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Application::clear_weburi() {
  if (weburi_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    weburi_->clear();
  }
  clear_has_weburi();
}
inline const ::std::string& Application::weburi() const {
  // @@protoc_insertion_point(field_get:pb.Application.weburi)
  return *weburi_;
}
inline void Application::set_weburi(const ::std::string& value) {
  set_has_weburi();
  if (weburi_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    weburi_ = new ::std::string;
  }
  weburi_->assign(value);
  // @@protoc_insertion_point(field_set:pb.Application.weburi)
}
inline void Application::set_weburi(const char* value) {
  set_has_weburi();
  if (weburi_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    weburi_ = new ::std::string;
  }
  weburi_->assign(value);
  // @@protoc_insertion_point(field_set_char:pb.Application.weburi)
}
inline void Application::set_weburi(const char* value, size_t size) {
  set_has_weburi();
  if (weburi_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    weburi_ = new ::std::string;
  }
  weburi_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:pb.Application.weburi)
}
inline ::std::string* Application::mutable_weburi() {
  set_has_weburi();
  if (weburi_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    weburi_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:pb.Application.weburi)
  return weburi_;
}
inline ::std::string* Application::release_weburi() {
  clear_has_weburi();
  if (weburi_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = weburi_;
    weburi_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void Application::set_allocated_weburi(::std::string* weburi) {
  if (weburi_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete weburi_;
  }
  if (weburi) {
    set_has_weburi();
    weburi_ = weburi;
  } else {
    clear_has_weburi();
    weburi_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:pb.Application.weburi)
}

// repeated .pb.File file = 5;
inline int Application::file_size() const {
  return file_.size();
}
inline void Application::clear_file() {
  file_.Clear();
}
inline const ::pb::File& Application::file(int index) const {
  // @@protoc_insertion_point(field_get:pb.Application.file)
  return file_.Get(index);
}
inline ::pb::File* Application::mutable_file(int index) {
  // @@protoc_insertion_point(field_mutable:pb.Application.file)
  return file_.Mutable(index);
}
inline ::pb::File* Application::add_file() {
  // @@protoc_insertion_point(field_add:pb.Application.file)
  return file_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::File >&
Application::file() const {
  // @@protoc_insertion_point(field_list:pb.Application.file)
  return file_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::File >*
Application::mutable_file() {
  // @@protoc_insertion_point(field_mutable_list:pb.Application.file)
  return &file_;
}

// -------------------------------------------------------------------

// StdoutLine

// required int32 index = 1;
inline bool StdoutLine::has_index() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void StdoutLine::set_has_index() {
  _has_bits_[0] |= 0x00000001u;
}
inline void StdoutLine::clear_has_index() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void StdoutLine::clear_index() {
  index_ = 0;
  clear_has_index();
}
inline ::google::protobuf::int32 StdoutLine::index() const {
  // @@protoc_insertion_point(field_get:pb.StdoutLine.index)
  return index_;
}
inline void StdoutLine::set_index(::google::protobuf::int32 value) {
  set_has_index();
  index_ = value;
  // @@protoc_insertion_point(field_set:pb.StdoutLine.index)
}

// optional string line = 2;
inline bool StdoutLine::has_line() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void StdoutLine::set_has_line() {
  _has_bits_[0] |= 0x00000002u;
}
inline void StdoutLine::clear_has_line() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void StdoutLine::clear_line() {
  if (line_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    line_->clear();
  }
  clear_has_line();
}
inline const ::std::string& StdoutLine::line() const {
  // @@protoc_insertion_point(field_get:pb.StdoutLine.line)
  return *line_;
}
inline void StdoutLine::set_line(const ::std::string& value) {
  set_has_line();
  if (line_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    line_ = new ::std::string;
  }
  line_->assign(value);
  // @@protoc_insertion_point(field_set:pb.StdoutLine.line)
}
inline void StdoutLine::set_line(const char* value) {
  set_has_line();
  if (line_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    line_ = new ::std::string;
  }
  line_->assign(value);
  // @@protoc_insertion_point(field_set_char:pb.StdoutLine.line)
}
inline void StdoutLine::set_line(const char* value, size_t size) {
  set_has_line();
  if (line_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    line_ = new ::std::string;
  }
  line_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:pb.StdoutLine.line)
}
inline ::std::string* StdoutLine::mutable_line() {
  set_has_line();
  if (line_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    line_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:pb.StdoutLine.line)
  return line_;
}
inline ::std::string* StdoutLine::release_line() {
  clear_has_line();
  if (line_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = line_;
    line_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void StdoutLine::set_allocated_line(::std::string* line) {
  if (line_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete line_;
  }
  if (line) {
    set_has_line();
    line_ = line;
  } else {
    clear_has_line();
    line_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:pb.StdoutLine.line)
}

// -------------------------------------------------------------------

// MachineInfo

// optional string type = 1;
inline bool MachineInfo::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MachineInfo::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MachineInfo::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MachineInfo::clear_type() {
  if (type_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    type_->clear();
  }
  clear_has_type();
}
inline const ::std::string& MachineInfo::type() const {
  // @@protoc_insertion_point(field_get:pb.MachineInfo.type)
  return *type_;
}
inline void MachineInfo::set_type(const ::std::string& value) {
  set_has_type();
  if (type_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    type_ = new ::std::string;
  }
  type_->assign(value);
  // @@protoc_insertion_point(field_set:pb.MachineInfo.type)
}
inline void MachineInfo::set_type(const char* value) {
  set_has_type();
  if (type_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    type_ = new ::std::string;
  }
  type_->assign(value);
  // @@protoc_insertion_point(field_set_char:pb.MachineInfo.type)
}
inline void MachineInfo::set_type(const char* value, size_t size) {
  set_has_type();
  if (type_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    type_ = new ::std::string;
  }
  type_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:pb.MachineInfo.type)
}
inline ::std::string* MachineInfo::mutable_type() {
  set_has_type();
  if (type_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    type_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:pb.MachineInfo.type)
  return type_;
}
inline ::std::string* MachineInfo::release_type() {
  clear_has_type();
  if (type_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = type_;
    type_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void MachineInfo::set_allocated_type(::std::string* type) {
  if (type_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete type_;
  }
  if (type) {
    set_has_type();
    type_ = type;
  } else {
    clear_has_type();
    type_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:pb.MachineInfo.type)
}

// optional string manufacturer = 2;
inline bool MachineInfo::has_manufacturer() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void MachineInfo::set_has_manufacturer() {
  _has_bits_[0] |= 0x00000002u;
}
inline void MachineInfo::clear_has_manufacturer() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void MachineInfo::clear_manufacturer() {
  if (manufacturer_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    manufacturer_->clear();
  }
  clear_has_manufacturer();
}
inline const ::std::string& MachineInfo::manufacturer() const {
  // @@protoc_insertion_point(field_get:pb.MachineInfo.manufacturer)
  return *manufacturer_;
}
inline void MachineInfo::set_manufacturer(const ::std::string& value) {
  set_has_manufacturer();
  if (manufacturer_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    manufacturer_ = new ::std::string;
  }
  manufacturer_->assign(value);
  // @@protoc_insertion_point(field_set:pb.MachineInfo.manufacturer)
}
inline void MachineInfo::set_manufacturer(const char* value) {
  set_has_manufacturer();
  if (manufacturer_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    manufacturer_ = new ::std::string;
  }
  manufacturer_->assign(value);
  // @@protoc_insertion_point(field_set_char:pb.MachineInfo.manufacturer)
}
inline void MachineInfo::set_manufacturer(const char* value, size_t size) {
  set_has_manufacturer();
  if (manufacturer_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    manufacturer_ = new ::std::string;
  }
  manufacturer_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:pb.MachineInfo.manufacturer)
}
inline ::std::string* MachineInfo::mutable_manufacturer() {
  set_has_manufacturer();
  if (manufacturer_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    manufacturer_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:pb.MachineInfo.manufacturer)
  return manufacturer_;
}
inline ::std::string* MachineInfo::release_manufacturer() {
  clear_has_manufacturer();
  if (manufacturer_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = manufacturer_;
    manufacturer_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void MachineInfo::set_allocated_manufacturer(::std::string* manufacturer) {
  if (manufacturer_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete manufacturer_;
  }
  if (manufacturer) {
    set_has_manufacturer();
    manufacturer_ = manufacturer;
  } else {
    clear_has_manufacturer();
    manufacturer_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:pb.MachineInfo.manufacturer)
}

// optional string model = 3;
inline bool MachineInfo::has_model() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void MachineInfo::set_has_model() {
  _has_bits_[0] |= 0x00000004u;
}
inline void MachineInfo::clear_has_model() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void MachineInfo::clear_model() {
  if (model_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    model_->clear();
  }
  clear_has_model();
}
inline const ::std::string& MachineInfo::model() const {
  // @@protoc_insertion_point(field_get:pb.MachineInfo.model)
  return *model_;
}
inline void MachineInfo::set_model(const ::std::string& value) {
  set_has_model();
  if (model_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    model_ = new ::std::string;
  }
  model_->assign(value);
  // @@protoc_insertion_point(field_set:pb.MachineInfo.model)
}
inline void MachineInfo::set_model(const char* value) {
  set_has_model();
  if (model_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    model_ = new ::std::string;
  }
  model_->assign(value);
  // @@protoc_insertion_point(field_set_char:pb.MachineInfo.model)
}
inline void MachineInfo::set_model(const char* value, size_t size) {
  set_has_model();
  if (model_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    model_ = new ::std::string;
  }
  model_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:pb.MachineInfo.model)
}
inline ::std::string* MachineInfo::mutable_model() {
  set_has_model();
  if (model_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    model_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:pb.MachineInfo.model)
  return model_;
}
inline ::std::string* MachineInfo::release_model() {
  clear_has_model();
  if (model_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = model_;
    model_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void MachineInfo::set_allocated_model(::std::string* model) {
  if (model_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete model_;
  }
  if (model) {
    set_has_model();
    model_ = model;
  } else {
    clear_has_model();
    model_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:pb.MachineInfo.model)
}

// optional string variant = 4;
inline bool MachineInfo::has_variant() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void MachineInfo::set_has_variant() {
  _has_bits_[0] |= 0x00000008u;
}
inline void MachineInfo::clear_has_variant() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void MachineInfo::clear_variant() {
  if (variant_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    variant_->clear();
  }
  clear_has_variant();
}
inline const ::std::string& MachineInfo::variant() const {
  // @@protoc_insertion_point(field_get:pb.MachineInfo.variant)
  return *variant_;
}
inline void MachineInfo::set_variant(const ::std::string& value) {
  set_has_variant();
  if (variant_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    variant_ = new ::std::string;
  }
  variant_->assign(value);
  // @@protoc_insertion_point(field_set:pb.MachineInfo.variant)
}
inline void MachineInfo::set_variant(const char* value) {
  set_has_variant();
  if (variant_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    variant_ = new ::std::string;
  }
  variant_->assign(value);
  // @@protoc_insertion_point(field_set_char:pb.MachineInfo.variant)
}
inline void MachineInfo::set_variant(const char* value, size_t size) {
  set_has_variant();
  if (variant_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    variant_ = new ::std::string;
  }
  variant_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:pb.MachineInfo.variant)
}
inline ::std::string* MachineInfo::mutable_variant() {
  set_has_variant();
  if (variant_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    variant_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:pb.MachineInfo.variant)
  return variant_;
}
inline ::std::string* MachineInfo::release_variant() {
  clear_has_variant();
  if (variant_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = variant_;
    variant_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void MachineInfo::set_allocated_variant(::std::string* variant) {
  if (variant_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete variant_;
  }
  if (variant) {
    set_has_variant();
    variant_ = variant;
  } else {
    clear_has_variant();
    variant_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:pb.MachineInfo.variant)
}

// -------------------------------------------------------------------

// Launcher

// required int32 index = 1;
inline bool Launcher::has_index() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Launcher::set_has_index() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Launcher::clear_has_index() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Launcher::clear_index() {
  index_ = 0;
  clear_has_index();
}
inline ::google::protobuf::int32 Launcher::index() const {
  // @@protoc_insertion_point(field_get:pb.Launcher.index)
  return index_;
}
inline void Launcher::set_index(::google::protobuf::int32 value) {
  set_has_index();
  index_ = value;
  // @@protoc_insertion_point(field_set:pb.Launcher.index)
}

// optional string name = 2;
inline bool Launcher::has_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Launcher::set_has_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Launcher::clear_has_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Launcher::clear_name() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& Launcher::name() const {
  // @@protoc_insertion_point(field_get:pb.Launcher.name)
  return *name_;
}
inline void Launcher::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set:pb.Launcher.name)
}
inline void Launcher::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set_char:pb.Launcher.name)
}
inline void Launcher::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:pb.Launcher.name)
}
inline ::std::string* Launcher::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:pb.Launcher.name)
  return name_;
}
inline ::std::string* Launcher::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void Launcher::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:pb.Launcher.name)
}

// optional string description = 3;
inline bool Launcher::has_description() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Launcher::set_has_description() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Launcher::clear_has_description() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Launcher::clear_description() {
  if (description_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    description_->clear();
  }
  clear_has_description();
}
inline const ::std::string& Launcher::description() const {
  // @@protoc_insertion_point(field_get:pb.Launcher.description)
  return *description_;
}
inline void Launcher::set_description(const ::std::string& value) {
  set_has_description();
  if (description_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    description_ = new ::std::string;
  }
  description_->assign(value);
  // @@protoc_insertion_point(field_set:pb.Launcher.description)
}
inline void Launcher::set_description(const char* value) {
  set_has_description();
  if (description_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    description_ = new ::std::string;
  }
  description_->assign(value);
  // @@protoc_insertion_point(field_set_char:pb.Launcher.description)
}
inline void Launcher::set_description(const char* value, size_t size) {
  set_has_description();
  if (description_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    description_ = new ::std::string;
  }
  description_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:pb.Launcher.description)
}
inline ::std::string* Launcher::mutable_description() {
  set_has_description();
  if (description_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    description_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:pb.Launcher.description)
  return description_;
}
inline ::std::string* Launcher::release_description() {
  clear_has_description();
  if (description_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = description_;
    description_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void Launcher::set_allocated_description(::std::string* description) {
  if (description_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete description_;
  }
  if (description) {
    set_has_description();
    description_ = description;
  } else {
    clear_has_description();
    description_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:pb.Launcher.description)
}

// optional .pb.File image = 4;
inline bool Launcher::has_image() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Launcher::set_has_image() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Launcher::clear_has_image() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Launcher::clear_image() {
  if (image_ != NULL) image_->::pb::File::Clear();
  clear_has_image();
}
inline const ::pb::File& Launcher::image() const {
  // @@protoc_insertion_point(field_get:pb.Launcher.image)
  return image_ != NULL ? *image_ : *default_instance_->image_;
}
inline ::pb::File* Launcher::mutable_image() {
  set_has_image();
  if (image_ == NULL) image_ = new ::pb::File;
  // @@protoc_insertion_point(field_mutable:pb.Launcher.image)
  return image_;
}
inline ::pb::File* Launcher::release_image() {
  clear_has_image();
  ::pb::File* temp = image_;
  image_ = NULL;
  return temp;
}
inline void Launcher::set_allocated_image(::pb::File* image) {
  delete image_;
  image_ = image;
  if (image) {
    set_has_image();
  } else {
    clear_has_image();
  }
  // @@protoc_insertion_point(field_set_allocated:pb.Launcher.image)
}

// optional .pb.MachineInfo info = 5;
inline bool Launcher::has_info() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Launcher::set_has_info() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Launcher::clear_has_info() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Launcher::clear_info() {
  if (info_ != NULL) info_->::pb::MachineInfo::Clear();
  clear_has_info();
}
inline const ::pb::MachineInfo& Launcher::info() const {
  // @@protoc_insertion_point(field_get:pb.Launcher.info)
  return info_ != NULL ? *info_ : *default_instance_->info_;
}
inline ::pb::MachineInfo* Launcher::mutable_info() {
  set_has_info();
  if (info_ == NULL) info_ = new ::pb::MachineInfo;
  // @@protoc_insertion_point(field_mutable:pb.Launcher.info)
  return info_;
}
inline ::pb::MachineInfo* Launcher::release_info() {
  clear_has_info();
  ::pb::MachineInfo* temp = info_;
  info_ = NULL;
  return temp;
}
inline void Launcher::set_allocated_info(::pb::MachineInfo* info) {
  delete info_;
  info_ = info;
  if (info) {
    set_has_info();
  } else {
    clear_has_info();
  }
  // @@protoc_insertion_point(field_set_allocated:pb.Launcher.info)
}

// optional bool running = 6;
inline bool Launcher::has_running() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Launcher::set_has_running() {
  _has_bits_[0] |= 0x00000020u;
}
inline void Launcher::clear_has_running() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void Launcher::clear_running() {
  running_ = false;
  clear_has_running();
}
inline bool Launcher::running() const {
  // @@protoc_insertion_point(field_get:pb.Launcher.running)
  return running_;
}
inline void Launcher::set_running(bool value) {
  set_has_running();
  running_ = value;
  // @@protoc_insertion_point(field_set:pb.Launcher.running)
}

// optional bool terminating = 7;
inline bool Launcher::has_terminating() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void Launcher::set_has_terminating() {
  _has_bits_[0] |= 0x00000040u;
}
inline void Launcher::clear_has_terminating() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void Launcher::clear_terminating() {
  terminating_ = false;
  clear_has_terminating();
}
inline bool Launcher::terminating() const {
  // @@protoc_insertion_point(field_get:pb.Launcher.terminating)
  return terminating_;
}
inline void Launcher::set_terminating(bool value) {
  set_has_terminating();
  terminating_ = value;
  // @@protoc_insertion_point(field_set:pb.Launcher.terminating)
}

// optional string command = 8;
inline bool Launcher::has_command() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void Launcher::set_has_command() {
  _has_bits_[0] |= 0x00000080u;
}
inline void Launcher::clear_has_command() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void Launcher::clear_command() {
  if (command_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    command_->clear();
  }
  clear_has_command();
}
inline const ::std::string& Launcher::command() const {
  // @@protoc_insertion_point(field_get:pb.Launcher.command)
  return *command_;
}
inline void Launcher::set_command(const ::std::string& value) {
  set_has_command();
  if (command_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    command_ = new ::std::string;
  }
  command_->assign(value);
  // @@protoc_insertion_point(field_set:pb.Launcher.command)
}
inline void Launcher::set_command(const char* value) {
  set_has_command();
  if (command_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    command_ = new ::std::string;
  }
  command_->assign(value);
  // @@protoc_insertion_point(field_set_char:pb.Launcher.command)
}
inline void Launcher::set_command(const char* value, size_t size) {
  set_has_command();
  if (command_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    command_ = new ::std::string;
  }
  command_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:pb.Launcher.command)
}
inline ::std::string* Launcher::mutable_command() {
  set_has_command();
  if (command_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    command_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:pb.Launcher.command)
  return command_;
}
inline ::std::string* Launcher::release_command() {
  clear_has_command();
  if (command_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = command_;
    command_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void Launcher::set_allocated_command(::std::string* command) {
  if (command_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete command_;
  }
  if (command) {
    set_has_command();
    command_ = command;
  } else {
    clear_has_command();
    command_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:pb.Launcher.command)
}

// optional bool shell = 9;
inline bool Launcher::has_shell() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void Launcher::set_has_shell() {
  _has_bits_[0] |= 0x00000100u;
}
inline void Launcher::clear_has_shell() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void Launcher::clear_shell() {
  shell_ = false;
  clear_has_shell();
}
inline bool Launcher::shell() const {
  // @@protoc_insertion_point(field_get:pb.Launcher.shell)
  return shell_;
}
inline void Launcher::set_shell(bool value) {
  set_has_shell();
  shell_ = value;
  // @@protoc_insertion_point(field_set:pb.Launcher.shell)
}

// repeated .pb.StdoutLine output = 10;
inline int Launcher::output_size() const {
  return output_.size();
}
inline void Launcher::clear_output() {
  output_.Clear();
}
inline const ::pb::StdoutLine& Launcher::output(int index) const {
  // @@protoc_insertion_point(field_get:pb.Launcher.output)
  return output_.Get(index);
}
inline ::pb::StdoutLine* Launcher::mutable_output(int index) {
  // @@protoc_insertion_point(field_mutable:pb.Launcher.output)
  return output_.Mutable(index);
}
inline ::pb::StdoutLine* Launcher::add_output() {
  // @@protoc_insertion_point(field_add:pb.Launcher.output)
  return output_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::StdoutLine >&
Launcher::output() const {
  // @@protoc_insertion_point(field_list:pb.Launcher.output)
  return output_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::StdoutLine >*
Launcher::mutable_output() {
  // @@protoc_insertion_point(field_mutable_list:pb.Launcher.output)
  return &output_;
}

// optional int32 returncode = 11;
inline bool Launcher::has_returncode() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void Launcher::set_has_returncode() {
  _has_bits_[0] |= 0x00000400u;
}
inline void Launcher::clear_has_returncode() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void Launcher::clear_returncode() {
  returncode_ = 0;
  clear_has_returncode();
}
inline ::google::protobuf::int32 Launcher::returncode() const {
  // @@protoc_insertion_point(field_get:pb.Launcher.returncode)
  return returncode_;
}
inline void Launcher::set_returncode(::google::protobuf::int32 value) {
  set_has_returncode();
  returncode_ = value;
  // @@protoc_insertion_point(field_set:pb.Launcher.returncode)
}

// optional string workdir = 12;
inline bool Launcher::has_workdir() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void Launcher::set_has_workdir() {
  _has_bits_[0] |= 0x00000800u;
}
inline void Launcher::clear_has_workdir() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void Launcher::clear_workdir() {
  if (workdir_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    workdir_->clear();
  }
  clear_has_workdir();
}
inline const ::std::string& Launcher::workdir() const {
  // @@protoc_insertion_point(field_get:pb.Launcher.workdir)
  return *workdir_;
}
inline void Launcher::set_workdir(const ::std::string& value) {
  set_has_workdir();
  if (workdir_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    workdir_ = new ::std::string;
  }
  workdir_->assign(value);
  // @@protoc_insertion_point(field_set:pb.Launcher.workdir)
}
inline void Launcher::set_workdir(const char* value) {
  set_has_workdir();
  if (workdir_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    workdir_ = new ::std::string;
  }
  workdir_->assign(value);
  // @@protoc_insertion_point(field_set_char:pb.Launcher.workdir)
}
inline void Launcher::set_workdir(const char* value, size_t size) {
  set_has_workdir();
  if (workdir_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    workdir_ = new ::std::string;
  }
  workdir_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:pb.Launcher.workdir)
}
inline ::std::string* Launcher::mutable_workdir() {
  set_has_workdir();
  if (workdir_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    workdir_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:pb.Launcher.workdir)
  return workdir_;
}
inline ::std::string* Launcher::release_workdir() {
  clear_has_workdir();
  if (workdir_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = workdir_;
    workdir_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void Launcher::set_allocated_workdir(::std::string* workdir) {
  if (workdir_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete workdir_;
  }
  if (workdir) {
    set_has_workdir();
    workdir_ = workdir;
  } else {
    clear_has_workdir();
    workdir_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:pb.Launcher.workdir)
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace pb

#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::pb::ApplicationType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::pb::ApplicationType>() {
  return ::pb::ApplicationType_descriptor();
}
template <> struct is_proto_enum< ::pb::FileContent> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::pb::FileContent>() {
  return ::pb::FileContent_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_machinetalk_2fprotobuf_2fconfig_2eproto__INCLUDED
