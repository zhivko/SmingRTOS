// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: machinetalk/protobuf/test.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "machinetalk/protobuf/test.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace pb {

namespace {

const ::google::protobuf::Descriptor* Test1_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Test1_reflection_ = NULL;
const ::google::protobuf::Descriptor* Test2_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Test2_reflection_ = NULL;
const ::google::protobuf::Descriptor* Test3_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Test3_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* TestOpType_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_machinetalk_2fprotobuf_2ftest_2eproto() {
  protobuf_AddDesc_machinetalk_2fprotobuf_2ftest_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "machinetalk/protobuf/test.proto");
  GOOGLE_CHECK(file != NULL);
  Test1_descriptor_ = file->message_type(0);
  static const int Test1_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Test1, op_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Test1, end_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Test1, center_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Test1, normal_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Test1, turn_),
  };
  Test1_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Test1_descriptor_,
      Test1::default_instance_,
      Test1_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Test1, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Test1, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Test1));
  Test2_descriptor_ = file->message_type(1);
  static const int Test2_offsets_[1] = {
  };
  Test2_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Test2_descriptor_,
      Test2::default_instance_,
      Test2_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Test2, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Test2, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Test2));
  Test3_descriptor_ = file->message_type(2);
  static const int Test3_offsets_[1] = {
  };
  Test3_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Test3_descriptor_,
      Test3::default_instance_,
      Test3_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Test3, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Test3, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Test3));
  TestOpType_descriptor_ = file->enum_type(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_machinetalk_2fprotobuf_2ftest_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Test1_descriptor_, &Test1::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Test2_descriptor_, &Test2::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Test3_descriptor_, &Test3::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_machinetalk_2fprotobuf_2ftest_2eproto() {
  delete Test1::default_instance_;
  delete Test1_reflection_;
  delete Test2::default_instance_;
  delete Test2_reflection_;
  delete Test3::default_instance_;
  delete Test3_reflection_;
}

void protobuf_AddDesc_machinetalk_2fprotobuf_2ftest_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::pb::protobuf_AddDesc_machinetalk_2fprotobuf_2femcclass_2eproto();
  ::protobuf_AddDesc_machinetalk_2fprotobuf_2fnanopb_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\037machinetalk/protobuf/test.proto\022\002pb\032#m"
    "achinetalk/protobuf/emcclass.proto\032!mach"
    "inetalk/protobuf/nanopb.proto\"\225\001\n\005Test1\022"
    "\032\n\002op\030\n \002(\0162\016.pb.TestOpType\022\030\n\003end\030\024 \002(\013"
    "2\013.pb.EmcPose\022\037\n\006center\030\036 \001(\0132\017.pb.PmCar"
    "tesian\022\037\n\006normal\030( \001(\0132\017.pb.PmCartesian\022"
    "\014\n\004turn\0302 \001(\005:\006\222\?\003H\224\n\"\017\n\005Test2:\006\222\?\003H\225\n\"\017"
    "\n\005Test3:\006\222\?\003H\226\n*\"\n\nTestOpType\022\010\n\004LINE\020\n\022"
    "\n\n\006CIRCLE\020\024", 331);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "machinetalk/protobuf/test.proto", &protobuf_RegisterTypes);
  Test1::default_instance_ = new Test1();
  Test2::default_instance_ = new Test2();
  Test3::default_instance_ = new Test3();
  Test1::default_instance_->InitAsDefaultInstance();
  Test2::default_instance_->InitAsDefaultInstance();
  Test3::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_machinetalk_2fprotobuf_2ftest_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_machinetalk_2fprotobuf_2ftest_2eproto {
  StaticDescriptorInitializer_machinetalk_2fprotobuf_2ftest_2eproto() {
    protobuf_AddDesc_machinetalk_2fprotobuf_2ftest_2eproto();
  }
} static_descriptor_initializer_machinetalk_2fprotobuf_2ftest_2eproto_;
const ::google::protobuf::EnumDescriptor* TestOpType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TestOpType_descriptor_;
}
bool TestOpType_IsValid(int value) {
  switch(value) {
    case 10:
    case 20:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
const int Test1::kOpFieldNumber;
const int Test1::kEndFieldNumber;
const int Test1::kCenterFieldNumber;
const int Test1::kNormalFieldNumber;
const int Test1::kTurnFieldNumber;
#endif  // !_MSC_VER

Test1::Test1()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.Test1)
}

void Test1::InitAsDefaultInstance() {
  end_ = const_cast< ::pb::EmcPose*>(&::pb::EmcPose::default_instance());
  center_ = const_cast< ::pb::PmCartesian*>(&::pb::PmCartesian::default_instance());
  normal_ = const_cast< ::pb::PmCartesian*>(&::pb::PmCartesian::default_instance());
}

Test1::Test1(const Test1& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.Test1)
}

void Test1::SharedCtor() {
  _cached_size_ = 0;
  op_ = 10;
  end_ = NULL;
  center_ = NULL;
  normal_ = NULL;
  turn_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Test1::~Test1() {
  // @@protoc_insertion_point(destructor:pb.Test1)
  SharedDtor();
}

void Test1::SharedDtor() {
  if (this != default_instance_) {
    delete end_;
    delete center_;
    delete normal_;
  }
}

void Test1::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Test1::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Test1_descriptor_;
}

const Test1& Test1::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_machinetalk_2fprotobuf_2ftest_2eproto();
  return *default_instance_;
}

Test1* Test1::default_instance_ = NULL;

Test1* Test1::New() const {
  return new Test1;
}

void Test1::Clear() {
  if (_has_bits_[0 / 32] & 31) {
    op_ = 10;
    if (has_end()) {
      if (end_ != NULL) end_->::pb::EmcPose::Clear();
    }
    if (has_center()) {
      if (center_ != NULL) center_->::pb::PmCartesian::Clear();
    }
    if (has_normal()) {
      if (normal_ != NULL) normal_->::pb::PmCartesian::Clear();
    }
    turn_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Test1::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.Test1)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .pb.TestOpType op = 10;
      case 10: {
        if (tag == 80) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::pb::TestOpType_IsValid(value)) {
            set_op(static_cast< ::pb::TestOpType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(10, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(162)) goto parse_end;
        break;
      }

      // required .pb.EmcPose end = 20;
      case 20: {
        if (tag == 162) {
         parse_end:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_end()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(242)) goto parse_center;
        break;
      }

      // optional .pb.PmCartesian center = 30;
      case 30: {
        if (tag == 242) {
         parse_center:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_center()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(322)) goto parse_normal;
        break;
      }

      // optional .pb.PmCartesian normal = 40;
      case 40: {
        if (tag == 322) {
         parse_normal:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_normal()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(400)) goto parse_turn;
        break;
      }

      // optional int32 turn = 50;
      case 50: {
        if (tag == 400) {
         parse_turn:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &turn_)));
          set_has_turn();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.Test1)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.Test1)
  return false;
#undef DO_
}

void Test1::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.Test1)
  // required .pb.TestOpType op = 10;
  if (has_op()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      10, this->op(), output);
  }

  // required .pb.EmcPose end = 20;
  if (has_end()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      20, this->end(), output);
  }

  // optional .pb.PmCartesian center = 30;
  if (has_center()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      30, this->center(), output);
  }

  // optional .pb.PmCartesian normal = 40;
  if (has_normal()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      40, this->normal(), output);
  }

  // optional int32 turn = 50;
  if (has_turn()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(50, this->turn(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.Test1)
}

::google::protobuf::uint8* Test1::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.Test1)
  // required .pb.TestOpType op = 10;
  if (has_op()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      10, this->op(), target);
  }

  // required .pb.EmcPose end = 20;
  if (has_end()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        20, this->end(), target);
  }

  // optional .pb.PmCartesian center = 30;
  if (has_center()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        30, this->center(), target);
  }

  // optional .pb.PmCartesian normal = 40;
  if (has_normal()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        40, this->normal(), target);
  }

  // optional int32 turn = 50;
  if (has_turn()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(50, this->turn(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.Test1)
  return target;
}

int Test1::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .pb.TestOpType op = 10;
    if (has_op()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->op());
    }

    // required .pb.EmcPose end = 20;
    if (has_end()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->end());
    }

    // optional .pb.PmCartesian center = 30;
    if (has_center()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->center());
    }

    // optional .pb.PmCartesian normal = 40;
    if (has_normal()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->normal());
    }

    // optional int32 turn = 50;
    if (has_turn()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->turn());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Test1::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Test1* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Test1*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Test1::MergeFrom(const Test1& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_op()) {
      set_op(from.op());
    }
    if (from.has_end()) {
      mutable_end()->::pb::EmcPose::MergeFrom(from.end());
    }
    if (from.has_center()) {
      mutable_center()->::pb::PmCartesian::MergeFrom(from.center());
    }
    if (from.has_normal()) {
      mutable_normal()->::pb::PmCartesian::MergeFrom(from.normal());
    }
    if (from.has_turn()) {
      set_turn(from.turn());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Test1::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Test1::CopyFrom(const Test1& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Test1::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_end()) {
    if (!this->end().IsInitialized()) return false;
  }
  return true;
}

void Test1::Swap(Test1* other) {
  if (other != this) {
    std::swap(op_, other->op_);
    std::swap(end_, other->end_);
    std::swap(center_, other->center_);
    std::swap(normal_, other->normal_);
    std::swap(turn_, other->turn_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Test1::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Test1_descriptor_;
  metadata.reflection = Test1_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

Test2::Test2()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.Test2)
}

void Test2::InitAsDefaultInstance() {
}

Test2::Test2(const Test2& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.Test2)
}

void Test2::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Test2::~Test2() {
  // @@protoc_insertion_point(destructor:pb.Test2)
  SharedDtor();
}

void Test2::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Test2::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Test2::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Test2_descriptor_;
}

const Test2& Test2::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_machinetalk_2fprotobuf_2ftest_2eproto();
  return *default_instance_;
}

Test2* Test2::default_instance_ = NULL;

Test2* Test2::New() const {
  return new Test2;
}

void Test2::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Test2::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.Test2)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:pb.Test2)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.Test2)
  return false;
#undef DO_
}

void Test2::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.Test2)
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.Test2)
}

::google::protobuf::uint8* Test2::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.Test2)
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.Test2)
  return target;
}

int Test2::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Test2::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Test2* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Test2*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Test2::MergeFrom(const Test2& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Test2::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Test2::CopyFrom(const Test2& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Test2::IsInitialized() const {

  return true;
}

void Test2::Swap(Test2* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Test2::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Test2_descriptor_;
  metadata.reflection = Test2_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

Test3::Test3()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.Test3)
}

void Test3::InitAsDefaultInstance() {
}

Test3::Test3(const Test3& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.Test3)
}

void Test3::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Test3::~Test3() {
  // @@protoc_insertion_point(destructor:pb.Test3)
  SharedDtor();
}

void Test3::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Test3::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Test3::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Test3_descriptor_;
}

const Test3& Test3::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_machinetalk_2fprotobuf_2ftest_2eproto();
  return *default_instance_;
}

Test3* Test3::default_instance_ = NULL;

Test3* Test3::New() const {
  return new Test3;
}

void Test3::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Test3::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.Test3)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:pb.Test3)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.Test3)
  return false;
#undef DO_
}

void Test3::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.Test3)
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.Test3)
}

::google::protobuf::uint8* Test3::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.Test3)
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.Test3)
  return target;
}

int Test3::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Test3::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Test3* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Test3*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Test3::MergeFrom(const Test3& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Test3::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Test3::CopyFrom(const Test3& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Test3::IsInitialized() const {

  return true;
}

void Test3::Swap(Test3* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Test3::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Test3_descriptor_;
  metadata.reflection = Test3_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace pb

// @@protoc_insertion_point(global_scope)
