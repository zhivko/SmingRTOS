// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: machinetalk/protobuf/canon.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "machinetalk/protobuf/canon.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace pb {

namespace {

const ::google::protobuf::Descriptor* Emc_Traj_Set_G5x_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Emc_Traj_Set_G5x_reflection_ = NULL;
const ::google::protobuf::Descriptor* Emc_Traj_Set_G92_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Emc_Traj_Set_G92_reflection_ = NULL;
const ::google::protobuf::Descriptor* Emc_Traj_Set_Rotation_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Emc_Traj_Set_Rotation_reflection_ = NULL;
const ::google::protobuf::Descriptor* Emc_Traj_Linear_Move_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Emc_Traj_Linear_Move_reflection_ = NULL;
const ::google::protobuf::Descriptor* Emc_Traj_Probe_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Emc_Traj_Probe_reflection_ = NULL;
const ::google::protobuf::Descriptor* Emc_Traj_Circular_Move_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Emc_Traj_Circular_Move_reflection_ = NULL;
const ::google::protobuf::Descriptor* Emc_Traj_Rigid_Tap_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Emc_Traj_Rigid_Tap_reflection_ = NULL;
const ::google::protobuf::Descriptor* Emc_Traj_Set_Term_Cond_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Emc_Traj_Set_Term_Cond_reflection_ = NULL;
const ::google::protobuf::Descriptor* Emc_Traj_Set_Spindlesync_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Emc_Traj_Set_Spindlesync_reflection_ = NULL;
const ::google::protobuf::Descriptor* Emc_Traj_Delay_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Emc_Traj_Delay_reflection_ = NULL;
const ::google::protobuf::Descriptor* Emc_Spindle_On_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Emc_Spindle_On_reflection_ = NULL;
const ::google::protobuf::Descriptor* Emc_Spindle_Speed_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Emc_Spindle_Speed_reflection_ = NULL;
const ::google::protobuf::Descriptor* Emc_Spindle_Orient_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Emc_Spindle_Orient_reflection_ = NULL;
const ::google::protobuf::Descriptor* Emc_Spindle_Wait_Orient_Complete_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Emc_Spindle_Wait_Orient_Complete_reflection_ = NULL;
const ::google::protobuf::Descriptor* Emc_Tool_Set_Offset_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Emc_Tool_Set_Offset_reflection_ = NULL;
const ::google::protobuf::Descriptor* Emc_Traj_Set_Offset_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Emc_Traj_Set_Offset_reflection_ = NULL;
const ::google::protobuf::Descriptor* Emc_Tool_Prepare_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Emc_Tool_Prepare_reflection_ = NULL;
const ::google::protobuf::Descriptor* Emc_Tool_Set_Number_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Emc_Tool_Set_Number_reflection_ = NULL;
const ::google::protobuf::Descriptor* Emc_Traj_Set_Fo_Enable_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Emc_Traj_Set_Fo_Enable_reflection_ = NULL;
const ::google::protobuf::Descriptor* Emc_Traj_Set_So_Enable_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Emc_Traj_Set_So_Enable_reflection_ = NULL;
const ::google::protobuf::Descriptor* Emc_Traj_Set_Fh_Enable_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Emc_Traj_Set_Fh_Enable_reflection_ = NULL;
const ::google::protobuf::Descriptor* Emc_Motion_Adaptive_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Emc_Motion_Adaptive_reflection_ = NULL;
const ::google::protobuf::Descriptor* Emc_Operator_Display_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Emc_Operator_Display_reflection_ = NULL;
const ::google::protobuf::Descriptor* Emc_Operator_Text_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Emc_Operator_Text_reflection_ = NULL;
const ::google::protobuf::Descriptor* Emc_Operator_Error_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Emc_Operator_Error_reflection_ = NULL;
const ::google::protobuf::Descriptor* Emc_Motion_Set_Dout_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Emc_Motion_Set_Dout_reflection_ = NULL;
const ::google::protobuf::Descriptor* Emc_Motion_Set_Aout_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Emc_Motion_Set_Aout_reflection_ = NULL;
const ::google::protobuf::Descriptor* Emc_Aux_Input_Wait_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Emc_Aux_Input_Wait_reflection_ = NULL;
const ::google::protobuf::Descriptor* Emc_Exec_Plugin_Ca1l_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Emc_Exec_Plugin_Ca1l_reflection_ = NULL;
const ::google::protobuf::Descriptor* Emc_Io_Plugin_Call_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Emc_Io_Plugin_Call_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_machinetalk_2fprotobuf_2fcanon_2eproto() {
  protobuf_AddDesc_machinetalk_2fprotobuf_2fcanon_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "machinetalk/protobuf/canon.proto");
  GOOGLE_CHECK(file != NULL);
  Emc_Traj_Set_G5x_descriptor_ = file->message_type(0);
  static const int Emc_Traj_Set_G5x_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Emc_Traj_Set_G5x, origin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Emc_Traj_Set_G5x, g5x_index_),
  };
  Emc_Traj_Set_G5x_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Emc_Traj_Set_G5x_descriptor_,
      Emc_Traj_Set_G5x::default_instance_,
      Emc_Traj_Set_G5x_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Emc_Traj_Set_G5x, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Emc_Traj_Set_G5x, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Emc_Traj_Set_G5x));
  Emc_Traj_Set_G92_descriptor_ = file->message_type(1);
  static const int Emc_Traj_Set_G92_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Emc_Traj_Set_G92, origin_),
  };
  Emc_Traj_Set_G92_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Emc_Traj_Set_G92_descriptor_,
      Emc_Traj_Set_G92::default_instance_,
      Emc_Traj_Set_G92_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Emc_Traj_Set_G92, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Emc_Traj_Set_G92, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Emc_Traj_Set_G92));
  Emc_Traj_Set_Rotation_descriptor_ = file->message_type(2);
  static const int Emc_Traj_Set_Rotation_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Emc_Traj_Set_Rotation, rotation_),
  };
  Emc_Traj_Set_Rotation_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Emc_Traj_Set_Rotation_descriptor_,
      Emc_Traj_Set_Rotation::default_instance_,
      Emc_Traj_Set_Rotation_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Emc_Traj_Set_Rotation, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Emc_Traj_Set_Rotation, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Emc_Traj_Set_Rotation));
  Emc_Traj_Linear_Move_descriptor_ = file->message_type(3);
  static const int Emc_Traj_Linear_Move_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Emc_Traj_Linear_Move, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Emc_Traj_Linear_Move, end_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Emc_Traj_Linear_Move, vel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Emc_Traj_Linear_Move, ini_maxvel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Emc_Traj_Linear_Move, acc_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Emc_Traj_Linear_Move, feed_mode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Emc_Traj_Linear_Move, indexrotary_),
  };
  Emc_Traj_Linear_Move_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Emc_Traj_Linear_Move_descriptor_,
      Emc_Traj_Linear_Move::default_instance_,
      Emc_Traj_Linear_Move_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Emc_Traj_Linear_Move, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Emc_Traj_Linear_Move, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Emc_Traj_Linear_Move));
  Emc_Traj_Probe_descriptor_ = file->message_type(4);
  static const int Emc_Traj_Probe_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Emc_Traj_Probe, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Emc_Traj_Probe, pos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Emc_Traj_Probe, vel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Emc_Traj_Probe, ini_maxvel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Emc_Traj_Probe, acc_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Emc_Traj_Probe, probe_type_),
  };
  Emc_Traj_Probe_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Emc_Traj_Probe_descriptor_,
      Emc_Traj_Probe::default_instance_,
      Emc_Traj_Probe_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Emc_Traj_Probe, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Emc_Traj_Probe, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Emc_Traj_Probe));
  Emc_Traj_Circular_Move_descriptor_ = file->message_type(5);
  static const int Emc_Traj_Circular_Move_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Emc_Traj_Circular_Move, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Emc_Traj_Circular_Move, end_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Emc_Traj_Circular_Move, center_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Emc_Traj_Circular_Move, normal_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Emc_Traj_Circular_Move, vel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Emc_Traj_Circular_Move, ini_maxvel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Emc_Traj_Circular_Move, acc_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Emc_Traj_Circular_Move, feed_mode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Emc_Traj_Circular_Move, turn_),
  };
  Emc_Traj_Circular_Move_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Emc_Traj_Circular_Move_descriptor_,
      Emc_Traj_Circular_Move::default_instance_,
      Emc_Traj_Circular_Move_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Emc_Traj_Circular_Move, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Emc_Traj_Circular_Move, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Emc_Traj_Circular_Move));
  Emc_Traj_Rigid_Tap_descriptor_ = file->message_type(6);
  static const int Emc_Traj_Rigid_Tap_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Emc_Traj_Rigid_Tap, pos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Emc_Traj_Rigid_Tap, vel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Emc_Traj_Rigid_Tap, ini_maxvel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Emc_Traj_Rigid_Tap, acc_),
  };
  Emc_Traj_Rigid_Tap_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Emc_Traj_Rigid_Tap_descriptor_,
      Emc_Traj_Rigid_Tap::default_instance_,
      Emc_Traj_Rigid_Tap_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Emc_Traj_Rigid_Tap, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Emc_Traj_Rigid_Tap, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Emc_Traj_Rigid_Tap));
  Emc_Traj_Set_Term_Cond_descriptor_ = file->message_type(7);
  static const int Emc_Traj_Set_Term_Cond_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Emc_Traj_Set_Term_Cond, cond_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Emc_Traj_Set_Term_Cond, tolerance_),
  };
  Emc_Traj_Set_Term_Cond_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Emc_Traj_Set_Term_Cond_descriptor_,
      Emc_Traj_Set_Term_Cond::default_instance_,
      Emc_Traj_Set_Term_Cond_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Emc_Traj_Set_Term_Cond, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Emc_Traj_Set_Term_Cond, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Emc_Traj_Set_Term_Cond));
  Emc_Traj_Set_Spindlesync_descriptor_ = file->message_type(8);
  static const int Emc_Traj_Set_Spindlesync_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Emc_Traj_Set_Spindlesync, feed_per_revolution_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Emc_Traj_Set_Spindlesync, velocity_mode_),
  };
  Emc_Traj_Set_Spindlesync_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Emc_Traj_Set_Spindlesync_descriptor_,
      Emc_Traj_Set_Spindlesync::default_instance_,
      Emc_Traj_Set_Spindlesync_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Emc_Traj_Set_Spindlesync, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Emc_Traj_Set_Spindlesync, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Emc_Traj_Set_Spindlesync));
  Emc_Traj_Delay_descriptor_ = file->message_type(9);
  static const int Emc_Traj_Delay_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Emc_Traj_Delay, delay_),
  };
  Emc_Traj_Delay_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Emc_Traj_Delay_descriptor_,
      Emc_Traj_Delay::default_instance_,
      Emc_Traj_Delay_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Emc_Traj_Delay, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Emc_Traj_Delay, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Emc_Traj_Delay));
  Emc_Spindle_On_descriptor_ = file->message_type(10);
  static const int Emc_Spindle_On_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Emc_Spindle_On, speed_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Emc_Spindle_On, factor_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Emc_Spindle_On, xoffset_),
  };
  Emc_Spindle_On_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Emc_Spindle_On_descriptor_,
      Emc_Spindle_On::default_instance_,
      Emc_Spindle_On_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Emc_Spindle_On, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Emc_Spindle_On, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Emc_Spindle_On));
  Emc_Spindle_Speed_descriptor_ = file->message_type(11);
  static const int Emc_Spindle_Speed_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Emc_Spindle_Speed, speed_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Emc_Spindle_Speed, factor_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Emc_Spindle_Speed, xoffset_),
  };
  Emc_Spindle_Speed_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Emc_Spindle_Speed_descriptor_,
      Emc_Spindle_Speed::default_instance_,
      Emc_Spindle_Speed_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Emc_Spindle_Speed, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Emc_Spindle_Speed, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Emc_Spindle_Speed));
  Emc_Spindle_Orient_descriptor_ = file->message_type(12);
  static const int Emc_Spindle_Orient_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Emc_Spindle_Orient, orientation_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Emc_Spindle_Orient, mode_),
  };
  Emc_Spindle_Orient_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Emc_Spindle_Orient_descriptor_,
      Emc_Spindle_Orient::default_instance_,
      Emc_Spindle_Orient_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Emc_Spindle_Orient, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Emc_Spindle_Orient, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Emc_Spindle_Orient));
  Emc_Spindle_Wait_Orient_Complete_descriptor_ = file->message_type(13);
  static const int Emc_Spindle_Wait_Orient_Complete_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Emc_Spindle_Wait_Orient_Complete, timeout_),
  };
  Emc_Spindle_Wait_Orient_Complete_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Emc_Spindle_Wait_Orient_Complete_descriptor_,
      Emc_Spindle_Wait_Orient_Complete::default_instance_,
      Emc_Spindle_Wait_Orient_Complete_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Emc_Spindle_Wait_Orient_Complete, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Emc_Spindle_Wait_Orient_Complete, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Emc_Spindle_Wait_Orient_Complete));
  Emc_Tool_Set_Offset_descriptor_ = file->message_type(14);
  static const int Emc_Tool_Set_Offset_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Emc_Tool_Set_Offset, pocket_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Emc_Tool_Set_Offset, toolno_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Emc_Tool_Set_Offset, offset_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Emc_Tool_Set_Offset, diameter_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Emc_Tool_Set_Offset, frontangle_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Emc_Tool_Set_Offset, backangle_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Emc_Tool_Set_Offset, orientation_),
  };
  Emc_Tool_Set_Offset_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Emc_Tool_Set_Offset_descriptor_,
      Emc_Tool_Set_Offset::default_instance_,
      Emc_Tool_Set_Offset_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Emc_Tool_Set_Offset, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Emc_Tool_Set_Offset, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Emc_Tool_Set_Offset));
  Emc_Traj_Set_Offset_descriptor_ = file->message_type(15);
  static const int Emc_Traj_Set_Offset_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Emc_Traj_Set_Offset, offset_),
  };
  Emc_Traj_Set_Offset_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Emc_Traj_Set_Offset_descriptor_,
      Emc_Traj_Set_Offset::default_instance_,
      Emc_Traj_Set_Offset_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Emc_Traj_Set_Offset, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Emc_Traj_Set_Offset, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Emc_Traj_Set_Offset));
  Emc_Tool_Prepare_descriptor_ = file->message_type(16);
  static const int Emc_Tool_Prepare_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Emc_Tool_Prepare, pocket_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Emc_Tool_Prepare, tool_),
  };
  Emc_Tool_Prepare_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Emc_Tool_Prepare_descriptor_,
      Emc_Tool_Prepare::default_instance_,
      Emc_Tool_Prepare_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Emc_Tool_Prepare, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Emc_Tool_Prepare, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Emc_Tool_Prepare));
  Emc_Tool_Set_Number_descriptor_ = file->message_type(17);
  static const int Emc_Tool_Set_Number_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Emc_Tool_Set_Number, tool_),
  };
  Emc_Tool_Set_Number_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Emc_Tool_Set_Number_descriptor_,
      Emc_Tool_Set_Number::default_instance_,
      Emc_Tool_Set_Number_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Emc_Tool_Set_Number, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Emc_Tool_Set_Number, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Emc_Tool_Set_Number));
  Emc_Traj_Set_Fo_Enable_descriptor_ = file->message_type(18);
  static const int Emc_Traj_Set_Fo_Enable_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Emc_Traj_Set_Fo_Enable, mode_),
  };
  Emc_Traj_Set_Fo_Enable_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Emc_Traj_Set_Fo_Enable_descriptor_,
      Emc_Traj_Set_Fo_Enable::default_instance_,
      Emc_Traj_Set_Fo_Enable_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Emc_Traj_Set_Fo_Enable, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Emc_Traj_Set_Fo_Enable, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Emc_Traj_Set_Fo_Enable));
  Emc_Traj_Set_So_Enable_descriptor_ = file->message_type(19);
  static const int Emc_Traj_Set_So_Enable_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Emc_Traj_Set_So_Enable, mode_),
  };
  Emc_Traj_Set_So_Enable_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Emc_Traj_Set_So_Enable_descriptor_,
      Emc_Traj_Set_So_Enable::default_instance_,
      Emc_Traj_Set_So_Enable_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Emc_Traj_Set_So_Enable, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Emc_Traj_Set_So_Enable, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Emc_Traj_Set_So_Enable));
  Emc_Traj_Set_Fh_Enable_descriptor_ = file->message_type(20);
  static const int Emc_Traj_Set_Fh_Enable_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Emc_Traj_Set_Fh_Enable, mode_),
  };
  Emc_Traj_Set_Fh_Enable_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Emc_Traj_Set_Fh_Enable_descriptor_,
      Emc_Traj_Set_Fh_Enable::default_instance_,
      Emc_Traj_Set_Fh_Enable_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Emc_Traj_Set_Fh_Enable, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Emc_Traj_Set_Fh_Enable, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Emc_Traj_Set_Fh_Enable));
  Emc_Motion_Adaptive_descriptor_ = file->message_type(21);
  static const int Emc_Motion_Adaptive_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Emc_Motion_Adaptive, status_),
  };
  Emc_Motion_Adaptive_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Emc_Motion_Adaptive_descriptor_,
      Emc_Motion_Adaptive::default_instance_,
      Emc_Motion_Adaptive_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Emc_Motion_Adaptive, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Emc_Motion_Adaptive, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Emc_Motion_Adaptive));
  Emc_Operator_Display_descriptor_ = file->message_type(22);
  static const int Emc_Operator_Display_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Emc_Operator_Display, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Emc_Operator_Display, display_),
  };
  Emc_Operator_Display_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Emc_Operator_Display_descriptor_,
      Emc_Operator_Display::default_instance_,
      Emc_Operator_Display_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Emc_Operator_Display, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Emc_Operator_Display, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Emc_Operator_Display));
  Emc_Operator_Text_descriptor_ = file->message_type(23);
  static const int Emc_Operator_Text_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Emc_Operator_Text, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Emc_Operator_Text, text_),
  };
  Emc_Operator_Text_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Emc_Operator_Text_descriptor_,
      Emc_Operator_Text::default_instance_,
      Emc_Operator_Text_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Emc_Operator_Text, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Emc_Operator_Text, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Emc_Operator_Text));
  Emc_Operator_Error_descriptor_ = file->message_type(24);
  static const int Emc_Operator_Error_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Emc_Operator_Error, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Emc_Operator_Error, error_),
  };
  Emc_Operator_Error_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Emc_Operator_Error_descriptor_,
      Emc_Operator_Error::default_instance_,
      Emc_Operator_Error_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Emc_Operator_Error, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Emc_Operator_Error, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Emc_Operator_Error));
  Emc_Motion_Set_Dout_descriptor_ = file->message_type(25);
  static const int Emc_Motion_Set_Dout_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Emc_Motion_Set_Dout, index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Emc_Motion_Set_Dout, start_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Emc_Motion_Set_Dout, end_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Emc_Motion_Set_Dout, now_),
  };
  Emc_Motion_Set_Dout_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Emc_Motion_Set_Dout_descriptor_,
      Emc_Motion_Set_Dout::default_instance_,
      Emc_Motion_Set_Dout_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Emc_Motion_Set_Dout, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Emc_Motion_Set_Dout, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Emc_Motion_Set_Dout));
  Emc_Motion_Set_Aout_descriptor_ = file->message_type(26);
  static const int Emc_Motion_Set_Aout_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Emc_Motion_Set_Aout, index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Emc_Motion_Set_Aout, start_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Emc_Motion_Set_Aout, end_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Emc_Motion_Set_Aout, now_),
  };
  Emc_Motion_Set_Aout_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Emc_Motion_Set_Aout_descriptor_,
      Emc_Motion_Set_Aout::default_instance_,
      Emc_Motion_Set_Aout_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Emc_Motion_Set_Aout, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Emc_Motion_Set_Aout, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Emc_Motion_Set_Aout));
  Emc_Aux_Input_Wait_descriptor_ = file->message_type(27);
  static const int Emc_Aux_Input_Wait_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Emc_Aux_Input_Wait, index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Emc_Aux_Input_Wait, input_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Emc_Aux_Input_Wait, wait_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Emc_Aux_Input_Wait, timeout_),
  };
  Emc_Aux_Input_Wait_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Emc_Aux_Input_Wait_descriptor_,
      Emc_Aux_Input_Wait::default_instance_,
      Emc_Aux_Input_Wait_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Emc_Aux_Input_Wait, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Emc_Aux_Input_Wait, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Emc_Aux_Input_Wait));
  Emc_Exec_Plugin_Ca1l_descriptor_ = file->message_type(28);
  static const int Emc_Exec_Plugin_Ca1l_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Emc_Exec_Plugin_Ca1l, call_),
  };
  Emc_Exec_Plugin_Ca1l_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Emc_Exec_Plugin_Ca1l_descriptor_,
      Emc_Exec_Plugin_Ca1l::default_instance_,
      Emc_Exec_Plugin_Ca1l_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Emc_Exec_Plugin_Ca1l, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Emc_Exec_Plugin_Ca1l, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Emc_Exec_Plugin_Ca1l));
  Emc_Io_Plugin_Call_descriptor_ = file->message_type(29);
  static const int Emc_Io_Plugin_Call_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Emc_Io_Plugin_Call, call_),
  };
  Emc_Io_Plugin_Call_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Emc_Io_Plugin_Call_descriptor_,
      Emc_Io_Plugin_Call::default_instance_,
      Emc_Io_Plugin_Call_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Emc_Io_Plugin_Call, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Emc_Io_Plugin_Call, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Emc_Io_Plugin_Call));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_machinetalk_2fprotobuf_2fcanon_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Emc_Traj_Set_G5x_descriptor_, &Emc_Traj_Set_G5x::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Emc_Traj_Set_G92_descriptor_, &Emc_Traj_Set_G92::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Emc_Traj_Set_Rotation_descriptor_, &Emc_Traj_Set_Rotation::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Emc_Traj_Linear_Move_descriptor_, &Emc_Traj_Linear_Move::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Emc_Traj_Probe_descriptor_, &Emc_Traj_Probe::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Emc_Traj_Circular_Move_descriptor_, &Emc_Traj_Circular_Move::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Emc_Traj_Rigid_Tap_descriptor_, &Emc_Traj_Rigid_Tap::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Emc_Traj_Set_Term_Cond_descriptor_, &Emc_Traj_Set_Term_Cond::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Emc_Traj_Set_Spindlesync_descriptor_, &Emc_Traj_Set_Spindlesync::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Emc_Traj_Delay_descriptor_, &Emc_Traj_Delay::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Emc_Spindle_On_descriptor_, &Emc_Spindle_On::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Emc_Spindle_Speed_descriptor_, &Emc_Spindle_Speed::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Emc_Spindle_Orient_descriptor_, &Emc_Spindle_Orient::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Emc_Spindle_Wait_Orient_Complete_descriptor_, &Emc_Spindle_Wait_Orient_Complete::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Emc_Tool_Set_Offset_descriptor_, &Emc_Tool_Set_Offset::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Emc_Traj_Set_Offset_descriptor_, &Emc_Traj_Set_Offset::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Emc_Tool_Prepare_descriptor_, &Emc_Tool_Prepare::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Emc_Tool_Set_Number_descriptor_, &Emc_Tool_Set_Number::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Emc_Traj_Set_Fo_Enable_descriptor_, &Emc_Traj_Set_Fo_Enable::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Emc_Traj_Set_So_Enable_descriptor_, &Emc_Traj_Set_So_Enable::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Emc_Traj_Set_Fh_Enable_descriptor_, &Emc_Traj_Set_Fh_Enable::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Emc_Motion_Adaptive_descriptor_, &Emc_Motion_Adaptive::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Emc_Operator_Display_descriptor_, &Emc_Operator_Display::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Emc_Operator_Text_descriptor_, &Emc_Operator_Text::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Emc_Operator_Error_descriptor_, &Emc_Operator_Error::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Emc_Motion_Set_Dout_descriptor_, &Emc_Motion_Set_Dout::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Emc_Motion_Set_Aout_descriptor_, &Emc_Motion_Set_Aout::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Emc_Aux_Input_Wait_descriptor_, &Emc_Aux_Input_Wait::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Emc_Exec_Plugin_Ca1l_descriptor_, &Emc_Exec_Plugin_Ca1l::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Emc_Io_Plugin_Call_descriptor_, &Emc_Io_Plugin_Call::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_machinetalk_2fprotobuf_2fcanon_2eproto() {
  delete Emc_Traj_Set_G5x::default_instance_;
  delete Emc_Traj_Set_G5x_reflection_;
  delete Emc_Traj_Set_G92::default_instance_;
  delete Emc_Traj_Set_G92_reflection_;
  delete Emc_Traj_Set_Rotation::default_instance_;
  delete Emc_Traj_Set_Rotation_reflection_;
  delete Emc_Traj_Linear_Move::default_instance_;
  delete Emc_Traj_Linear_Move_reflection_;
  delete Emc_Traj_Probe::default_instance_;
  delete Emc_Traj_Probe_reflection_;
  delete Emc_Traj_Circular_Move::default_instance_;
  delete Emc_Traj_Circular_Move_reflection_;
  delete Emc_Traj_Rigid_Tap::default_instance_;
  delete Emc_Traj_Rigid_Tap_reflection_;
  delete Emc_Traj_Set_Term_Cond::default_instance_;
  delete Emc_Traj_Set_Term_Cond_reflection_;
  delete Emc_Traj_Set_Spindlesync::default_instance_;
  delete Emc_Traj_Set_Spindlesync_reflection_;
  delete Emc_Traj_Delay::default_instance_;
  delete Emc_Traj_Delay_reflection_;
  delete Emc_Spindle_On::default_instance_;
  delete Emc_Spindle_On_reflection_;
  delete Emc_Spindle_Speed::default_instance_;
  delete Emc_Spindle_Speed_reflection_;
  delete Emc_Spindle_Orient::default_instance_;
  delete Emc_Spindle_Orient_reflection_;
  delete Emc_Spindle_Wait_Orient_Complete::default_instance_;
  delete Emc_Spindle_Wait_Orient_Complete_reflection_;
  delete Emc_Tool_Set_Offset::default_instance_;
  delete Emc_Tool_Set_Offset_reflection_;
  delete Emc_Traj_Set_Offset::default_instance_;
  delete Emc_Traj_Set_Offset_reflection_;
  delete Emc_Tool_Prepare::default_instance_;
  delete Emc_Tool_Prepare_reflection_;
  delete Emc_Tool_Set_Number::default_instance_;
  delete Emc_Tool_Set_Number_reflection_;
  delete Emc_Traj_Set_Fo_Enable::default_instance_;
  delete Emc_Traj_Set_Fo_Enable_reflection_;
  delete Emc_Traj_Set_So_Enable::default_instance_;
  delete Emc_Traj_Set_So_Enable_reflection_;
  delete Emc_Traj_Set_Fh_Enable::default_instance_;
  delete Emc_Traj_Set_Fh_Enable_reflection_;
  delete Emc_Motion_Adaptive::default_instance_;
  delete Emc_Motion_Adaptive_reflection_;
  delete Emc_Operator_Display::default_instance_;
  delete Emc_Operator_Display_reflection_;
  delete Emc_Operator_Text::default_instance_;
  delete Emc_Operator_Text_reflection_;
  delete Emc_Operator_Error::default_instance_;
  delete Emc_Operator_Error_reflection_;
  delete Emc_Motion_Set_Dout::default_instance_;
  delete Emc_Motion_Set_Dout_reflection_;
  delete Emc_Motion_Set_Aout::default_instance_;
  delete Emc_Motion_Set_Aout_reflection_;
  delete Emc_Aux_Input_Wait::default_instance_;
  delete Emc_Aux_Input_Wait_reflection_;
  delete Emc_Exec_Plugin_Ca1l::default_instance_;
  delete Emc_Exec_Plugin_Ca1l_reflection_;
  delete Emc_Io_Plugin_Call::default_instance_;
  delete Emc_Io_Plugin_Call_reflection_;
}

void protobuf_AddDesc_machinetalk_2fprotobuf_2fcanon_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::protobuf_AddDesc_machinetalk_2fprotobuf_2fnanopb_2eproto();
  ::pb::protobuf_AddDesc_machinetalk_2fprotobuf_2ftypes_2eproto();
  ::pb::protobuf_AddDesc_machinetalk_2fprotobuf_2femcclass_2eproto();
  ::pb::protobuf_AddDesc_machinetalk_2fprotobuf_2fmotcmds_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n machinetalk/protobuf/canon.proto\022\002pb\032!"
    "machinetalk/protobuf/nanopb.proto\032 machi"
    "netalk/protobuf/types.proto\032#machinetalk"
    "/protobuf/emcclass.proto\032\"machinetalk/pr"
    "otobuf/motcmds.proto\"Z\n\020Emc_Traj_Set_G5x"
    "\022\033\n\006origin\030\n \002(\0132\013.pb.EmcPose\022\"\n\tg5x_ind"
    "ex\030\024 \002(\0162\017.pb.OriginIndex:\005\222\?\002Hd\"6\n\020Emc_"
    "Traj_Set_G92\022\033\n\006origin\030\n \002(\0132\013.pb.EmcPos"
    "e:\005\222\?\002He\"0\n\025Emc_Traj_Set_Rotation\022\020\n\010rot"
    "ation\030\n \002(\001:\005\222\?\002Hf\"\253\001\n\024Emc_Traj_Linear_M"
    "ove\022\034\n\004type\030\n \002(\0162\016.pb.MotionType\022\030\n\003end"
    "\030\024 \002(\0132\013.pb.EmcPose\022\013\n\003vel\030\036 \002(\001\022\022\n\nini_"
    "maxvel\030( \002(\001\022\013\n\003acc\0302 \002(\001\022\021\n\tfeed_mode\030<"
    " \002(\010\022\023\n\013indexrotary\030F \002(\005:\005\222\?\002Hg\"\221\001\n\016Emc"
    "_Traj_Probe\022\034\n\004type\030\n \002(\0162\016.pb.MotionTyp"
    "e\022\030\n\003pos\030\024 \002(\0132\013.pb.EmcPose\022\013\n\003vel\030\036 \002(\001"
    "\022\022\n\nini_maxvel\030( \002(\001\022\013\n\003acc\0302 \002(\001\022\022\n\npro"
    "be_type\030< \002(\r:\005\222\?\002Hh\"\350\001\n\026Emc_Traj_Circul"
    "ar_Move\022\034\n\004type\030\n \002(\0162\016.pb.MotionType\022\030\n"
    "\003end\030\024 \002(\0132\013.pb.EmcPose\022\037\n\006center\030\031 \002(\0132"
    "\017.pb.PmCartesian\022\037\n\006normal\030\033 \002(\0132\017.pb.Pm"
    "Cartesian\022\013\n\003vel\030\036 \002(\001\022\022\n\nini_maxvel\030( \002"
    "(\001\022\013\n\003acc\0302 \002(\001\022\021\n\tfeed_mode\030< \002(\010\022\014\n\004tu"
    "rn\030F \002(\005:\005\222\?\002Hi\"c\n\022Emc_Traj_Rigid_Tap\022\030\n"
    "\003pos\030\024 \002(\0132\013.pb.EmcPose\022\013\n\003vel\030\036 \002(\001\022\022\n\n"
    "ini_maxvel\030( \002(\001\022\013\n\003acc\0302 \002(\001:\005\222\?\002Hj\"W\n\026"
    "Emc_Traj_Set_Term_Cond\022#\n\004cond\030\n \002(\0162\025.p"
    "b.TermConditionType\022\021\n\ttolerance\030\024 \002(\001:\005"
    "\222\?\002Hk\"U\n\030Emc_Traj_Set_Spindlesync\022\033\n\023fee"
    "d_per_revolution\030\n \002(\001\022\025\n\rvelocity_mode\030"
    "\024 \002(\010:\005\222\?\002Hl\"&\n\016Emc_Traj_Delay\022\r\n\005delay\030"
    "\n \002(\001:\005\222\?\002Hm\"P\n\016Emc_Spindle_On\022\020\n\005speed\030"
    "\n \002(\001:\0010\022\021\n\006factor\030\024 \002(\001:\0010\022\022\n\007xoffset\030\036"
    " \002(\001:\0010:\005\222\?\002Hn\"J\n\021Emc_Spindle_Speed\022\r\n\005s"
    "peed\030\n \002(\001\022\016\n\006factor\030\024 \002(\001\022\017\n\007xoffset\030\036 "
    "\002(\001:\005\222\?\002Ho\"R\n\022Emc_Spindle_Orient\022\023\n\013orie"
    "ntation\030\n \002(\001\022 \n\004mode\030\024 \002(\0162\022.pb.CanonDi"
    "rection:\005\222\?\002Hp\":\n Emc_Spindle_Wait_Orien"
    "t_Complete\022\017\n\007timeout\030\n \002(\001:\005\222\?\002Hq\"\247\001\n\023E"
    "mc_Tool_Set_Offset\022\016\n\006pocket\030\n \002(\005\022\016\n\006to"
    "olno\030\017 \002(\005\022\033\n\006offset\030\024 \002(\0132\013.pb.EmcPose\022"
    "\020\n\010diameter\030\036 \002(\001\022\022\n\nfrontangle\030( \002(\001\022\021\n"
    "\tbackangle\0302 \002(\001\022\023\n\013orientation\030< \002(\005:\005\222"
    "\?\002Hr\"9\n\023Emc_Traj_Set_Offset\022\033\n\006offset\030\n "
    "\002(\0132\013.pb.EmcPose:\005\222\?\002Hs\"7\n\020Emc_Tool_Prep"
    "are\022\016\n\006pocket\030\n \002(\005\022\014\n\004tool\030\024 \002(\005:\005\222\?\002Ht"
    "\"*\n\023Emc_Tool_Set_Number\022\014\n\004tool\030\n \002(\005:\005\222"
    "\?\002Hu\"-\n\026Emc_Traj_Set_Fo_Enable\022\014\n\004mode\030\n"
    " \002(\010:\005\222\?\002Hv\"-\n\026Emc_Traj_Set_So_Enable\022\014\n"
    "\004mode\030\n \002(\010:\005\222\?\002Hw\"-\n\026Emc_Traj_Set_Fh_En"
    "able\022\014\n\004mode\030\n \002(\010:\005\222\?\002Hx\",\n\023Emc_Motion_"
    "Adaptive\022\016\n\006status\030\n \002(\010:\005\222\?\002Hy\":\n\024Emc_O"
    "perator_Display\022\n\n\002id\030\n \002(\005\022\017\n\007display\030\024"
    " \002(\t:\005\222\?\002Hz\"4\n\021Emc_Operator_Text\022\n\n\002id\030\n"
    " \002(\005\022\014\n\004text\030\024 \002(\t:\005\222\?\002H{\"6\n\022Emc_Operato"
    "r_Error\022\n\n\002id\030\n \002(\005\022\r\n\005error\030\024 \002(\t:\005\222\?\002H"
    "|\"T\n\023Emc_Motion_Set_Dout\022\r\n\005index\030\n \002(\r\022"
    "\r\n\005start\030\024 \002(\010\022\013\n\003end\030\036 \002(\010\022\013\n\003now\030( \002(\010"
    ":\005\222\?\002H}\"T\n\023Emc_Motion_Set_Aout\022\r\n\005index\030"
    "\n \002(\r\022\r\n\005start\030\024 \002(\001\022\013\n\003end\030\036 \002(\001\022\013\n\003now"
    "\030( \002(\010:\005\222\?\002H~\"\177\n\022Emc_Aux_Input_Wait\022\r\n\005i"
    "ndex\030\n \002(\r\022!\n\ninput_type\030\024 \002(\0162\r.pb.Inpu"
    "tType\022\037\n\twait_type\030\036 \002(\0162\014.pb.WaitType\022\017"
    "\n\007timeout\030( \002(\001:\005\222\?\002H\177\",\n\024Emc_Exec_Plugi"
    "n_Ca1l\022\014\n\004call\030\024 \002(\014:\006\222\?\003H\200\001\"*\n\022Emc_Io_P"
    "lugin_Call\022\014\n\004call\030\024 \002(\014:\006\222\?\003H\201\001", 2632);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "machinetalk/protobuf/canon.proto", &protobuf_RegisterTypes);
  Emc_Traj_Set_G5x::default_instance_ = new Emc_Traj_Set_G5x();
  Emc_Traj_Set_G92::default_instance_ = new Emc_Traj_Set_G92();
  Emc_Traj_Set_Rotation::default_instance_ = new Emc_Traj_Set_Rotation();
  Emc_Traj_Linear_Move::default_instance_ = new Emc_Traj_Linear_Move();
  Emc_Traj_Probe::default_instance_ = new Emc_Traj_Probe();
  Emc_Traj_Circular_Move::default_instance_ = new Emc_Traj_Circular_Move();
  Emc_Traj_Rigid_Tap::default_instance_ = new Emc_Traj_Rigid_Tap();
  Emc_Traj_Set_Term_Cond::default_instance_ = new Emc_Traj_Set_Term_Cond();
  Emc_Traj_Set_Spindlesync::default_instance_ = new Emc_Traj_Set_Spindlesync();
  Emc_Traj_Delay::default_instance_ = new Emc_Traj_Delay();
  Emc_Spindle_On::default_instance_ = new Emc_Spindle_On();
  Emc_Spindle_Speed::default_instance_ = new Emc_Spindle_Speed();
  Emc_Spindle_Orient::default_instance_ = new Emc_Spindle_Orient();
  Emc_Spindle_Wait_Orient_Complete::default_instance_ = new Emc_Spindle_Wait_Orient_Complete();
  Emc_Tool_Set_Offset::default_instance_ = new Emc_Tool_Set_Offset();
  Emc_Traj_Set_Offset::default_instance_ = new Emc_Traj_Set_Offset();
  Emc_Tool_Prepare::default_instance_ = new Emc_Tool_Prepare();
  Emc_Tool_Set_Number::default_instance_ = new Emc_Tool_Set_Number();
  Emc_Traj_Set_Fo_Enable::default_instance_ = new Emc_Traj_Set_Fo_Enable();
  Emc_Traj_Set_So_Enable::default_instance_ = new Emc_Traj_Set_So_Enable();
  Emc_Traj_Set_Fh_Enable::default_instance_ = new Emc_Traj_Set_Fh_Enable();
  Emc_Motion_Adaptive::default_instance_ = new Emc_Motion_Adaptive();
  Emc_Operator_Display::default_instance_ = new Emc_Operator_Display();
  Emc_Operator_Text::default_instance_ = new Emc_Operator_Text();
  Emc_Operator_Error::default_instance_ = new Emc_Operator_Error();
  Emc_Motion_Set_Dout::default_instance_ = new Emc_Motion_Set_Dout();
  Emc_Motion_Set_Aout::default_instance_ = new Emc_Motion_Set_Aout();
  Emc_Aux_Input_Wait::default_instance_ = new Emc_Aux_Input_Wait();
  Emc_Exec_Plugin_Ca1l::default_instance_ = new Emc_Exec_Plugin_Ca1l();
  Emc_Io_Plugin_Call::default_instance_ = new Emc_Io_Plugin_Call();
  Emc_Traj_Set_G5x::default_instance_->InitAsDefaultInstance();
  Emc_Traj_Set_G92::default_instance_->InitAsDefaultInstance();
  Emc_Traj_Set_Rotation::default_instance_->InitAsDefaultInstance();
  Emc_Traj_Linear_Move::default_instance_->InitAsDefaultInstance();
  Emc_Traj_Probe::default_instance_->InitAsDefaultInstance();
  Emc_Traj_Circular_Move::default_instance_->InitAsDefaultInstance();
  Emc_Traj_Rigid_Tap::default_instance_->InitAsDefaultInstance();
  Emc_Traj_Set_Term_Cond::default_instance_->InitAsDefaultInstance();
  Emc_Traj_Set_Spindlesync::default_instance_->InitAsDefaultInstance();
  Emc_Traj_Delay::default_instance_->InitAsDefaultInstance();
  Emc_Spindle_On::default_instance_->InitAsDefaultInstance();
  Emc_Spindle_Speed::default_instance_->InitAsDefaultInstance();
  Emc_Spindle_Orient::default_instance_->InitAsDefaultInstance();
  Emc_Spindle_Wait_Orient_Complete::default_instance_->InitAsDefaultInstance();
  Emc_Tool_Set_Offset::default_instance_->InitAsDefaultInstance();
  Emc_Traj_Set_Offset::default_instance_->InitAsDefaultInstance();
  Emc_Tool_Prepare::default_instance_->InitAsDefaultInstance();
  Emc_Tool_Set_Number::default_instance_->InitAsDefaultInstance();
  Emc_Traj_Set_Fo_Enable::default_instance_->InitAsDefaultInstance();
  Emc_Traj_Set_So_Enable::default_instance_->InitAsDefaultInstance();
  Emc_Traj_Set_Fh_Enable::default_instance_->InitAsDefaultInstance();
  Emc_Motion_Adaptive::default_instance_->InitAsDefaultInstance();
  Emc_Operator_Display::default_instance_->InitAsDefaultInstance();
  Emc_Operator_Text::default_instance_->InitAsDefaultInstance();
  Emc_Operator_Error::default_instance_->InitAsDefaultInstance();
  Emc_Motion_Set_Dout::default_instance_->InitAsDefaultInstance();
  Emc_Motion_Set_Aout::default_instance_->InitAsDefaultInstance();
  Emc_Aux_Input_Wait::default_instance_->InitAsDefaultInstance();
  Emc_Exec_Plugin_Ca1l::default_instance_->InitAsDefaultInstance();
  Emc_Io_Plugin_Call::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_machinetalk_2fprotobuf_2fcanon_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_machinetalk_2fprotobuf_2fcanon_2eproto {
  StaticDescriptorInitializer_machinetalk_2fprotobuf_2fcanon_2eproto() {
    protobuf_AddDesc_machinetalk_2fprotobuf_2fcanon_2eproto();
  }
} static_descriptor_initializer_machinetalk_2fprotobuf_2fcanon_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int Emc_Traj_Set_G5x::kOriginFieldNumber;
const int Emc_Traj_Set_G5x::kG5XIndexFieldNumber;
#endif  // !_MSC_VER

Emc_Traj_Set_G5x::Emc_Traj_Set_G5x()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.Emc_Traj_Set_G5x)
}

void Emc_Traj_Set_G5x::InitAsDefaultInstance() {
  origin_ = const_cast< ::pb::EmcPose*>(&::pb::EmcPose::default_instance());
}

Emc_Traj_Set_G5x::Emc_Traj_Set_G5x(const Emc_Traj_Set_G5x& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.Emc_Traj_Set_G5x)
}

void Emc_Traj_Set_G5x::SharedCtor() {
  _cached_size_ = 0;
  origin_ = NULL;
  g5x_index_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Emc_Traj_Set_G5x::~Emc_Traj_Set_G5x() {
  // @@protoc_insertion_point(destructor:pb.Emc_Traj_Set_G5x)
  SharedDtor();
}

void Emc_Traj_Set_G5x::SharedDtor() {
  if (this != default_instance_) {
    delete origin_;
  }
}

void Emc_Traj_Set_G5x::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Emc_Traj_Set_G5x::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Emc_Traj_Set_G5x_descriptor_;
}

const Emc_Traj_Set_G5x& Emc_Traj_Set_G5x::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_machinetalk_2fprotobuf_2fcanon_2eproto();
  return *default_instance_;
}

Emc_Traj_Set_G5x* Emc_Traj_Set_G5x::default_instance_ = NULL;

Emc_Traj_Set_G5x* Emc_Traj_Set_G5x::New() const {
  return new Emc_Traj_Set_G5x;
}

void Emc_Traj_Set_G5x::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_origin()) {
      if (origin_ != NULL) origin_->::pb::EmcPose::Clear();
    }
    g5x_index_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Emc_Traj_Set_G5x::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.Emc_Traj_Set_G5x)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .pb.EmcPose origin = 10;
      case 10: {
        if (tag == 82) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_origin()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(160)) goto parse_g5x_index;
        break;
      }

      // required .pb.OriginIndex g5x_index = 20;
      case 20: {
        if (tag == 160) {
         parse_g5x_index:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::pb::OriginIndex_IsValid(value)) {
            set_g5x_index(static_cast< ::pb::OriginIndex >(value));
          } else {
            mutable_unknown_fields()->AddVarint(20, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.Emc_Traj_Set_G5x)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.Emc_Traj_Set_G5x)
  return false;
#undef DO_
}

void Emc_Traj_Set_G5x::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.Emc_Traj_Set_G5x)
  // required .pb.EmcPose origin = 10;
  if (has_origin()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, this->origin(), output);
  }

  // required .pb.OriginIndex g5x_index = 20;
  if (has_g5x_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      20, this->g5x_index(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.Emc_Traj_Set_G5x)
}

::google::protobuf::uint8* Emc_Traj_Set_G5x::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.Emc_Traj_Set_G5x)
  // required .pb.EmcPose origin = 10;
  if (has_origin()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        10, this->origin(), target);
  }

  // required .pb.OriginIndex g5x_index = 20;
  if (has_g5x_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      20, this->g5x_index(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.Emc_Traj_Set_G5x)
  return target;
}

int Emc_Traj_Set_G5x::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .pb.EmcPose origin = 10;
    if (has_origin()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->origin());
    }

    // required .pb.OriginIndex g5x_index = 20;
    if (has_g5x_index()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->g5x_index());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Emc_Traj_Set_G5x::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Emc_Traj_Set_G5x* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Emc_Traj_Set_G5x*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Emc_Traj_Set_G5x::MergeFrom(const Emc_Traj_Set_G5x& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_origin()) {
      mutable_origin()->::pb::EmcPose::MergeFrom(from.origin());
    }
    if (from.has_g5x_index()) {
      set_g5x_index(from.g5x_index());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Emc_Traj_Set_G5x::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Emc_Traj_Set_G5x::CopyFrom(const Emc_Traj_Set_G5x& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Emc_Traj_Set_G5x::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_origin()) {
    if (!this->origin().IsInitialized()) return false;
  }
  return true;
}

void Emc_Traj_Set_G5x::Swap(Emc_Traj_Set_G5x* other) {
  if (other != this) {
    std::swap(origin_, other->origin_);
    std::swap(g5x_index_, other->g5x_index_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Emc_Traj_Set_G5x::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Emc_Traj_Set_G5x_descriptor_;
  metadata.reflection = Emc_Traj_Set_G5x_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Emc_Traj_Set_G92::kOriginFieldNumber;
#endif  // !_MSC_VER

Emc_Traj_Set_G92::Emc_Traj_Set_G92()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.Emc_Traj_Set_G92)
}

void Emc_Traj_Set_G92::InitAsDefaultInstance() {
  origin_ = const_cast< ::pb::EmcPose*>(&::pb::EmcPose::default_instance());
}

Emc_Traj_Set_G92::Emc_Traj_Set_G92(const Emc_Traj_Set_G92& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.Emc_Traj_Set_G92)
}

void Emc_Traj_Set_G92::SharedCtor() {
  _cached_size_ = 0;
  origin_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Emc_Traj_Set_G92::~Emc_Traj_Set_G92() {
  // @@protoc_insertion_point(destructor:pb.Emc_Traj_Set_G92)
  SharedDtor();
}

void Emc_Traj_Set_G92::SharedDtor() {
  if (this != default_instance_) {
    delete origin_;
  }
}

void Emc_Traj_Set_G92::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Emc_Traj_Set_G92::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Emc_Traj_Set_G92_descriptor_;
}

const Emc_Traj_Set_G92& Emc_Traj_Set_G92::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_machinetalk_2fprotobuf_2fcanon_2eproto();
  return *default_instance_;
}

Emc_Traj_Set_G92* Emc_Traj_Set_G92::default_instance_ = NULL;

Emc_Traj_Set_G92* Emc_Traj_Set_G92::New() const {
  return new Emc_Traj_Set_G92;
}

void Emc_Traj_Set_G92::Clear() {
  if (has_origin()) {
    if (origin_ != NULL) origin_->::pb::EmcPose::Clear();
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Emc_Traj_Set_G92::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.Emc_Traj_Set_G92)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .pb.EmcPose origin = 10;
      case 10: {
        if (tag == 82) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_origin()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.Emc_Traj_Set_G92)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.Emc_Traj_Set_G92)
  return false;
#undef DO_
}

void Emc_Traj_Set_G92::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.Emc_Traj_Set_G92)
  // required .pb.EmcPose origin = 10;
  if (has_origin()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, this->origin(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.Emc_Traj_Set_G92)
}

::google::protobuf::uint8* Emc_Traj_Set_G92::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.Emc_Traj_Set_G92)
  // required .pb.EmcPose origin = 10;
  if (has_origin()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        10, this->origin(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.Emc_Traj_Set_G92)
  return target;
}

int Emc_Traj_Set_G92::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .pb.EmcPose origin = 10;
    if (has_origin()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->origin());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Emc_Traj_Set_G92::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Emc_Traj_Set_G92* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Emc_Traj_Set_G92*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Emc_Traj_Set_G92::MergeFrom(const Emc_Traj_Set_G92& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_origin()) {
      mutable_origin()->::pb::EmcPose::MergeFrom(from.origin());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Emc_Traj_Set_G92::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Emc_Traj_Set_G92::CopyFrom(const Emc_Traj_Set_G92& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Emc_Traj_Set_G92::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_origin()) {
    if (!this->origin().IsInitialized()) return false;
  }
  return true;
}

void Emc_Traj_Set_G92::Swap(Emc_Traj_Set_G92* other) {
  if (other != this) {
    std::swap(origin_, other->origin_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Emc_Traj_Set_G92::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Emc_Traj_Set_G92_descriptor_;
  metadata.reflection = Emc_Traj_Set_G92_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Emc_Traj_Set_Rotation::kRotationFieldNumber;
#endif  // !_MSC_VER

Emc_Traj_Set_Rotation::Emc_Traj_Set_Rotation()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.Emc_Traj_Set_Rotation)
}

void Emc_Traj_Set_Rotation::InitAsDefaultInstance() {
}

Emc_Traj_Set_Rotation::Emc_Traj_Set_Rotation(const Emc_Traj_Set_Rotation& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.Emc_Traj_Set_Rotation)
}

void Emc_Traj_Set_Rotation::SharedCtor() {
  _cached_size_ = 0;
  rotation_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Emc_Traj_Set_Rotation::~Emc_Traj_Set_Rotation() {
  // @@protoc_insertion_point(destructor:pb.Emc_Traj_Set_Rotation)
  SharedDtor();
}

void Emc_Traj_Set_Rotation::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Emc_Traj_Set_Rotation::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Emc_Traj_Set_Rotation::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Emc_Traj_Set_Rotation_descriptor_;
}

const Emc_Traj_Set_Rotation& Emc_Traj_Set_Rotation::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_machinetalk_2fprotobuf_2fcanon_2eproto();
  return *default_instance_;
}

Emc_Traj_Set_Rotation* Emc_Traj_Set_Rotation::default_instance_ = NULL;

Emc_Traj_Set_Rotation* Emc_Traj_Set_Rotation::New() const {
  return new Emc_Traj_Set_Rotation;
}

void Emc_Traj_Set_Rotation::Clear() {
  rotation_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Emc_Traj_Set_Rotation::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.Emc_Traj_Set_Rotation)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required double rotation = 10;
      case 10: {
        if (tag == 81) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &rotation_)));
          set_has_rotation();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.Emc_Traj_Set_Rotation)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.Emc_Traj_Set_Rotation)
  return false;
#undef DO_
}

void Emc_Traj_Set_Rotation::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.Emc_Traj_Set_Rotation)
  // required double rotation = 10;
  if (has_rotation()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(10, this->rotation(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.Emc_Traj_Set_Rotation)
}

::google::protobuf::uint8* Emc_Traj_Set_Rotation::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.Emc_Traj_Set_Rotation)
  // required double rotation = 10;
  if (has_rotation()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(10, this->rotation(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.Emc_Traj_Set_Rotation)
  return target;
}

int Emc_Traj_Set_Rotation::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required double rotation = 10;
    if (has_rotation()) {
      total_size += 1 + 8;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Emc_Traj_Set_Rotation::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Emc_Traj_Set_Rotation* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Emc_Traj_Set_Rotation*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Emc_Traj_Set_Rotation::MergeFrom(const Emc_Traj_Set_Rotation& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_rotation()) {
      set_rotation(from.rotation());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Emc_Traj_Set_Rotation::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Emc_Traj_Set_Rotation::CopyFrom(const Emc_Traj_Set_Rotation& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Emc_Traj_Set_Rotation::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void Emc_Traj_Set_Rotation::Swap(Emc_Traj_Set_Rotation* other) {
  if (other != this) {
    std::swap(rotation_, other->rotation_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Emc_Traj_Set_Rotation::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Emc_Traj_Set_Rotation_descriptor_;
  metadata.reflection = Emc_Traj_Set_Rotation_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Emc_Traj_Linear_Move::kTypeFieldNumber;
const int Emc_Traj_Linear_Move::kEndFieldNumber;
const int Emc_Traj_Linear_Move::kVelFieldNumber;
const int Emc_Traj_Linear_Move::kIniMaxvelFieldNumber;
const int Emc_Traj_Linear_Move::kAccFieldNumber;
const int Emc_Traj_Linear_Move::kFeedModeFieldNumber;
const int Emc_Traj_Linear_Move::kIndexrotaryFieldNumber;
#endif  // !_MSC_VER

Emc_Traj_Linear_Move::Emc_Traj_Linear_Move()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.Emc_Traj_Linear_Move)
}

void Emc_Traj_Linear_Move::InitAsDefaultInstance() {
  end_ = const_cast< ::pb::EmcPose*>(&::pb::EmcPose::default_instance());
}

Emc_Traj_Linear_Move::Emc_Traj_Linear_Move(const Emc_Traj_Linear_Move& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.Emc_Traj_Linear_Move)
}

void Emc_Traj_Linear_Move::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0;
  end_ = NULL;
  vel_ = 0;
  ini_maxvel_ = 0;
  acc_ = 0;
  feed_mode_ = false;
  indexrotary_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Emc_Traj_Linear_Move::~Emc_Traj_Linear_Move() {
  // @@protoc_insertion_point(destructor:pb.Emc_Traj_Linear_Move)
  SharedDtor();
}

void Emc_Traj_Linear_Move::SharedDtor() {
  if (this != default_instance_) {
    delete end_;
  }
}

void Emc_Traj_Linear_Move::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Emc_Traj_Linear_Move::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Emc_Traj_Linear_Move_descriptor_;
}

const Emc_Traj_Linear_Move& Emc_Traj_Linear_Move::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_machinetalk_2fprotobuf_2fcanon_2eproto();
  return *default_instance_;
}

Emc_Traj_Linear_Move* Emc_Traj_Linear_Move::default_instance_ = NULL;

Emc_Traj_Linear_Move* Emc_Traj_Linear_Move::New() const {
  return new Emc_Traj_Linear_Move;
}

void Emc_Traj_Linear_Move::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<Emc_Traj_Linear_Move*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 127) {
    ZR_(vel_, indexrotary_);
    if (has_end()) {
      if (end_ != NULL) end_->::pb::EmcPose::Clear();
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Emc_Traj_Linear_Move::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.Emc_Traj_Linear_Move)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .pb.MotionType type = 10;
      case 10: {
        if (tag == 80) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::pb::MotionType_IsValid(value)) {
            set_type(static_cast< ::pb::MotionType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(10, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(162)) goto parse_end;
        break;
      }

      // required .pb.EmcPose end = 20;
      case 20: {
        if (tag == 162) {
         parse_end:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_end()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(241)) goto parse_vel;
        break;
      }

      // required double vel = 30;
      case 30: {
        if (tag == 241) {
         parse_vel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &vel_)));
          set_has_vel();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(321)) goto parse_ini_maxvel;
        break;
      }

      // required double ini_maxvel = 40;
      case 40: {
        if (tag == 321) {
         parse_ini_maxvel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &ini_maxvel_)));
          set_has_ini_maxvel();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(401)) goto parse_acc;
        break;
      }

      // required double acc = 50;
      case 50: {
        if (tag == 401) {
         parse_acc:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &acc_)));
          set_has_acc();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(480)) goto parse_feed_mode;
        break;
      }

      // required bool feed_mode = 60;
      case 60: {
        if (tag == 480) {
         parse_feed_mode:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &feed_mode_)));
          set_has_feed_mode();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(560)) goto parse_indexrotary;
        break;
      }

      // required int32 indexrotary = 70;
      case 70: {
        if (tag == 560) {
         parse_indexrotary:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &indexrotary_)));
          set_has_indexrotary();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.Emc_Traj_Linear_Move)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.Emc_Traj_Linear_Move)
  return false;
#undef DO_
}

void Emc_Traj_Linear_Move::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.Emc_Traj_Linear_Move)
  // required .pb.MotionType type = 10;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      10, this->type(), output);
  }

  // required .pb.EmcPose end = 20;
  if (has_end()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      20, this->end(), output);
  }

  // required double vel = 30;
  if (has_vel()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(30, this->vel(), output);
  }

  // required double ini_maxvel = 40;
  if (has_ini_maxvel()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(40, this->ini_maxvel(), output);
  }

  // required double acc = 50;
  if (has_acc()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(50, this->acc(), output);
  }

  // required bool feed_mode = 60;
  if (has_feed_mode()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(60, this->feed_mode(), output);
  }

  // required int32 indexrotary = 70;
  if (has_indexrotary()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(70, this->indexrotary(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.Emc_Traj_Linear_Move)
}

::google::protobuf::uint8* Emc_Traj_Linear_Move::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.Emc_Traj_Linear_Move)
  // required .pb.MotionType type = 10;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      10, this->type(), target);
  }

  // required .pb.EmcPose end = 20;
  if (has_end()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        20, this->end(), target);
  }

  // required double vel = 30;
  if (has_vel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(30, this->vel(), target);
  }

  // required double ini_maxvel = 40;
  if (has_ini_maxvel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(40, this->ini_maxvel(), target);
  }

  // required double acc = 50;
  if (has_acc()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(50, this->acc(), target);
  }

  // required bool feed_mode = 60;
  if (has_feed_mode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(60, this->feed_mode(), target);
  }

  // required int32 indexrotary = 70;
  if (has_indexrotary()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(70, this->indexrotary(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.Emc_Traj_Linear_Move)
  return target;
}

int Emc_Traj_Linear_Move::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .pb.MotionType type = 10;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // required .pb.EmcPose end = 20;
    if (has_end()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->end());
    }

    // required double vel = 30;
    if (has_vel()) {
      total_size += 2 + 8;
    }

    // required double ini_maxvel = 40;
    if (has_ini_maxvel()) {
      total_size += 2 + 8;
    }

    // required double acc = 50;
    if (has_acc()) {
      total_size += 2 + 8;
    }

    // required bool feed_mode = 60;
    if (has_feed_mode()) {
      total_size += 2 + 1;
    }

    // required int32 indexrotary = 70;
    if (has_indexrotary()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->indexrotary());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Emc_Traj_Linear_Move::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Emc_Traj_Linear_Move* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Emc_Traj_Linear_Move*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Emc_Traj_Linear_Move::MergeFrom(const Emc_Traj_Linear_Move& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_end()) {
      mutable_end()->::pb::EmcPose::MergeFrom(from.end());
    }
    if (from.has_vel()) {
      set_vel(from.vel());
    }
    if (from.has_ini_maxvel()) {
      set_ini_maxvel(from.ini_maxvel());
    }
    if (from.has_acc()) {
      set_acc(from.acc());
    }
    if (from.has_feed_mode()) {
      set_feed_mode(from.feed_mode());
    }
    if (from.has_indexrotary()) {
      set_indexrotary(from.indexrotary());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Emc_Traj_Linear_Move::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Emc_Traj_Linear_Move::CopyFrom(const Emc_Traj_Linear_Move& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Emc_Traj_Linear_Move::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000007f) != 0x0000007f) return false;

  if (has_end()) {
    if (!this->end().IsInitialized()) return false;
  }
  return true;
}

void Emc_Traj_Linear_Move::Swap(Emc_Traj_Linear_Move* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(end_, other->end_);
    std::swap(vel_, other->vel_);
    std::swap(ini_maxvel_, other->ini_maxvel_);
    std::swap(acc_, other->acc_);
    std::swap(feed_mode_, other->feed_mode_);
    std::swap(indexrotary_, other->indexrotary_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Emc_Traj_Linear_Move::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Emc_Traj_Linear_Move_descriptor_;
  metadata.reflection = Emc_Traj_Linear_Move_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Emc_Traj_Probe::kTypeFieldNumber;
const int Emc_Traj_Probe::kPosFieldNumber;
const int Emc_Traj_Probe::kVelFieldNumber;
const int Emc_Traj_Probe::kIniMaxvelFieldNumber;
const int Emc_Traj_Probe::kAccFieldNumber;
const int Emc_Traj_Probe::kProbeTypeFieldNumber;
#endif  // !_MSC_VER

Emc_Traj_Probe::Emc_Traj_Probe()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.Emc_Traj_Probe)
}

void Emc_Traj_Probe::InitAsDefaultInstance() {
  pos_ = const_cast< ::pb::EmcPose*>(&::pb::EmcPose::default_instance());
}

Emc_Traj_Probe::Emc_Traj_Probe(const Emc_Traj_Probe& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.Emc_Traj_Probe)
}

void Emc_Traj_Probe::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0;
  pos_ = NULL;
  vel_ = 0;
  ini_maxvel_ = 0;
  acc_ = 0;
  probe_type_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Emc_Traj_Probe::~Emc_Traj_Probe() {
  // @@protoc_insertion_point(destructor:pb.Emc_Traj_Probe)
  SharedDtor();
}

void Emc_Traj_Probe::SharedDtor() {
  if (this != default_instance_) {
    delete pos_;
  }
}

void Emc_Traj_Probe::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Emc_Traj_Probe::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Emc_Traj_Probe_descriptor_;
}

const Emc_Traj_Probe& Emc_Traj_Probe::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_machinetalk_2fprotobuf_2fcanon_2eproto();
  return *default_instance_;
}

Emc_Traj_Probe* Emc_Traj_Probe::default_instance_ = NULL;

Emc_Traj_Probe* Emc_Traj_Probe::New() const {
  return new Emc_Traj_Probe;
}

void Emc_Traj_Probe::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<Emc_Traj_Probe*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 63) {
    ZR_(vel_, acc_);
    if (has_pos()) {
      if (pos_ != NULL) pos_->::pb::EmcPose::Clear();
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Emc_Traj_Probe::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.Emc_Traj_Probe)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .pb.MotionType type = 10;
      case 10: {
        if (tag == 80) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::pb::MotionType_IsValid(value)) {
            set_type(static_cast< ::pb::MotionType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(10, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(162)) goto parse_pos;
        break;
      }

      // required .pb.EmcPose pos = 20;
      case 20: {
        if (tag == 162) {
         parse_pos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_pos()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(241)) goto parse_vel;
        break;
      }

      // required double vel = 30;
      case 30: {
        if (tag == 241) {
         parse_vel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &vel_)));
          set_has_vel();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(321)) goto parse_ini_maxvel;
        break;
      }

      // required double ini_maxvel = 40;
      case 40: {
        if (tag == 321) {
         parse_ini_maxvel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &ini_maxvel_)));
          set_has_ini_maxvel();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(401)) goto parse_acc;
        break;
      }

      // required double acc = 50;
      case 50: {
        if (tag == 401) {
         parse_acc:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &acc_)));
          set_has_acc();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(480)) goto parse_probe_type;
        break;
      }

      // required uint32 probe_type = 60;
      case 60: {
        if (tag == 480) {
         parse_probe_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &probe_type_)));
          set_has_probe_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.Emc_Traj_Probe)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.Emc_Traj_Probe)
  return false;
#undef DO_
}

void Emc_Traj_Probe::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.Emc_Traj_Probe)
  // required .pb.MotionType type = 10;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      10, this->type(), output);
  }

  // required .pb.EmcPose pos = 20;
  if (has_pos()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      20, this->pos(), output);
  }

  // required double vel = 30;
  if (has_vel()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(30, this->vel(), output);
  }

  // required double ini_maxvel = 40;
  if (has_ini_maxvel()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(40, this->ini_maxvel(), output);
  }

  // required double acc = 50;
  if (has_acc()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(50, this->acc(), output);
  }

  // required uint32 probe_type = 60;
  if (has_probe_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(60, this->probe_type(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.Emc_Traj_Probe)
}

::google::protobuf::uint8* Emc_Traj_Probe::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.Emc_Traj_Probe)
  // required .pb.MotionType type = 10;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      10, this->type(), target);
  }

  // required .pb.EmcPose pos = 20;
  if (has_pos()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        20, this->pos(), target);
  }

  // required double vel = 30;
  if (has_vel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(30, this->vel(), target);
  }

  // required double ini_maxvel = 40;
  if (has_ini_maxvel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(40, this->ini_maxvel(), target);
  }

  // required double acc = 50;
  if (has_acc()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(50, this->acc(), target);
  }

  // required uint32 probe_type = 60;
  if (has_probe_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(60, this->probe_type(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.Emc_Traj_Probe)
  return target;
}

int Emc_Traj_Probe::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .pb.MotionType type = 10;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // required .pb.EmcPose pos = 20;
    if (has_pos()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->pos());
    }

    // required double vel = 30;
    if (has_vel()) {
      total_size += 2 + 8;
    }

    // required double ini_maxvel = 40;
    if (has_ini_maxvel()) {
      total_size += 2 + 8;
    }

    // required double acc = 50;
    if (has_acc()) {
      total_size += 2 + 8;
    }

    // required uint32 probe_type = 60;
    if (has_probe_type()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->probe_type());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Emc_Traj_Probe::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Emc_Traj_Probe* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Emc_Traj_Probe*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Emc_Traj_Probe::MergeFrom(const Emc_Traj_Probe& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_pos()) {
      mutable_pos()->::pb::EmcPose::MergeFrom(from.pos());
    }
    if (from.has_vel()) {
      set_vel(from.vel());
    }
    if (from.has_ini_maxvel()) {
      set_ini_maxvel(from.ini_maxvel());
    }
    if (from.has_acc()) {
      set_acc(from.acc());
    }
    if (from.has_probe_type()) {
      set_probe_type(from.probe_type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Emc_Traj_Probe::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Emc_Traj_Probe::CopyFrom(const Emc_Traj_Probe& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Emc_Traj_Probe::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000003f) != 0x0000003f) return false;

  if (has_pos()) {
    if (!this->pos().IsInitialized()) return false;
  }
  return true;
}

void Emc_Traj_Probe::Swap(Emc_Traj_Probe* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(pos_, other->pos_);
    std::swap(vel_, other->vel_);
    std::swap(ini_maxvel_, other->ini_maxvel_);
    std::swap(acc_, other->acc_);
    std::swap(probe_type_, other->probe_type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Emc_Traj_Probe::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Emc_Traj_Probe_descriptor_;
  metadata.reflection = Emc_Traj_Probe_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Emc_Traj_Circular_Move::kTypeFieldNumber;
const int Emc_Traj_Circular_Move::kEndFieldNumber;
const int Emc_Traj_Circular_Move::kCenterFieldNumber;
const int Emc_Traj_Circular_Move::kNormalFieldNumber;
const int Emc_Traj_Circular_Move::kVelFieldNumber;
const int Emc_Traj_Circular_Move::kIniMaxvelFieldNumber;
const int Emc_Traj_Circular_Move::kAccFieldNumber;
const int Emc_Traj_Circular_Move::kFeedModeFieldNumber;
const int Emc_Traj_Circular_Move::kTurnFieldNumber;
#endif  // !_MSC_VER

Emc_Traj_Circular_Move::Emc_Traj_Circular_Move()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.Emc_Traj_Circular_Move)
}

void Emc_Traj_Circular_Move::InitAsDefaultInstance() {
  end_ = const_cast< ::pb::EmcPose*>(&::pb::EmcPose::default_instance());
  center_ = const_cast< ::pb::PmCartesian*>(&::pb::PmCartesian::default_instance());
  normal_ = const_cast< ::pb::PmCartesian*>(&::pb::PmCartesian::default_instance());
}

Emc_Traj_Circular_Move::Emc_Traj_Circular_Move(const Emc_Traj_Circular_Move& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.Emc_Traj_Circular_Move)
}

void Emc_Traj_Circular_Move::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0;
  end_ = NULL;
  center_ = NULL;
  normal_ = NULL;
  vel_ = 0;
  ini_maxvel_ = 0;
  acc_ = 0;
  feed_mode_ = false;
  turn_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Emc_Traj_Circular_Move::~Emc_Traj_Circular_Move() {
  // @@protoc_insertion_point(destructor:pb.Emc_Traj_Circular_Move)
  SharedDtor();
}

void Emc_Traj_Circular_Move::SharedDtor() {
  if (this != default_instance_) {
    delete end_;
    delete center_;
    delete normal_;
  }
}

void Emc_Traj_Circular_Move::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Emc_Traj_Circular_Move::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Emc_Traj_Circular_Move_descriptor_;
}

const Emc_Traj_Circular_Move& Emc_Traj_Circular_Move::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_machinetalk_2fprotobuf_2fcanon_2eproto();
  return *default_instance_;
}

Emc_Traj_Circular_Move* Emc_Traj_Circular_Move::default_instance_ = NULL;

Emc_Traj_Circular_Move* Emc_Traj_Circular_Move::New() const {
  return new Emc_Traj_Circular_Move;
}

void Emc_Traj_Circular_Move::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<Emc_Traj_Circular_Move*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(type_, acc_);
    if (has_end()) {
      if (end_ != NULL) end_->::pb::EmcPose::Clear();
    }
    if (has_center()) {
      if (center_ != NULL) center_->::pb::PmCartesian::Clear();
    }
    if (has_normal()) {
      if (normal_ != NULL) normal_->::pb::PmCartesian::Clear();
    }
  }
  turn_ = 0;

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Emc_Traj_Circular_Move::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.Emc_Traj_Circular_Move)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .pb.MotionType type = 10;
      case 10: {
        if (tag == 80) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::pb::MotionType_IsValid(value)) {
            set_type(static_cast< ::pb::MotionType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(10, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(162)) goto parse_end;
        break;
      }

      // required .pb.EmcPose end = 20;
      case 20: {
        if (tag == 162) {
         parse_end:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_end()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(202)) goto parse_center;
        break;
      }

      // required .pb.PmCartesian center = 25;
      case 25: {
        if (tag == 202) {
         parse_center:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_center()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(218)) goto parse_normal;
        break;
      }

      // required .pb.PmCartesian normal = 27;
      case 27: {
        if (tag == 218) {
         parse_normal:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_normal()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(241)) goto parse_vel;
        break;
      }

      // required double vel = 30;
      case 30: {
        if (tag == 241) {
         parse_vel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &vel_)));
          set_has_vel();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(321)) goto parse_ini_maxvel;
        break;
      }

      // required double ini_maxvel = 40;
      case 40: {
        if (tag == 321) {
         parse_ini_maxvel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &ini_maxvel_)));
          set_has_ini_maxvel();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(401)) goto parse_acc;
        break;
      }

      // required double acc = 50;
      case 50: {
        if (tag == 401) {
         parse_acc:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &acc_)));
          set_has_acc();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(480)) goto parse_feed_mode;
        break;
      }

      // required bool feed_mode = 60;
      case 60: {
        if (tag == 480) {
         parse_feed_mode:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &feed_mode_)));
          set_has_feed_mode();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(560)) goto parse_turn;
        break;
      }

      // required int32 turn = 70;
      case 70: {
        if (tag == 560) {
         parse_turn:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &turn_)));
          set_has_turn();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.Emc_Traj_Circular_Move)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.Emc_Traj_Circular_Move)
  return false;
#undef DO_
}

void Emc_Traj_Circular_Move::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.Emc_Traj_Circular_Move)
  // required .pb.MotionType type = 10;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      10, this->type(), output);
  }

  // required .pb.EmcPose end = 20;
  if (has_end()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      20, this->end(), output);
  }

  // required .pb.PmCartesian center = 25;
  if (has_center()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      25, this->center(), output);
  }

  // required .pb.PmCartesian normal = 27;
  if (has_normal()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      27, this->normal(), output);
  }

  // required double vel = 30;
  if (has_vel()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(30, this->vel(), output);
  }

  // required double ini_maxvel = 40;
  if (has_ini_maxvel()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(40, this->ini_maxvel(), output);
  }

  // required double acc = 50;
  if (has_acc()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(50, this->acc(), output);
  }

  // required bool feed_mode = 60;
  if (has_feed_mode()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(60, this->feed_mode(), output);
  }

  // required int32 turn = 70;
  if (has_turn()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(70, this->turn(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.Emc_Traj_Circular_Move)
}

::google::protobuf::uint8* Emc_Traj_Circular_Move::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.Emc_Traj_Circular_Move)
  // required .pb.MotionType type = 10;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      10, this->type(), target);
  }

  // required .pb.EmcPose end = 20;
  if (has_end()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        20, this->end(), target);
  }

  // required .pb.PmCartesian center = 25;
  if (has_center()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        25, this->center(), target);
  }

  // required .pb.PmCartesian normal = 27;
  if (has_normal()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        27, this->normal(), target);
  }

  // required double vel = 30;
  if (has_vel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(30, this->vel(), target);
  }

  // required double ini_maxvel = 40;
  if (has_ini_maxvel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(40, this->ini_maxvel(), target);
  }

  // required double acc = 50;
  if (has_acc()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(50, this->acc(), target);
  }

  // required bool feed_mode = 60;
  if (has_feed_mode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(60, this->feed_mode(), target);
  }

  // required int32 turn = 70;
  if (has_turn()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(70, this->turn(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.Emc_Traj_Circular_Move)
  return target;
}

int Emc_Traj_Circular_Move::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .pb.MotionType type = 10;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // required .pb.EmcPose end = 20;
    if (has_end()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->end());
    }

    // required .pb.PmCartesian center = 25;
    if (has_center()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->center());
    }

    // required .pb.PmCartesian normal = 27;
    if (has_normal()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->normal());
    }

    // required double vel = 30;
    if (has_vel()) {
      total_size += 2 + 8;
    }

    // required double ini_maxvel = 40;
    if (has_ini_maxvel()) {
      total_size += 2 + 8;
    }

    // required double acc = 50;
    if (has_acc()) {
      total_size += 2 + 8;
    }

    // required bool feed_mode = 60;
    if (has_feed_mode()) {
      total_size += 2 + 1;
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // required int32 turn = 70;
    if (has_turn()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->turn());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Emc_Traj_Circular_Move::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Emc_Traj_Circular_Move* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Emc_Traj_Circular_Move*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Emc_Traj_Circular_Move::MergeFrom(const Emc_Traj_Circular_Move& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_end()) {
      mutable_end()->::pb::EmcPose::MergeFrom(from.end());
    }
    if (from.has_center()) {
      mutable_center()->::pb::PmCartesian::MergeFrom(from.center());
    }
    if (from.has_normal()) {
      mutable_normal()->::pb::PmCartesian::MergeFrom(from.normal());
    }
    if (from.has_vel()) {
      set_vel(from.vel());
    }
    if (from.has_ini_maxvel()) {
      set_ini_maxvel(from.ini_maxvel());
    }
    if (from.has_acc()) {
      set_acc(from.acc());
    }
    if (from.has_feed_mode()) {
      set_feed_mode(from.feed_mode());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_turn()) {
      set_turn(from.turn());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Emc_Traj_Circular_Move::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Emc_Traj_Circular_Move::CopyFrom(const Emc_Traj_Circular_Move& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Emc_Traj_Circular_Move::IsInitialized() const {
  if ((_has_bits_[0] & 0x000001ff) != 0x000001ff) return false;

  if (has_end()) {
    if (!this->end().IsInitialized()) return false;
  }
  return true;
}

void Emc_Traj_Circular_Move::Swap(Emc_Traj_Circular_Move* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(end_, other->end_);
    std::swap(center_, other->center_);
    std::swap(normal_, other->normal_);
    std::swap(vel_, other->vel_);
    std::swap(ini_maxvel_, other->ini_maxvel_);
    std::swap(acc_, other->acc_);
    std::swap(feed_mode_, other->feed_mode_);
    std::swap(turn_, other->turn_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Emc_Traj_Circular_Move::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Emc_Traj_Circular_Move_descriptor_;
  metadata.reflection = Emc_Traj_Circular_Move_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Emc_Traj_Rigid_Tap::kPosFieldNumber;
const int Emc_Traj_Rigid_Tap::kVelFieldNumber;
const int Emc_Traj_Rigid_Tap::kIniMaxvelFieldNumber;
const int Emc_Traj_Rigid_Tap::kAccFieldNumber;
#endif  // !_MSC_VER

Emc_Traj_Rigid_Tap::Emc_Traj_Rigid_Tap()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.Emc_Traj_Rigid_Tap)
}

void Emc_Traj_Rigid_Tap::InitAsDefaultInstance() {
  pos_ = const_cast< ::pb::EmcPose*>(&::pb::EmcPose::default_instance());
}

Emc_Traj_Rigid_Tap::Emc_Traj_Rigid_Tap(const Emc_Traj_Rigid_Tap& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.Emc_Traj_Rigid_Tap)
}

void Emc_Traj_Rigid_Tap::SharedCtor() {
  _cached_size_ = 0;
  pos_ = NULL;
  vel_ = 0;
  ini_maxvel_ = 0;
  acc_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Emc_Traj_Rigid_Tap::~Emc_Traj_Rigid_Tap() {
  // @@protoc_insertion_point(destructor:pb.Emc_Traj_Rigid_Tap)
  SharedDtor();
}

void Emc_Traj_Rigid_Tap::SharedDtor() {
  if (this != default_instance_) {
    delete pos_;
  }
}

void Emc_Traj_Rigid_Tap::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Emc_Traj_Rigid_Tap::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Emc_Traj_Rigid_Tap_descriptor_;
}

const Emc_Traj_Rigid_Tap& Emc_Traj_Rigid_Tap::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_machinetalk_2fprotobuf_2fcanon_2eproto();
  return *default_instance_;
}

Emc_Traj_Rigid_Tap* Emc_Traj_Rigid_Tap::default_instance_ = NULL;

Emc_Traj_Rigid_Tap* Emc_Traj_Rigid_Tap::New() const {
  return new Emc_Traj_Rigid_Tap;
}

void Emc_Traj_Rigid_Tap::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<Emc_Traj_Rigid_Tap*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 15) {
    ZR_(vel_, acc_);
    if (has_pos()) {
      if (pos_ != NULL) pos_->::pb::EmcPose::Clear();
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Emc_Traj_Rigid_Tap::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.Emc_Traj_Rigid_Tap)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .pb.EmcPose pos = 20;
      case 20: {
        if (tag == 162) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_pos()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(241)) goto parse_vel;
        break;
      }

      // required double vel = 30;
      case 30: {
        if (tag == 241) {
         parse_vel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &vel_)));
          set_has_vel();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(321)) goto parse_ini_maxvel;
        break;
      }

      // required double ini_maxvel = 40;
      case 40: {
        if (tag == 321) {
         parse_ini_maxvel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &ini_maxvel_)));
          set_has_ini_maxvel();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(401)) goto parse_acc;
        break;
      }

      // required double acc = 50;
      case 50: {
        if (tag == 401) {
         parse_acc:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &acc_)));
          set_has_acc();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.Emc_Traj_Rigid_Tap)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.Emc_Traj_Rigid_Tap)
  return false;
#undef DO_
}

void Emc_Traj_Rigid_Tap::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.Emc_Traj_Rigid_Tap)
  // required .pb.EmcPose pos = 20;
  if (has_pos()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      20, this->pos(), output);
  }

  // required double vel = 30;
  if (has_vel()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(30, this->vel(), output);
  }

  // required double ini_maxvel = 40;
  if (has_ini_maxvel()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(40, this->ini_maxvel(), output);
  }

  // required double acc = 50;
  if (has_acc()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(50, this->acc(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.Emc_Traj_Rigid_Tap)
}

::google::protobuf::uint8* Emc_Traj_Rigid_Tap::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.Emc_Traj_Rigid_Tap)
  // required .pb.EmcPose pos = 20;
  if (has_pos()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        20, this->pos(), target);
  }

  // required double vel = 30;
  if (has_vel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(30, this->vel(), target);
  }

  // required double ini_maxvel = 40;
  if (has_ini_maxvel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(40, this->ini_maxvel(), target);
  }

  // required double acc = 50;
  if (has_acc()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(50, this->acc(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.Emc_Traj_Rigid_Tap)
  return target;
}

int Emc_Traj_Rigid_Tap::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .pb.EmcPose pos = 20;
    if (has_pos()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->pos());
    }

    // required double vel = 30;
    if (has_vel()) {
      total_size += 2 + 8;
    }

    // required double ini_maxvel = 40;
    if (has_ini_maxvel()) {
      total_size += 2 + 8;
    }

    // required double acc = 50;
    if (has_acc()) {
      total_size += 2 + 8;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Emc_Traj_Rigid_Tap::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Emc_Traj_Rigid_Tap* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Emc_Traj_Rigid_Tap*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Emc_Traj_Rigid_Tap::MergeFrom(const Emc_Traj_Rigid_Tap& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_pos()) {
      mutable_pos()->::pb::EmcPose::MergeFrom(from.pos());
    }
    if (from.has_vel()) {
      set_vel(from.vel());
    }
    if (from.has_ini_maxvel()) {
      set_ini_maxvel(from.ini_maxvel());
    }
    if (from.has_acc()) {
      set_acc(from.acc());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Emc_Traj_Rigid_Tap::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Emc_Traj_Rigid_Tap::CopyFrom(const Emc_Traj_Rigid_Tap& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Emc_Traj_Rigid_Tap::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  if (has_pos()) {
    if (!this->pos().IsInitialized()) return false;
  }
  return true;
}

void Emc_Traj_Rigid_Tap::Swap(Emc_Traj_Rigid_Tap* other) {
  if (other != this) {
    std::swap(pos_, other->pos_);
    std::swap(vel_, other->vel_);
    std::swap(ini_maxvel_, other->ini_maxvel_);
    std::swap(acc_, other->acc_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Emc_Traj_Rigid_Tap::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Emc_Traj_Rigid_Tap_descriptor_;
  metadata.reflection = Emc_Traj_Rigid_Tap_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Emc_Traj_Set_Term_Cond::kCondFieldNumber;
const int Emc_Traj_Set_Term_Cond::kToleranceFieldNumber;
#endif  // !_MSC_VER

Emc_Traj_Set_Term_Cond::Emc_Traj_Set_Term_Cond()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.Emc_Traj_Set_Term_Cond)
}

void Emc_Traj_Set_Term_Cond::InitAsDefaultInstance() {
}

Emc_Traj_Set_Term_Cond::Emc_Traj_Set_Term_Cond(const Emc_Traj_Set_Term_Cond& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.Emc_Traj_Set_Term_Cond)
}

void Emc_Traj_Set_Term_Cond::SharedCtor() {
  _cached_size_ = 0;
  cond_ = 1;
  tolerance_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Emc_Traj_Set_Term_Cond::~Emc_Traj_Set_Term_Cond() {
  // @@protoc_insertion_point(destructor:pb.Emc_Traj_Set_Term_Cond)
  SharedDtor();
}

void Emc_Traj_Set_Term_Cond::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Emc_Traj_Set_Term_Cond::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Emc_Traj_Set_Term_Cond::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Emc_Traj_Set_Term_Cond_descriptor_;
}

const Emc_Traj_Set_Term_Cond& Emc_Traj_Set_Term_Cond::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_machinetalk_2fprotobuf_2fcanon_2eproto();
  return *default_instance_;
}

Emc_Traj_Set_Term_Cond* Emc_Traj_Set_Term_Cond::default_instance_ = NULL;

Emc_Traj_Set_Term_Cond* Emc_Traj_Set_Term_Cond::New() const {
  return new Emc_Traj_Set_Term_Cond;
}

void Emc_Traj_Set_Term_Cond::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    cond_ = 1;
    tolerance_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Emc_Traj_Set_Term_Cond::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.Emc_Traj_Set_Term_Cond)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .pb.TermConditionType cond = 10;
      case 10: {
        if (tag == 80) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::pb::TermConditionType_IsValid(value)) {
            set_cond(static_cast< ::pb::TermConditionType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(10, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(161)) goto parse_tolerance;
        break;
      }

      // required double tolerance = 20;
      case 20: {
        if (tag == 161) {
         parse_tolerance:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &tolerance_)));
          set_has_tolerance();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.Emc_Traj_Set_Term_Cond)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.Emc_Traj_Set_Term_Cond)
  return false;
#undef DO_
}

void Emc_Traj_Set_Term_Cond::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.Emc_Traj_Set_Term_Cond)
  // required .pb.TermConditionType cond = 10;
  if (has_cond()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      10, this->cond(), output);
  }

  // required double tolerance = 20;
  if (has_tolerance()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(20, this->tolerance(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.Emc_Traj_Set_Term_Cond)
}

::google::protobuf::uint8* Emc_Traj_Set_Term_Cond::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.Emc_Traj_Set_Term_Cond)
  // required .pb.TermConditionType cond = 10;
  if (has_cond()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      10, this->cond(), target);
  }

  // required double tolerance = 20;
  if (has_tolerance()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(20, this->tolerance(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.Emc_Traj_Set_Term_Cond)
  return target;
}

int Emc_Traj_Set_Term_Cond::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .pb.TermConditionType cond = 10;
    if (has_cond()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cond());
    }

    // required double tolerance = 20;
    if (has_tolerance()) {
      total_size += 2 + 8;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Emc_Traj_Set_Term_Cond::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Emc_Traj_Set_Term_Cond* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Emc_Traj_Set_Term_Cond*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Emc_Traj_Set_Term_Cond::MergeFrom(const Emc_Traj_Set_Term_Cond& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cond()) {
      set_cond(from.cond());
    }
    if (from.has_tolerance()) {
      set_tolerance(from.tolerance());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Emc_Traj_Set_Term_Cond::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Emc_Traj_Set_Term_Cond::CopyFrom(const Emc_Traj_Set_Term_Cond& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Emc_Traj_Set_Term_Cond::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void Emc_Traj_Set_Term_Cond::Swap(Emc_Traj_Set_Term_Cond* other) {
  if (other != this) {
    std::swap(cond_, other->cond_);
    std::swap(tolerance_, other->tolerance_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Emc_Traj_Set_Term_Cond::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Emc_Traj_Set_Term_Cond_descriptor_;
  metadata.reflection = Emc_Traj_Set_Term_Cond_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Emc_Traj_Set_Spindlesync::kFeedPerRevolutionFieldNumber;
const int Emc_Traj_Set_Spindlesync::kVelocityModeFieldNumber;
#endif  // !_MSC_VER

Emc_Traj_Set_Spindlesync::Emc_Traj_Set_Spindlesync()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.Emc_Traj_Set_Spindlesync)
}

void Emc_Traj_Set_Spindlesync::InitAsDefaultInstance() {
}

Emc_Traj_Set_Spindlesync::Emc_Traj_Set_Spindlesync(const Emc_Traj_Set_Spindlesync& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.Emc_Traj_Set_Spindlesync)
}

void Emc_Traj_Set_Spindlesync::SharedCtor() {
  _cached_size_ = 0;
  feed_per_revolution_ = 0;
  velocity_mode_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Emc_Traj_Set_Spindlesync::~Emc_Traj_Set_Spindlesync() {
  // @@protoc_insertion_point(destructor:pb.Emc_Traj_Set_Spindlesync)
  SharedDtor();
}

void Emc_Traj_Set_Spindlesync::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Emc_Traj_Set_Spindlesync::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Emc_Traj_Set_Spindlesync::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Emc_Traj_Set_Spindlesync_descriptor_;
}

const Emc_Traj_Set_Spindlesync& Emc_Traj_Set_Spindlesync::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_machinetalk_2fprotobuf_2fcanon_2eproto();
  return *default_instance_;
}

Emc_Traj_Set_Spindlesync* Emc_Traj_Set_Spindlesync::default_instance_ = NULL;

Emc_Traj_Set_Spindlesync* Emc_Traj_Set_Spindlesync::New() const {
  return new Emc_Traj_Set_Spindlesync;
}

void Emc_Traj_Set_Spindlesync::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<Emc_Traj_Set_Spindlesync*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(feed_per_revolution_, velocity_mode_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Emc_Traj_Set_Spindlesync::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.Emc_Traj_Set_Spindlesync)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required double feed_per_revolution = 10;
      case 10: {
        if (tag == 81) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &feed_per_revolution_)));
          set_has_feed_per_revolution();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(160)) goto parse_velocity_mode;
        break;
      }

      // required bool velocity_mode = 20;
      case 20: {
        if (tag == 160) {
         parse_velocity_mode:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &velocity_mode_)));
          set_has_velocity_mode();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.Emc_Traj_Set_Spindlesync)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.Emc_Traj_Set_Spindlesync)
  return false;
#undef DO_
}

void Emc_Traj_Set_Spindlesync::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.Emc_Traj_Set_Spindlesync)
  // required double feed_per_revolution = 10;
  if (has_feed_per_revolution()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(10, this->feed_per_revolution(), output);
  }

  // required bool velocity_mode = 20;
  if (has_velocity_mode()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(20, this->velocity_mode(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.Emc_Traj_Set_Spindlesync)
}

::google::protobuf::uint8* Emc_Traj_Set_Spindlesync::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.Emc_Traj_Set_Spindlesync)
  // required double feed_per_revolution = 10;
  if (has_feed_per_revolution()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(10, this->feed_per_revolution(), target);
  }

  // required bool velocity_mode = 20;
  if (has_velocity_mode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(20, this->velocity_mode(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.Emc_Traj_Set_Spindlesync)
  return target;
}

int Emc_Traj_Set_Spindlesync::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required double feed_per_revolution = 10;
    if (has_feed_per_revolution()) {
      total_size += 1 + 8;
    }

    // required bool velocity_mode = 20;
    if (has_velocity_mode()) {
      total_size += 2 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Emc_Traj_Set_Spindlesync::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Emc_Traj_Set_Spindlesync* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Emc_Traj_Set_Spindlesync*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Emc_Traj_Set_Spindlesync::MergeFrom(const Emc_Traj_Set_Spindlesync& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_feed_per_revolution()) {
      set_feed_per_revolution(from.feed_per_revolution());
    }
    if (from.has_velocity_mode()) {
      set_velocity_mode(from.velocity_mode());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Emc_Traj_Set_Spindlesync::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Emc_Traj_Set_Spindlesync::CopyFrom(const Emc_Traj_Set_Spindlesync& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Emc_Traj_Set_Spindlesync::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void Emc_Traj_Set_Spindlesync::Swap(Emc_Traj_Set_Spindlesync* other) {
  if (other != this) {
    std::swap(feed_per_revolution_, other->feed_per_revolution_);
    std::swap(velocity_mode_, other->velocity_mode_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Emc_Traj_Set_Spindlesync::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Emc_Traj_Set_Spindlesync_descriptor_;
  metadata.reflection = Emc_Traj_Set_Spindlesync_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Emc_Traj_Delay::kDelayFieldNumber;
#endif  // !_MSC_VER

Emc_Traj_Delay::Emc_Traj_Delay()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.Emc_Traj_Delay)
}

void Emc_Traj_Delay::InitAsDefaultInstance() {
}

Emc_Traj_Delay::Emc_Traj_Delay(const Emc_Traj_Delay& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.Emc_Traj_Delay)
}

void Emc_Traj_Delay::SharedCtor() {
  _cached_size_ = 0;
  delay_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Emc_Traj_Delay::~Emc_Traj_Delay() {
  // @@protoc_insertion_point(destructor:pb.Emc_Traj_Delay)
  SharedDtor();
}

void Emc_Traj_Delay::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Emc_Traj_Delay::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Emc_Traj_Delay::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Emc_Traj_Delay_descriptor_;
}

const Emc_Traj_Delay& Emc_Traj_Delay::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_machinetalk_2fprotobuf_2fcanon_2eproto();
  return *default_instance_;
}

Emc_Traj_Delay* Emc_Traj_Delay::default_instance_ = NULL;

Emc_Traj_Delay* Emc_Traj_Delay::New() const {
  return new Emc_Traj_Delay;
}

void Emc_Traj_Delay::Clear() {
  delay_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Emc_Traj_Delay::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.Emc_Traj_Delay)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required double delay = 10;
      case 10: {
        if (tag == 81) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &delay_)));
          set_has_delay();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.Emc_Traj_Delay)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.Emc_Traj_Delay)
  return false;
#undef DO_
}

void Emc_Traj_Delay::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.Emc_Traj_Delay)
  // required double delay = 10;
  if (has_delay()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(10, this->delay(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.Emc_Traj_Delay)
}

::google::protobuf::uint8* Emc_Traj_Delay::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.Emc_Traj_Delay)
  // required double delay = 10;
  if (has_delay()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(10, this->delay(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.Emc_Traj_Delay)
  return target;
}

int Emc_Traj_Delay::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required double delay = 10;
    if (has_delay()) {
      total_size += 1 + 8;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Emc_Traj_Delay::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Emc_Traj_Delay* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Emc_Traj_Delay*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Emc_Traj_Delay::MergeFrom(const Emc_Traj_Delay& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_delay()) {
      set_delay(from.delay());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Emc_Traj_Delay::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Emc_Traj_Delay::CopyFrom(const Emc_Traj_Delay& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Emc_Traj_Delay::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void Emc_Traj_Delay::Swap(Emc_Traj_Delay* other) {
  if (other != this) {
    std::swap(delay_, other->delay_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Emc_Traj_Delay::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Emc_Traj_Delay_descriptor_;
  metadata.reflection = Emc_Traj_Delay_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Emc_Spindle_On::kSpeedFieldNumber;
const int Emc_Spindle_On::kFactorFieldNumber;
const int Emc_Spindle_On::kXoffsetFieldNumber;
#endif  // !_MSC_VER

Emc_Spindle_On::Emc_Spindle_On()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.Emc_Spindle_On)
}

void Emc_Spindle_On::InitAsDefaultInstance() {
}

Emc_Spindle_On::Emc_Spindle_On(const Emc_Spindle_On& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.Emc_Spindle_On)
}

void Emc_Spindle_On::SharedCtor() {
  _cached_size_ = 0;
  speed_ = 0;
  factor_ = 0;
  xoffset_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Emc_Spindle_On::~Emc_Spindle_On() {
  // @@protoc_insertion_point(destructor:pb.Emc_Spindle_On)
  SharedDtor();
}

void Emc_Spindle_On::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Emc_Spindle_On::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Emc_Spindle_On::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Emc_Spindle_On_descriptor_;
}

const Emc_Spindle_On& Emc_Spindle_On::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_machinetalk_2fprotobuf_2fcanon_2eproto();
  return *default_instance_;
}

Emc_Spindle_On* Emc_Spindle_On::default_instance_ = NULL;

Emc_Spindle_On* Emc_Spindle_On::New() const {
  return new Emc_Spindle_On;
}

void Emc_Spindle_On::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<Emc_Spindle_On*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(speed_, xoffset_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Emc_Spindle_On::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.Emc_Spindle_On)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required double speed = 10 [default = 0];
      case 10: {
        if (tag == 81) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &speed_)));
          set_has_speed();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(161)) goto parse_factor;
        break;
      }

      // required double factor = 20 [default = 0];
      case 20: {
        if (tag == 161) {
         parse_factor:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &factor_)));
          set_has_factor();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(241)) goto parse_xoffset;
        break;
      }

      // required double xoffset = 30 [default = 0];
      case 30: {
        if (tag == 241) {
         parse_xoffset:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &xoffset_)));
          set_has_xoffset();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.Emc_Spindle_On)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.Emc_Spindle_On)
  return false;
#undef DO_
}

void Emc_Spindle_On::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.Emc_Spindle_On)
  // required double speed = 10 [default = 0];
  if (has_speed()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(10, this->speed(), output);
  }

  // required double factor = 20 [default = 0];
  if (has_factor()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(20, this->factor(), output);
  }

  // required double xoffset = 30 [default = 0];
  if (has_xoffset()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(30, this->xoffset(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.Emc_Spindle_On)
}

::google::protobuf::uint8* Emc_Spindle_On::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.Emc_Spindle_On)
  // required double speed = 10 [default = 0];
  if (has_speed()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(10, this->speed(), target);
  }

  // required double factor = 20 [default = 0];
  if (has_factor()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(20, this->factor(), target);
  }

  // required double xoffset = 30 [default = 0];
  if (has_xoffset()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(30, this->xoffset(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.Emc_Spindle_On)
  return target;
}

int Emc_Spindle_On::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required double speed = 10 [default = 0];
    if (has_speed()) {
      total_size += 1 + 8;
    }

    // required double factor = 20 [default = 0];
    if (has_factor()) {
      total_size += 2 + 8;
    }

    // required double xoffset = 30 [default = 0];
    if (has_xoffset()) {
      total_size += 2 + 8;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Emc_Spindle_On::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Emc_Spindle_On* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Emc_Spindle_On*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Emc_Spindle_On::MergeFrom(const Emc_Spindle_On& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_speed()) {
      set_speed(from.speed());
    }
    if (from.has_factor()) {
      set_factor(from.factor());
    }
    if (from.has_xoffset()) {
      set_xoffset(from.xoffset());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Emc_Spindle_On::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Emc_Spindle_On::CopyFrom(const Emc_Spindle_On& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Emc_Spindle_On::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void Emc_Spindle_On::Swap(Emc_Spindle_On* other) {
  if (other != this) {
    std::swap(speed_, other->speed_);
    std::swap(factor_, other->factor_);
    std::swap(xoffset_, other->xoffset_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Emc_Spindle_On::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Emc_Spindle_On_descriptor_;
  metadata.reflection = Emc_Spindle_On_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Emc_Spindle_Speed::kSpeedFieldNumber;
const int Emc_Spindle_Speed::kFactorFieldNumber;
const int Emc_Spindle_Speed::kXoffsetFieldNumber;
#endif  // !_MSC_VER

Emc_Spindle_Speed::Emc_Spindle_Speed()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.Emc_Spindle_Speed)
}

void Emc_Spindle_Speed::InitAsDefaultInstance() {
}

Emc_Spindle_Speed::Emc_Spindle_Speed(const Emc_Spindle_Speed& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.Emc_Spindle_Speed)
}

void Emc_Spindle_Speed::SharedCtor() {
  _cached_size_ = 0;
  speed_ = 0;
  factor_ = 0;
  xoffset_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Emc_Spindle_Speed::~Emc_Spindle_Speed() {
  // @@protoc_insertion_point(destructor:pb.Emc_Spindle_Speed)
  SharedDtor();
}

void Emc_Spindle_Speed::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Emc_Spindle_Speed::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Emc_Spindle_Speed::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Emc_Spindle_Speed_descriptor_;
}

const Emc_Spindle_Speed& Emc_Spindle_Speed::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_machinetalk_2fprotobuf_2fcanon_2eproto();
  return *default_instance_;
}

Emc_Spindle_Speed* Emc_Spindle_Speed::default_instance_ = NULL;

Emc_Spindle_Speed* Emc_Spindle_Speed::New() const {
  return new Emc_Spindle_Speed;
}

void Emc_Spindle_Speed::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<Emc_Spindle_Speed*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(speed_, xoffset_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Emc_Spindle_Speed::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.Emc_Spindle_Speed)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required double speed = 10;
      case 10: {
        if (tag == 81) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &speed_)));
          set_has_speed();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(161)) goto parse_factor;
        break;
      }

      // required double factor = 20;
      case 20: {
        if (tag == 161) {
         parse_factor:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &factor_)));
          set_has_factor();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(241)) goto parse_xoffset;
        break;
      }

      // required double xoffset = 30;
      case 30: {
        if (tag == 241) {
         parse_xoffset:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &xoffset_)));
          set_has_xoffset();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.Emc_Spindle_Speed)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.Emc_Spindle_Speed)
  return false;
#undef DO_
}

void Emc_Spindle_Speed::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.Emc_Spindle_Speed)
  // required double speed = 10;
  if (has_speed()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(10, this->speed(), output);
  }

  // required double factor = 20;
  if (has_factor()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(20, this->factor(), output);
  }

  // required double xoffset = 30;
  if (has_xoffset()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(30, this->xoffset(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.Emc_Spindle_Speed)
}

::google::protobuf::uint8* Emc_Spindle_Speed::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.Emc_Spindle_Speed)
  // required double speed = 10;
  if (has_speed()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(10, this->speed(), target);
  }

  // required double factor = 20;
  if (has_factor()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(20, this->factor(), target);
  }

  // required double xoffset = 30;
  if (has_xoffset()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(30, this->xoffset(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.Emc_Spindle_Speed)
  return target;
}

int Emc_Spindle_Speed::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required double speed = 10;
    if (has_speed()) {
      total_size += 1 + 8;
    }

    // required double factor = 20;
    if (has_factor()) {
      total_size += 2 + 8;
    }

    // required double xoffset = 30;
    if (has_xoffset()) {
      total_size += 2 + 8;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Emc_Spindle_Speed::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Emc_Spindle_Speed* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Emc_Spindle_Speed*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Emc_Spindle_Speed::MergeFrom(const Emc_Spindle_Speed& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_speed()) {
      set_speed(from.speed());
    }
    if (from.has_factor()) {
      set_factor(from.factor());
    }
    if (from.has_xoffset()) {
      set_xoffset(from.xoffset());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Emc_Spindle_Speed::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Emc_Spindle_Speed::CopyFrom(const Emc_Spindle_Speed& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Emc_Spindle_Speed::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void Emc_Spindle_Speed::Swap(Emc_Spindle_Speed* other) {
  if (other != this) {
    std::swap(speed_, other->speed_);
    std::swap(factor_, other->factor_);
    std::swap(xoffset_, other->xoffset_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Emc_Spindle_Speed::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Emc_Spindle_Speed_descriptor_;
  metadata.reflection = Emc_Spindle_Speed_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Emc_Spindle_Orient::kOrientationFieldNumber;
const int Emc_Spindle_Orient::kModeFieldNumber;
#endif  // !_MSC_VER

Emc_Spindle_Orient::Emc_Spindle_Orient()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.Emc_Spindle_Orient)
}

void Emc_Spindle_Orient::InitAsDefaultInstance() {
}

Emc_Spindle_Orient::Emc_Spindle_Orient(const Emc_Spindle_Orient& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.Emc_Spindle_Orient)
}

void Emc_Spindle_Orient::SharedCtor() {
  _cached_size_ = 0;
  orientation_ = 0;
  mode_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Emc_Spindle_Orient::~Emc_Spindle_Orient() {
  // @@protoc_insertion_point(destructor:pb.Emc_Spindle_Orient)
  SharedDtor();
}

void Emc_Spindle_Orient::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Emc_Spindle_Orient::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Emc_Spindle_Orient::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Emc_Spindle_Orient_descriptor_;
}

const Emc_Spindle_Orient& Emc_Spindle_Orient::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_machinetalk_2fprotobuf_2fcanon_2eproto();
  return *default_instance_;
}

Emc_Spindle_Orient* Emc_Spindle_Orient::default_instance_ = NULL;

Emc_Spindle_Orient* Emc_Spindle_Orient::New() const {
  return new Emc_Spindle_Orient;
}

void Emc_Spindle_Orient::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    orientation_ = 0;
    mode_ = 1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Emc_Spindle_Orient::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.Emc_Spindle_Orient)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required double orientation = 10;
      case 10: {
        if (tag == 81) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &orientation_)));
          set_has_orientation();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(160)) goto parse_mode;
        break;
      }

      // required .pb.CanonDirection mode = 20;
      case 20: {
        if (tag == 160) {
         parse_mode:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::pb::CanonDirection_IsValid(value)) {
            set_mode(static_cast< ::pb::CanonDirection >(value));
          } else {
            mutable_unknown_fields()->AddVarint(20, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.Emc_Spindle_Orient)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.Emc_Spindle_Orient)
  return false;
#undef DO_
}

void Emc_Spindle_Orient::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.Emc_Spindle_Orient)
  // required double orientation = 10;
  if (has_orientation()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(10, this->orientation(), output);
  }

  // required .pb.CanonDirection mode = 20;
  if (has_mode()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      20, this->mode(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.Emc_Spindle_Orient)
}

::google::protobuf::uint8* Emc_Spindle_Orient::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.Emc_Spindle_Orient)
  // required double orientation = 10;
  if (has_orientation()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(10, this->orientation(), target);
  }

  // required .pb.CanonDirection mode = 20;
  if (has_mode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      20, this->mode(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.Emc_Spindle_Orient)
  return target;
}

int Emc_Spindle_Orient::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required double orientation = 10;
    if (has_orientation()) {
      total_size += 1 + 8;
    }

    // required .pb.CanonDirection mode = 20;
    if (has_mode()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->mode());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Emc_Spindle_Orient::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Emc_Spindle_Orient* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Emc_Spindle_Orient*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Emc_Spindle_Orient::MergeFrom(const Emc_Spindle_Orient& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_orientation()) {
      set_orientation(from.orientation());
    }
    if (from.has_mode()) {
      set_mode(from.mode());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Emc_Spindle_Orient::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Emc_Spindle_Orient::CopyFrom(const Emc_Spindle_Orient& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Emc_Spindle_Orient::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void Emc_Spindle_Orient::Swap(Emc_Spindle_Orient* other) {
  if (other != this) {
    std::swap(orientation_, other->orientation_);
    std::swap(mode_, other->mode_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Emc_Spindle_Orient::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Emc_Spindle_Orient_descriptor_;
  metadata.reflection = Emc_Spindle_Orient_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Emc_Spindle_Wait_Orient_Complete::kTimeoutFieldNumber;
#endif  // !_MSC_VER

Emc_Spindle_Wait_Orient_Complete::Emc_Spindle_Wait_Orient_Complete()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.Emc_Spindle_Wait_Orient_Complete)
}

void Emc_Spindle_Wait_Orient_Complete::InitAsDefaultInstance() {
}

Emc_Spindle_Wait_Orient_Complete::Emc_Spindle_Wait_Orient_Complete(const Emc_Spindle_Wait_Orient_Complete& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.Emc_Spindle_Wait_Orient_Complete)
}

void Emc_Spindle_Wait_Orient_Complete::SharedCtor() {
  _cached_size_ = 0;
  timeout_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Emc_Spindle_Wait_Orient_Complete::~Emc_Spindle_Wait_Orient_Complete() {
  // @@protoc_insertion_point(destructor:pb.Emc_Spindle_Wait_Orient_Complete)
  SharedDtor();
}

void Emc_Spindle_Wait_Orient_Complete::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Emc_Spindle_Wait_Orient_Complete::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Emc_Spindle_Wait_Orient_Complete::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Emc_Spindle_Wait_Orient_Complete_descriptor_;
}

const Emc_Spindle_Wait_Orient_Complete& Emc_Spindle_Wait_Orient_Complete::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_machinetalk_2fprotobuf_2fcanon_2eproto();
  return *default_instance_;
}

Emc_Spindle_Wait_Orient_Complete* Emc_Spindle_Wait_Orient_Complete::default_instance_ = NULL;

Emc_Spindle_Wait_Orient_Complete* Emc_Spindle_Wait_Orient_Complete::New() const {
  return new Emc_Spindle_Wait_Orient_Complete;
}

void Emc_Spindle_Wait_Orient_Complete::Clear() {
  timeout_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Emc_Spindle_Wait_Orient_Complete::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.Emc_Spindle_Wait_Orient_Complete)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required double timeout = 10;
      case 10: {
        if (tag == 81) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &timeout_)));
          set_has_timeout();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.Emc_Spindle_Wait_Orient_Complete)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.Emc_Spindle_Wait_Orient_Complete)
  return false;
#undef DO_
}

void Emc_Spindle_Wait_Orient_Complete::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.Emc_Spindle_Wait_Orient_Complete)
  // required double timeout = 10;
  if (has_timeout()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(10, this->timeout(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.Emc_Spindle_Wait_Orient_Complete)
}

::google::protobuf::uint8* Emc_Spindle_Wait_Orient_Complete::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.Emc_Spindle_Wait_Orient_Complete)
  // required double timeout = 10;
  if (has_timeout()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(10, this->timeout(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.Emc_Spindle_Wait_Orient_Complete)
  return target;
}

int Emc_Spindle_Wait_Orient_Complete::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required double timeout = 10;
    if (has_timeout()) {
      total_size += 1 + 8;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Emc_Spindle_Wait_Orient_Complete::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Emc_Spindle_Wait_Orient_Complete* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Emc_Spindle_Wait_Orient_Complete*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Emc_Spindle_Wait_Orient_Complete::MergeFrom(const Emc_Spindle_Wait_Orient_Complete& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_timeout()) {
      set_timeout(from.timeout());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Emc_Spindle_Wait_Orient_Complete::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Emc_Spindle_Wait_Orient_Complete::CopyFrom(const Emc_Spindle_Wait_Orient_Complete& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Emc_Spindle_Wait_Orient_Complete::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void Emc_Spindle_Wait_Orient_Complete::Swap(Emc_Spindle_Wait_Orient_Complete* other) {
  if (other != this) {
    std::swap(timeout_, other->timeout_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Emc_Spindle_Wait_Orient_Complete::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Emc_Spindle_Wait_Orient_Complete_descriptor_;
  metadata.reflection = Emc_Spindle_Wait_Orient_Complete_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Emc_Tool_Set_Offset::kPocketFieldNumber;
const int Emc_Tool_Set_Offset::kToolnoFieldNumber;
const int Emc_Tool_Set_Offset::kOffsetFieldNumber;
const int Emc_Tool_Set_Offset::kDiameterFieldNumber;
const int Emc_Tool_Set_Offset::kFrontangleFieldNumber;
const int Emc_Tool_Set_Offset::kBackangleFieldNumber;
const int Emc_Tool_Set_Offset::kOrientationFieldNumber;
#endif  // !_MSC_VER

Emc_Tool_Set_Offset::Emc_Tool_Set_Offset()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.Emc_Tool_Set_Offset)
}

void Emc_Tool_Set_Offset::InitAsDefaultInstance() {
  offset_ = const_cast< ::pb::EmcPose*>(&::pb::EmcPose::default_instance());
}

Emc_Tool_Set_Offset::Emc_Tool_Set_Offset(const Emc_Tool_Set_Offset& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.Emc_Tool_Set_Offset)
}

void Emc_Tool_Set_Offset::SharedCtor() {
  _cached_size_ = 0;
  pocket_ = 0;
  toolno_ = 0;
  offset_ = NULL;
  diameter_ = 0;
  frontangle_ = 0;
  backangle_ = 0;
  orientation_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Emc_Tool_Set_Offset::~Emc_Tool_Set_Offset() {
  // @@protoc_insertion_point(destructor:pb.Emc_Tool_Set_Offset)
  SharedDtor();
}

void Emc_Tool_Set_Offset::SharedDtor() {
  if (this != default_instance_) {
    delete offset_;
  }
}

void Emc_Tool_Set_Offset::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Emc_Tool_Set_Offset::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Emc_Tool_Set_Offset_descriptor_;
}

const Emc_Tool_Set_Offset& Emc_Tool_Set_Offset::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_machinetalk_2fprotobuf_2fcanon_2eproto();
  return *default_instance_;
}

Emc_Tool_Set_Offset* Emc_Tool_Set_Offset::default_instance_ = NULL;

Emc_Tool_Set_Offset* Emc_Tool_Set_Offset::New() const {
  return new Emc_Tool_Set_Offset;
}

void Emc_Tool_Set_Offset::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<Emc_Tool_Set_Offset*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 127) {
    ZR_(pocket_, toolno_);
    ZR_(diameter_, orientation_);
    if (has_offset()) {
      if (offset_ != NULL) offset_->::pb::EmcPose::Clear();
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Emc_Tool_Set_Offset::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.Emc_Tool_Set_Offset)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 pocket = 10;
      case 10: {
        if (tag == 80) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &pocket_)));
          set_has_pocket();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(120)) goto parse_toolno;
        break;
      }

      // required int32 toolno = 15;
      case 15: {
        if (tag == 120) {
         parse_toolno:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &toolno_)));
          set_has_toolno();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(162)) goto parse_offset;
        break;
      }

      // required .pb.EmcPose offset = 20;
      case 20: {
        if (tag == 162) {
         parse_offset:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_offset()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(241)) goto parse_diameter;
        break;
      }

      // required double diameter = 30;
      case 30: {
        if (tag == 241) {
         parse_diameter:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &diameter_)));
          set_has_diameter();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(321)) goto parse_frontangle;
        break;
      }

      // required double frontangle = 40;
      case 40: {
        if (tag == 321) {
         parse_frontangle:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &frontangle_)));
          set_has_frontangle();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(401)) goto parse_backangle;
        break;
      }

      // required double backangle = 50;
      case 50: {
        if (tag == 401) {
         parse_backangle:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &backangle_)));
          set_has_backangle();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(480)) goto parse_orientation;
        break;
      }

      // required int32 orientation = 60;
      case 60: {
        if (tag == 480) {
         parse_orientation:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &orientation_)));
          set_has_orientation();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.Emc_Tool_Set_Offset)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.Emc_Tool_Set_Offset)
  return false;
#undef DO_
}

void Emc_Tool_Set_Offset::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.Emc_Tool_Set_Offset)
  // required int32 pocket = 10;
  if (has_pocket()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->pocket(), output);
  }

  // required int32 toolno = 15;
  if (has_toolno()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(15, this->toolno(), output);
  }

  // required .pb.EmcPose offset = 20;
  if (has_offset()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      20, this->offset(), output);
  }

  // required double diameter = 30;
  if (has_diameter()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(30, this->diameter(), output);
  }

  // required double frontangle = 40;
  if (has_frontangle()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(40, this->frontangle(), output);
  }

  // required double backangle = 50;
  if (has_backangle()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(50, this->backangle(), output);
  }

  // required int32 orientation = 60;
  if (has_orientation()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(60, this->orientation(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.Emc_Tool_Set_Offset)
}

::google::protobuf::uint8* Emc_Tool_Set_Offset::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.Emc_Tool_Set_Offset)
  // required int32 pocket = 10;
  if (has_pocket()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->pocket(), target);
  }

  // required int32 toolno = 15;
  if (has_toolno()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(15, this->toolno(), target);
  }

  // required .pb.EmcPose offset = 20;
  if (has_offset()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        20, this->offset(), target);
  }

  // required double diameter = 30;
  if (has_diameter()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(30, this->diameter(), target);
  }

  // required double frontangle = 40;
  if (has_frontangle()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(40, this->frontangle(), target);
  }

  // required double backangle = 50;
  if (has_backangle()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(50, this->backangle(), target);
  }

  // required int32 orientation = 60;
  if (has_orientation()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(60, this->orientation(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.Emc_Tool_Set_Offset)
  return target;
}

int Emc_Tool_Set_Offset::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 pocket = 10;
    if (has_pocket()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->pocket());
    }

    // required int32 toolno = 15;
    if (has_toolno()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->toolno());
    }

    // required .pb.EmcPose offset = 20;
    if (has_offset()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->offset());
    }

    // required double diameter = 30;
    if (has_diameter()) {
      total_size += 2 + 8;
    }

    // required double frontangle = 40;
    if (has_frontangle()) {
      total_size += 2 + 8;
    }

    // required double backangle = 50;
    if (has_backangle()) {
      total_size += 2 + 8;
    }

    // required int32 orientation = 60;
    if (has_orientation()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->orientation());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Emc_Tool_Set_Offset::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Emc_Tool_Set_Offset* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Emc_Tool_Set_Offset*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Emc_Tool_Set_Offset::MergeFrom(const Emc_Tool_Set_Offset& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_pocket()) {
      set_pocket(from.pocket());
    }
    if (from.has_toolno()) {
      set_toolno(from.toolno());
    }
    if (from.has_offset()) {
      mutable_offset()->::pb::EmcPose::MergeFrom(from.offset());
    }
    if (from.has_diameter()) {
      set_diameter(from.diameter());
    }
    if (from.has_frontangle()) {
      set_frontangle(from.frontangle());
    }
    if (from.has_backangle()) {
      set_backangle(from.backangle());
    }
    if (from.has_orientation()) {
      set_orientation(from.orientation());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Emc_Tool_Set_Offset::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Emc_Tool_Set_Offset::CopyFrom(const Emc_Tool_Set_Offset& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Emc_Tool_Set_Offset::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000007f) != 0x0000007f) return false;

  if (has_offset()) {
    if (!this->offset().IsInitialized()) return false;
  }
  return true;
}

void Emc_Tool_Set_Offset::Swap(Emc_Tool_Set_Offset* other) {
  if (other != this) {
    std::swap(pocket_, other->pocket_);
    std::swap(toolno_, other->toolno_);
    std::swap(offset_, other->offset_);
    std::swap(diameter_, other->diameter_);
    std::swap(frontangle_, other->frontangle_);
    std::swap(backangle_, other->backangle_);
    std::swap(orientation_, other->orientation_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Emc_Tool_Set_Offset::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Emc_Tool_Set_Offset_descriptor_;
  metadata.reflection = Emc_Tool_Set_Offset_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Emc_Traj_Set_Offset::kOffsetFieldNumber;
#endif  // !_MSC_VER

Emc_Traj_Set_Offset::Emc_Traj_Set_Offset()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.Emc_Traj_Set_Offset)
}

void Emc_Traj_Set_Offset::InitAsDefaultInstance() {
  offset_ = const_cast< ::pb::EmcPose*>(&::pb::EmcPose::default_instance());
}

Emc_Traj_Set_Offset::Emc_Traj_Set_Offset(const Emc_Traj_Set_Offset& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.Emc_Traj_Set_Offset)
}

void Emc_Traj_Set_Offset::SharedCtor() {
  _cached_size_ = 0;
  offset_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Emc_Traj_Set_Offset::~Emc_Traj_Set_Offset() {
  // @@protoc_insertion_point(destructor:pb.Emc_Traj_Set_Offset)
  SharedDtor();
}

void Emc_Traj_Set_Offset::SharedDtor() {
  if (this != default_instance_) {
    delete offset_;
  }
}

void Emc_Traj_Set_Offset::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Emc_Traj_Set_Offset::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Emc_Traj_Set_Offset_descriptor_;
}

const Emc_Traj_Set_Offset& Emc_Traj_Set_Offset::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_machinetalk_2fprotobuf_2fcanon_2eproto();
  return *default_instance_;
}

Emc_Traj_Set_Offset* Emc_Traj_Set_Offset::default_instance_ = NULL;

Emc_Traj_Set_Offset* Emc_Traj_Set_Offset::New() const {
  return new Emc_Traj_Set_Offset;
}

void Emc_Traj_Set_Offset::Clear() {
  if (has_offset()) {
    if (offset_ != NULL) offset_->::pb::EmcPose::Clear();
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Emc_Traj_Set_Offset::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.Emc_Traj_Set_Offset)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .pb.EmcPose offset = 10;
      case 10: {
        if (tag == 82) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_offset()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.Emc_Traj_Set_Offset)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.Emc_Traj_Set_Offset)
  return false;
#undef DO_
}

void Emc_Traj_Set_Offset::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.Emc_Traj_Set_Offset)
  // required .pb.EmcPose offset = 10;
  if (has_offset()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, this->offset(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.Emc_Traj_Set_Offset)
}

::google::protobuf::uint8* Emc_Traj_Set_Offset::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.Emc_Traj_Set_Offset)
  // required .pb.EmcPose offset = 10;
  if (has_offset()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        10, this->offset(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.Emc_Traj_Set_Offset)
  return target;
}

int Emc_Traj_Set_Offset::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .pb.EmcPose offset = 10;
    if (has_offset()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->offset());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Emc_Traj_Set_Offset::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Emc_Traj_Set_Offset* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Emc_Traj_Set_Offset*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Emc_Traj_Set_Offset::MergeFrom(const Emc_Traj_Set_Offset& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_offset()) {
      mutable_offset()->::pb::EmcPose::MergeFrom(from.offset());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Emc_Traj_Set_Offset::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Emc_Traj_Set_Offset::CopyFrom(const Emc_Traj_Set_Offset& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Emc_Traj_Set_Offset::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_offset()) {
    if (!this->offset().IsInitialized()) return false;
  }
  return true;
}

void Emc_Traj_Set_Offset::Swap(Emc_Traj_Set_Offset* other) {
  if (other != this) {
    std::swap(offset_, other->offset_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Emc_Traj_Set_Offset::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Emc_Traj_Set_Offset_descriptor_;
  metadata.reflection = Emc_Traj_Set_Offset_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Emc_Tool_Prepare::kPocketFieldNumber;
const int Emc_Tool_Prepare::kToolFieldNumber;
#endif  // !_MSC_VER

Emc_Tool_Prepare::Emc_Tool_Prepare()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.Emc_Tool_Prepare)
}

void Emc_Tool_Prepare::InitAsDefaultInstance() {
}

Emc_Tool_Prepare::Emc_Tool_Prepare(const Emc_Tool_Prepare& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.Emc_Tool_Prepare)
}

void Emc_Tool_Prepare::SharedCtor() {
  _cached_size_ = 0;
  pocket_ = 0;
  tool_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Emc_Tool_Prepare::~Emc_Tool_Prepare() {
  // @@protoc_insertion_point(destructor:pb.Emc_Tool_Prepare)
  SharedDtor();
}

void Emc_Tool_Prepare::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Emc_Tool_Prepare::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Emc_Tool_Prepare::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Emc_Tool_Prepare_descriptor_;
}

const Emc_Tool_Prepare& Emc_Tool_Prepare::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_machinetalk_2fprotobuf_2fcanon_2eproto();
  return *default_instance_;
}

Emc_Tool_Prepare* Emc_Tool_Prepare::default_instance_ = NULL;

Emc_Tool_Prepare* Emc_Tool_Prepare::New() const {
  return new Emc_Tool_Prepare;
}

void Emc_Tool_Prepare::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<Emc_Tool_Prepare*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(pocket_, tool_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Emc_Tool_Prepare::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.Emc_Tool_Prepare)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 pocket = 10;
      case 10: {
        if (tag == 80) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &pocket_)));
          set_has_pocket();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(160)) goto parse_tool;
        break;
      }

      // required int32 tool = 20;
      case 20: {
        if (tag == 160) {
         parse_tool:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tool_)));
          set_has_tool();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.Emc_Tool_Prepare)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.Emc_Tool_Prepare)
  return false;
#undef DO_
}

void Emc_Tool_Prepare::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.Emc_Tool_Prepare)
  // required int32 pocket = 10;
  if (has_pocket()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->pocket(), output);
  }

  // required int32 tool = 20;
  if (has_tool()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(20, this->tool(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.Emc_Tool_Prepare)
}

::google::protobuf::uint8* Emc_Tool_Prepare::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.Emc_Tool_Prepare)
  // required int32 pocket = 10;
  if (has_pocket()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->pocket(), target);
  }

  // required int32 tool = 20;
  if (has_tool()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(20, this->tool(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.Emc_Tool_Prepare)
  return target;
}

int Emc_Tool_Prepare::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 pocket = 10;
    if (has_pocket()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->pocket());
    }

    // required int32 tool = 20;
    if (has_tool()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->tool());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Emc_Tool_Prepare::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Emc_Tool_Prepare* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Emc_Tool_Prepare*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Emc_Tool_Prepare::MergeFrom(const Emc_Tool_Prepare& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_pocket()) {
      set_pocket(from.pocket());
    }
    if (from.has_tool()) {
      set_tool(from.tool());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Emc_Tool_Prepare::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Emc_Tool_Prepare::CopyFrom(const Emc_Tool_Prepare& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Emc_Tool_Prepare::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void Emc_Tool_Prepare::Swap(Emc_Tool_Prepare* other) {
  if (other != this) {
    std::swap(pocket_, other->pocket_);
    std::swap(tool_, other->tool_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Emc_Tool_Prepare::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Emc_Tool_Prepare_descriptor_;
  metadata.reflection = Emc_Tool_Prepare_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Emc_Tool_Set_Number::kToolFieldNumber;
#endif  // !_MSC_VER

Emc_Tool_Set_Number::Emc_Tool_Set_Number()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.Emc_Tool_Set_Number)
}

void Emc_Tool_Set_Number::InitAsDefaultInstance() {
}

Emc_Tool_Set_Number::Emc_Tool_Set_Number(const Emc_Tool_Set_Number& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.Emc_Tool_Set_Number)
}

void Emc_Tool_Set_Number::SharedCtor() {
  _cached_size_ = 0;
  tool_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Emc_Tool_Set_Number::~Emc_Tool_Set_Number() {
  // @@protoc_insertion_point(destructor:pb.Emc_Tool_Set_Number)
  SharedDtor();
}

void Emc_Tool_Set_Number::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Emc_Tool_Set_Number::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Emc_Tool_Set_Number::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Emc_Tool_Set_Number_descriptor_;
}

const Emc_Tool_Set_Number& Emc_Tool_Set_Number::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_machinetalk_2fprotobuf_2fcanon_2eproto();
  return *default_instance_;
}

Emc_Tool_Set_Number* Emc_Tool_Set_Number::default_instance_ = NULL;

Emc_Tool_Set_Number* Emc_Tool_Set_Number::New() const {
  return new Emc_Tool_Set_Number;
}

void Emc_Tool_Set_Number::Clear() {
  tool_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Emc_Tool_Set_Number::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.Emc_Tool_Set_Number)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 tool = 10;
      case 10: {
        if (tag == 80) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tool_)));
          set_has_tool();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.Emc_Tool_Set_Number)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.Emc_Tool_Set_Number)
  return false;
#undef DO_
}

void Emc_Tool_Set_Number::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.Emc_Tool_Set_Number)
  // required int32 tool = 10;
  if (has_tool()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->tool(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.Emc_Tool_Set_Number)
}

::google::protobuf::uint8* Emc_Tool_Set_Number::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.Emc_Tool_Set_Number)
  // required int32 tool = 10;
  if (has_tool()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->tool(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.Emc_Tool_Set_Number)
  return target;
}

int Emc_Tool_Set_Number::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 tool = 10;
    if (has_tool()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->tool());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Emc_Tool_Set_Number::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Emc_Tool_Set_Number* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Emc_Tool_Set_Number*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Emc_Tool_Set_Number::MergeFrom(const Emc_Tool_Set_Number& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_tool()) {
      set_tool(from.tool());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Emc_Tool_Set_Number::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Emc_Tool_Set_Number::CopyFrom(const Emc_Tool_Set_Number& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Emc_Tool_Set_Number::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void Emc_Tool_Set_Number::Swap(Emc_Tool_Set_Number* other) {
  if (other != this) {
    std::swap(tool_, other->tool_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Emc_Tool_Set_Number::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Emc_Tool_Set_Number_descriptor_;
  metadata.reflection = Emc_Tool_Set_Number_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Emc_Traj_Set_Fo_Enable::kModeFieldNumber;
#endif  // !_MSC_VER

Emc_Traj_Set_Fo_Enable::Emc_Traj_Set_Fo_Enable()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.Emc_Traj_Set_Fo_Enable)
}

void Emc_Traj_Set_Fo_Enable::InitAsDefaultInstance() {
}

Emc_Traj_Set_Fo_Enable::Emc_Traj_Set_Fo_Enable(const Emc_Traj_Set_Fo_Enable& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.Emc_Traj_Set_Fo_Enable)
}

void Emc_Traj_Set_Fo_Enable::SharedCtor() {
  _cached_size_ = 0;
  mode_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Emc_Traj_Set_Fo_Enable::~Emc_Traj_Set_Fo_Enable() {
  // @@protoc_insertion_point(destructor:pb.Emc_Traj_Set_Fo_Enable)
  SharedDtor();
}

void Emc_Traj_Set_Fo_Enable::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Emc_Traj_Set_Fo_Enable::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Emc_Traj_Set_Fo_Enable::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Emc_Traj_Set_Fo_Enable_descriptor_;
}

const Emc_Traj_Set_Fo_Enable& Emc_Traj_Set_Fo_Enable::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_machinetalk_2fprotobuf_2fcanon_2eproto();
  return *default_instance_;
}

Emc_Traj_Set_Fo_Enable* Emc_Traj_Set_Fo_Enable::default_instance_ = NULL;

Emc_Traj_Set_Fo_Enable* Emc_Traj_Set_Fo_Enable::New() const {
  return new Emc_Traj_Set_Fo_Enable;
}

void Emc_Traj_Set_Fo_Enable::Clear() {
  mode_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Emc_Traj_Set_Fo_Enable::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.Emc_Traj_Set_Fo_Enable)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bool mode = 10;
      case 10: {
        if (tag == 80) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &mode_)));
          set_has_mode();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.Emc_Traj_Set_Fo_Enable)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.Emc_Traj_Set_Fo_Enable)
  return false;
#undef DO_
}

void Emc_Traj_Set_Fo_Enable::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.Emc_Traj_Set_Fo_Enable)
  // required bool mode = 10;
  if (has_mode()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(10, this->mode(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.Emc_Traj_Set_Fo_Enable)
}

::google::protobuf::uint8* Emc_Traj_Set_Fo_Enable::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.Emc_Traj_Set_Fo_Enable)
  // required bool mode = 10;
  if (has_mode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(10, this->mode(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.Emc_Traj_Set_Fo_Enable)
  return target;
}

int Emc_Traj_Set_Fo_Enable::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bool mode = 10;
    if (has_mode()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Emc_Traj_Set_Fo_Enable::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Emc_Traj_Set_Fo_Enable* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Emc_Traj_Set_Fo_Enable*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Emc_Traj_Set_Fo_Enable::MergeFrom(const Emc_Traj_Set_Fo_Enable& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_mode()) {
      set_mode(from.mode());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Emc_Traj_Set_Fo_Enable::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Emc_Traj_Set_Fo_Enable::CopyFrom(const Emc_Traj_Set_Fo_Enable& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Emc_Traj_Set_Fo_Enable::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void Emc_Traj_Set_Fo_Enable::Swap(Emc_Traj_Set_Fo_Enable* other) {
  if (other != this) {
    std::swap(mode_, other->mode_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Emc_Traj_Set_Fo_Enable::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Emc_Traj_Set_Fo_Enable_descriptor_;
  metadata.reflection = Emc_Traj_Set_Fo_Enable_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Emc_Traj_Set_So_Enable::kModeFieldNumber;
#endif  // !_MSC_VER

Emc_Traj_Set_So_Enable::Emc_Traj_Set_So_Enable()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.Emc_Traj_Set_So_Enable)
}

void Emc_Traj_Set_So_Enable::InitAsDefaultInstance() {
}

Emc_Traj_Set_So_Enable::Emc_Traj_Set_So_Enable(const Emc_Traj_Set_So_Enable& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.Emc_Traj_Set_So_Enable)
}

void Emc_Traj_Set_So_Enable::SharedCtor() {
  _cached_size_ = 0;
  mode_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Emc_Traj_Set_So_Enable::~Emc_Traj_Set_So_Enable() {
  // @@protoc_insertion_point(destructor:pb.Emc_Traj_Set_So_Enable)
  SharedDtor();
}

void Emc_Traj_Set_So_Enable::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Emc_Traj_Set_So_Enable::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Emc_Traj_Set_So_Enable::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Emc_Traj_Set_So_Enable_descriptor_;
}

const Emc_Traj_Set_So_Enable& Emc_Traj_Set_So_Enable::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_machinetalk_2fprotobuf_2fcanon_2eproto();
  return *default_instance_;
}

Emc_Traj_Set_So_Enable* Emc_Traj_Set_So_Enable::default_instance_ = NULL;

Emc_Traj_Set_So_Enable* Emc_Traj_Set_So_Enable::New() const {
  return new Emc_Traj_Set_So_Enable;
}

void Emc_Traj_Set_So_Enable::Clear() {
  mode_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Emc_Traj_Set_So_Enable::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.Emc_Traj_Set_So_Enable)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bool mode = 10;
      case 10: {
        if (tag == 80) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &mode_)));
          set_has_mode();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.Emc_Traj_Set_So_Enable)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.Emc_Traj_Set_So_Enable)
  return false;
#undef DO_
}

void Emc_Traj_Set_So_Enable::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.Emc_Traj_Set_So_Enable)
  // required bool mode = 10;
  if (has_mode()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(10, this->mode(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.Emc_Traj_Set_So_Enable)
}

::google::protobuf::uint8* Emc_Traj_Set_So_Enable::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.Emc_Traj_Set_So_Enable)
  // required bool mode = 10;
  if (has_mode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(10, this->mode(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.Emc_Traj_Set_So_Enable)
  return target;
}

int Emc_Traj_Set_So_Enable::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bool mode = 10;
    if (has_mode()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Emc_Traj_Set_So_Enable::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Emc_Traj_Set_So_Enable* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Emc_Traj_Set_So_Enable*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Emc_Traj_Set_So_Enable::MergeFrom(const Emc_Traj_Set_So_Enable& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_mode()) {
      set_mode(from.mode());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Emc_Traj_Set_So_Enable::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Emc_Traj_Set_So_Enable::CopyFrom(const Emc_Traj_Set_So_Enable& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Emc_Traj_Set_So_Enable::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void Emc_Traj_Set_So_Enable::Swap(Emc_Traj_Set_So_Enable* other) {
  if (other != this) {
    std::swap(mode_, other->mode_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Emc_Traj_Set_So_Enable::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Emc_Traj_Set_So_Enable_descriptor_;
  metadata.reflection = Emc_Traj_Set_So_Enable_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Emc_Traj_Set_Fh_Enable::kModeFieldNumber;
#endif  // !_MSC_VER

Emc_Traj_Set_Fh_Enable::Emc_Traj_Set_Fh_Enable()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.Emc_Traj_Set_Fh_Enable)
}

void Emc_Traj_Set_Fh_Enable::InitAsDefaultInstance() {
}

Emc_Traj_Set_Fh_Enable::Emc_Traj_Set_Fh_Enable(const Emc_Traj_Set_Fh_Enable& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.Emc_Traj_Set_Fh_Enable)
}

void Emc_Traj_Set_Fh_Enable::SharedCtor() {
  _cached_size_ = 0;
  mode_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Emc_Traj_Set_Fh_Enable::~Emc_Traj_Set_Fh_Enable() {
  // @@protoc_insertion_point(destructor:pb.Emc_Traj_Set_Fh_Enable)
  SharedDtor();
}

void Emc_Traj_Set_Fh_Enable::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Emc_Traj_Set_Fh_Enable::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Emc_Traj_Set_Fh_Enable::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Emc_Traj_Set_Fh_Enable_descriptor_;
}

const Emc_Traj_Set_Fh_Enable& Emc_Traj_Set_Fh_Enable::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_machinetalk_2fprotobuf_2fcanon_2eproto();
  return *default_instance_;
}

Emc_Traj_Set_Fh_Enable* Emc_Traj_Set_Fh_Enable::default_instance_ = NULL;

Emc_Traj_Set_Fh_Enable* Emc_Traj_Set_Fh_Enable::New() const {
  return new Emc_Traj_Set_Fh_Enable;
}

void Emc_Traj_Set_Fh_Enable::Clear() {
  mode_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Emc_Traj_Set_Fh_Enable::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.Emc_Traj_Set_Fh_Enable)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bool mode = 10;
      case 10: {
        if (tag == 80) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &mode_)));
          set_has_mode();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.Emc_Traj_Set_Fh_Enable)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.Emc_Traj_Set_Fh_Enable)
  return false;
#undef DO_
}

void Emc_Traj_Set_Fh_Enable::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.Emc_Traj_Set_Fh_Enable)
  // required bool mode = 10;
  if (has_mode()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(10, this->mode(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.Emc_Traj_Set_Fh_Enable)
}

::google::protobuf::uint8* Emc_Traj_Set_Fh_Enable::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.Emc_Traj_Set_Fh_Enable)
  // required bool mode = 10;
  if (has_mode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(10, this->mode(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.Emc_Traj_Set_Fh_Enable)
  return target;
}

int Emc_Traj_Set_Fh_Enable::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bool mode = 10;
    if (has_mode()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Emc_Traj_Set_Fh_Enable::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Emc_Traj_Set_Fh_Enable* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Emc_Traj_Set_Fh_Enable*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Emc_Traj_Set_Fh_Enable::MergeFrom(const Emc_Traj_Set_Fh_Enable& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_mode()) {
      set_mode(from.mode());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Emc_Traj_Set_Fh_Enable::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Emc_Traj_Set_Fh_Enable::CopyFrom(const Emc_Traj_Set_Fh_Enable& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Emc_Traj_Set_Fh_Enable::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void Emc_Traj_Set_Fh_Enable::Swap(Emc_Traj_Set_Fh_Enable* other) {
  if (other != this) {
    std::swap(mode_, other->mode_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Emc_Traj_Set_Fh_Enable::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Emc_Traj_Set_Fh_Enable_descriptor_;
  metadata.reflection = Emc_Traj_Set_Fh_Enable_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Emc_Motion_Adaptive::kStatusFieldNumber;
#endif  // !_MSC_VER

Emc_Motion_Adaptive::Emc_Motion_Adaptive()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.Emc_Motion_Adaptive)
}

void Emc_Motion_Adaptive::InitAsDefaultInstance() {
}

Emc_Motion_Adaptive::Emc_Motion_Adaptive(const Emc_Motion_Adaptive& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.Emc_Motion_Adaptive)
}

void Emc_Motion_Adaptive::SharedCtor() {
  _cached_size_ = 0;
  status_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Emc_Motion_Adaptive::~Emc_Motion_Adaptive() {
  // @@protoc_insertion_point(destructor:pb.Emc_Motion_Adaptive)
  SharedDtor();
}

void Emc_Motion_Adaptive::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Emc_Motion_Adaptive::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Emc_Motion_Adaptive::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Emc_Motion_Adaptive_descriptor_;
}

const Emc_Motion_Adaptive& Emc_Motion_Adaptive::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_machinetalk_2fprotobuf_2fcanon_2eproto();
  return *default_instance_;
}

Emc_Motion_Adaptive* Emc_Motion_Adaptive::default_instance_ = NULL;

Emc_Motion_Adaptive* Emc_Motion_Adaptive::New() const {
  return new Emc_Motion_Adaptive;
}

void Emc_Motion_Adaptive::Clear() {
  status_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Emc_Motion_Adaptive::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.Emc_Motion_Adaptive)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bool status = 10;
      case 10: {
        if (tag == 80) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &status_)));
          set_has_status();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.Emc_Motion_Adaptive)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.Emc_Motion_Adaptive)
  return false;
#undef DO_
}

void Emc_Motion_Adaptive::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.Emc_Motion_Adaptive)
  // required bool status = 10;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(10, this->status(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.Emc_Motion_Adaptive)
}

::google::protobuf::uint8* Emc_Motion_Adaptive::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.Emc_Motion_Adaptive)
  // required bool status = 10;
  if (has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(10, this->status(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.Emc_Motion_Adaptive)
  return target;
}

int Emc_Motion_Adaptive::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bool status = 10;
    if (has_status()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Emc_Motion_Adaptive::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Emc_Motion_Adaptive* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Emc_Motion_Adaptive*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Emc_Motion_Adaptive::MergeFrom(const Emc_Motion_Adaptive& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_status()) {
      set_status(from.status());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Emc_Motion_Adaptive::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Emc_Motion_Adaptive::CopyFrom(const Emc_Motion_Adaptive& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Emc_Motion_Adaptive::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void Emc_Motion_Adaptive::Swap(Emc_Motion_Adaptive* other) {
  if (other != this) {
    std::swap(status_, other->status_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Emc_Motion_Adaptive::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Emc_Motion_Adaptive_descriptor_;
  metadata.reflection = Emc_Motion_Adaptive_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Emc_Operator_Display::kIdFieldNumber;
const int Emc_Operator_Display::kDisplayFieldNumber;
#endif  // !_MSC_VER

Emc_Operator_Display::Emc_Operator_Display()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.Emc_Operator_Display)
}

void Emc_Operator_Display::InitAsDefaultInstance() {
}

Emc_Operator_Display::Emc_Operator_Display(const Emc_Operator_Display& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.Emc_Operator_Display)
}

void Emc_Operator_Display::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  id_ = 0;
  display_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Emc_Operator_Display::~Emc_Operator_Display() {
  // @@protoc_insertion_point(destructor:pb.Emc_Operator_Display)
  SharedDtor();
}

void Emc_Operator_Display::SharedDtor() {
  if (display_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete display_;
  }
  if (this != default_instance_) {
  }
}

void Emc_Operator_Display::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Emc_Operator_Display::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Emc_Operator_Display_descriptor_;
}

const Emc_Operator_Display& Emc_Operator_Display::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_machinetalk_2fprotobuf_2fcanon_2eproto();
  return *default_instance_;
}

Emc_Operator_Display* Emc_Operator_Display::default_instance_ = NULL;

Emc_Operator_Display* Emc_Operator_Display::New() const {
  return new Emc_Operator_Display;
}

void Emc_Operator_Display::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    id_ = 0;
    if (has_display()) {
      if (display_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        display_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Emc_Operator_Display::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.Emc_Operator_Display)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 id = 10;
      case 10: {
        if (tag == 80) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(162)) goto parse_display;
        break;
      }

      // required string display = 20;
      case 20: {
        if (tag == 162) {
         parse_display:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_display()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->display().data(), this->display().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "display");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.Emc_Operator_Display)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.Emc_Operator_Display)
  return false;
#undef DO_
}

void Emc_Operator_Display::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.Emc_Operator_Display)
  // required int32 id = 10;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->id(), output);
  }

  // required string display = 20;
  if (has_display()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->display().data(), this->display().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "display");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      20, this->display(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.Emc_Operator_Display)
}

::google::protobuf::uint8* Emc_Operator_Display::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.Emc_Operator_Display)
  // required int32 id = 10;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->id(), target);
  }

  // required string display = 20;
  if (has_display()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->display().data(), this->display().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "display");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        20, this->display(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.Emc_Operator_Display)
  return target;
}

int Emc_Operator_Display::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 id = 10;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // required string display = 20;
    if (has_display()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->display());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Emc_Operator_Display::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Emc_Operator_Display* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Emc_Operator_Display*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Emc_Operator_Display::MergeFrom(const Emc_Operator_Display& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_display()) {
      set_display(from.display());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Emc_Operator_Display::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Emc_Operator_Display::CopyFrom(const Emc_Operator_Display& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Emc_Operator_Display::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void Emc_Operator_Display::Swap(Emc_Operator_Display* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(display_, other->display_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Emc_Operator_Display::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Emc_Operator_Display_descriptor_;
  metadata.reflection = Emc_Operator_Display_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Emc_Operator_Text::kIdFieldNumber;
const int Emc_Operator_Text::kTextFieldNumber;
#endif  // !_MSC_VER

Emc_Operator_Text::Emc_Operator_Text()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.Emc_Operator_Text)
}

void Emc_Operator_Text::InitAsDefaultInstance() {
}

Emc_Operator_Text::Emc_Operator_Text(const Emc_Operator_Text& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.Emc_Operator_Text)
}

void Emc_Operator_Text::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  id_ = 0;
  text_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Emc_Operator_Text::~Emc_Operator_Text() {
  // @@protoc_insertion_point(destructor:pb.Emc_Operator_Text)
  SharedDtor();
}

void Emc_Operator_Text::SharedDtor() {
  if (text_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete text_;
  }
  if (this != default_instance_) {
  }
}

void Emc_Operator_Text::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Emc_Operator_Text::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Emc_Operator_Text_descriptor_;
}

const Emc_Operator_Text& Emc_Operator_Text::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_machinetalk_2fprotobuf_2fcanon_2eproto();
  return *default_instance_;
}

Emc_Operator_Text* Emc_Operator_Text::default_instance_ = NULL;

Emc_Operator_Text* Emc_Operator_Text::New() const {
  return new Emc_Operator_Text;
}

void Emc_Operator_Text::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    id_ = 0;
    if (has_text()) {
      if (text_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        text_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Emc_Operator_Text::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.Emc_Operator_Text)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 id = 10;
      case 10: {
        if (tag == 80) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(162)) goto parse_text;
        break;
      }

      // required string text = 20;
      case 20: {
        if (tag == 162) {
         parse_text:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_text()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->text().data(), this->text().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "text");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.Emc_Operator_Text)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.Emc_Operator_Text)
  return false;
#undef DO_
}

void Emc_Operator_Text::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.Emc_Operator_Text)
  // required int32 id = 10;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->id(), output);
  }

  // required string text = 20;
  if (has_text()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->text().data(), this->text().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "text");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      20, this->text(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.Emc_Operator_Text)
}

::google::protobuf::uint8* Emc_Operator_Text::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.Emc_Operator_Text)
  // required int32 id = 10;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->id(), target);
  }

  // required string text = 20;
  if (has_text()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->text().data(), this->text().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "text");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        20, this->text(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.Emc_Operator_Text)
  return target;
}

int Emc_Operator_Text::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 id = 10;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // required string text = 20;
    if (has_text()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->text());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Emc_Operator_Text::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Emc_Operator_Text* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Emc_Operator_Text*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Emc_Operator_Text::MergeFrom(const Emc_Operator_Text& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_text()) {
      set_text(from.text());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Emc_Operator_Text::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Emc_Operator_Text::CopyFrom(const Emc_Operator_Text& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Emc_Operator_Text::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void Emc_Operator_Text::Swap(Emc_Operator_Text* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(text_, other->text_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Emc_Operator_Text::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Emc_Operator_Text_descriptor_;
  metadata.reflection = Emc_Operator_Text_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Emc_Operator_Error::kIdFieldNumber;
const int Emc_Operator_Error::kErrorFieldNumber;
#endif  // !_MSC_VER

Emc_Operator_Error::Emc_Operator_Error()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.Emc_Operator_Error)
}

void Emc_Operator_Error::InitAsDefaultInstance() {
}

Emc_Operator_Error::Emc_Operator_Error(const Emc_Operator_Error& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.Emc_Operator_Error)
}

void Emc_Operator_Error::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  id_ = 0;
  error_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Emc_Operator_Error::~Emc_Operator_Error() {
  // @@protoc_insertion_point(destructor:pb.Emc_Operator_Error)
  SharedDtor();
}

void Emc_Operator_Error::SharedDtor() {
  if (error_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete error_;
  }
  if (this != default_instance_) {
  }
}

void Emc_Operator_Error::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Emc_Operator_Error::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Emc_Operator_Error_descriptor_;
}

const Emc_Operator_Error& Emc_Operator_Error::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_machinetalk_2fprotobuf_2fcanon_2eproto();
  return *default_instance_;
}

Emc_Operator_Error* Emc_Operator_Error::default_instance_ = NULL;

Emc_Operator_Error* Emc_Operator_Error::New() const {
  return new Emc_Operator_Error;
}

void Emc_Operator_Error::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    id_ = 0;
    if (has_error()) {
      if (error_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        error_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Emc_Operator_Error::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.Emc_Operator_Error)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 id = 10;
      case 10: {
        if (tag == 80) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(162)) goto parse_error;
        break;
      }

      // required string error = 20;
      case 20: {
        if (tag == 162) {
         parse_error:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_error()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->error().data(), this->error().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "error");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.Emc_Operator_Error)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.Emc_Operator_Error)
  return false;
#undef DO_
}

void Emc_Operator_Error::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.Emc_Operator_Error)
  // required int32 id = 10;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->id(), output);
  }

  // required string error = 20;
  if (has_error()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->error().data(), this->error().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "error");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      20, this->error(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.Emc_Operator_Error)
}

::google::protobuf::uint8* Emc_Operator_Error::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.Emc_Operator_Error)
  // required int32 id = 10;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->id(), target);
  }

  // required string error = 20;
  if (has_error()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->error().data(), this->error().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "error");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        20, this->error(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.Emc_Operator_Error)
  return target;
}

int Emc_Operator_Error::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 id = 10;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // required string error = 20;
    if (has_error()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->error());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Emc_Operator_Error::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Emc_Operator_Error* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Emc_Operator_Error*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Emc_Operator_Error::MergeFrom(const Emc_Operator_Error& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_error()) {
      set_error(from.error());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Emc_Operator_Error::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Emc_Operator_Error::CopyFrom(const Emc_Operator_Error& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Emc_Operator_Error::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void Emc_Operator_Error::Swap(Emc_Operator_Error* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(error_, other->error_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Emc_Operator_Error::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Emc_Operator_Error_descriptor_;
  metadata.reflection = Emc_Operator_Error_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Emc_Motion_Set_Dout::kIndexFieldNumber;
const int Emc_Motion_Set_Dout::kStartFieldNumber;
const int Emc_Motion_Set_Dout::kEndFieldNumber;
const int Emc_Motion_Set_Dout::kNowFieldNumber;
#endif  // !_MSC_VER

Emc_Motion_Set_Dout::Emc_Motion_Set_Dout()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.Emc_Motion_Set_Dout)
}

void Emc_Motion_Set_Dout::InitAsDefaultInstance() {
}

Emc_Motion_Set_Dout::Emc_Motion_Set_Dout(const Emc_Motion_Set_Dout& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.Emc_Motion_Set_Dout)
}

void Emc_Motion_Set_Dout::SharedCtor() {
  _cached_size_ = 0;
  index_ = 0u;
  start_ = false;
  end_ = false;
  now_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Emc_Motion_Set_Dout::~Emc_Motion_Set_Dout() {
  // @@protoc_insertion_point(destructor:pb.Emc_Motion_Set_Dout)
  SharedDtor();
}

void Emc_Motion_Set_Dout::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Emc_Motion_Set_Dout::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Emc_Motion_Set_Dout::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Emc_Motion_Set_Dout_descriptor_;
}

const Emc_Motion_Set_Dout& Emc_Motion_Set_Dout::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_machinetalk_2fprotobuf_2fcanon_2eproto();
  return *default_instance_;
}

Emc_Motion_Set_Dout* Emc_Motion_Set_Dout::default_instance_ = NULL;

Emc_Motion_Set_Dout* Emc_Motion_Set_Dout::New() const {
  return new Emc_Motion_Set_Dout;
}

void Emc_Motion_Set_Dout::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<Emc_Motion_Set_Dout*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(index_, now_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Emc_Motion_Set_Dout::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.Emc_Motion_Set_Dout)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 index = 10;
      case 10: {
        if (tag == 80) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &index_)));
          set_has_index();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(160)) goto parse_start;
        break;
      }

      // required bool start = 20;
      case 20: {
        if (tag == 160) {
         parse_start:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &start_)));
          set_has_start();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(240)) goto parse_end;
        break;
      }

      // required bool end = 30;
      case 30: {
        if (tag == 240) {
         parse_end:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &end_)));
          set_has_end();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(320)) goto parse_now;
        break;
      }

      // required bool now = 40;
      case 40: {
        if (tag == 320) {
         parse_now:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &now_)));
          set_has_now();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.Emc_Motion_Set_Dout)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.Emc_Motion_Set_Dout)
  return false;
#undef DO_
}

void Emc_Motion_Set_Dout::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.Emc_Motion_Set_Dout)
  // required uint32 index = 10;
  if (has_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->index(), output);
  }

  // required bool start = 20;
  if (has_start()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(20, this->start(), output);
  }

  // required bool end = 30;
  if (has_end()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(30, this->end(), output);
  }

  // required bool now = 40;
  if (has_now()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(40, this->now(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.Emc_Motion_Set_Dout)
}

::google::protobuf::uint8* Emc_Motion_Set_Dout::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.Emc_Motion_Set_Dout)
  // required uint32 index = 10;
  if (has_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->index(), target);
  }

  // required bool start = 20;
  if (has_start()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(20, this->start(), target);
  }

  // required bool end = 30;
  if (has_end()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(30, this->end(), target);
  }

  // required bool now = 40;
  if (has_now()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(40, this->now(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.Emc_Motion_Set_Dout)
  return target;
}

int Emc_Motion_Set_Dout::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 index = 10;
    if (has_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->index());
    }

    // required bool start = 20;
    if (has_start()) {
      total_size += 2 + 1;
    }

    // required bool end = 30;
    if (has_end()) {
      total_size += 2 + 1;
    }

    // required bool now = 40;
    if (has_now()) {
      total_size += 2 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Emc_Motion_Set_Dout::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Emc_Motion_Set_Dout* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Emc_Motion_Set_Dout*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Emc_Motion_Set_Dout::MergeFrom(const Emc_Motion_Set_Dout& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_index()) {
      set_index(from.index());
    }
    if (from.has_start()) {
      set_start(from.start());
    }
    if (from.has_end()) {
      set_end(from.end());
    }
    if (from.has_now()) {
      set_now(from.now());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Emc_Motion_Set_Dout::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Emc_Motion_Set_Dout::CopyFrom(const Emc_Motion_Set_Dout& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Emc_Motion_Set_Dout::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void Emc_Motion_Set_Dout::Swap(Emc_Motion_Set_Dout* other) {
  if (other != this) {
    std::swap(index_, other->index_);
    std::swap(start_, other->start_);
    std::swap(end_, other->end_);
    std::swap(now_, other->now_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Emc_Motion_Set_Dout::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Emc_Motion_Set_Dout_descriptor_;
  metadata.reflection = Emc_Motion_Set_Dout_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Emc_Motion_Set_Aout::kIndexFieldNumber;
const int Emc_Motion_Set_Aout::kStartFieldNumber;
const int Emc_Motion_Set_Aout::kEndFieldNumber;
const int Emc_Motion_Set_Aout::kNowFieldNumber;
#endif  // !_MSC_VER

Emc_Motion_Set_Aout::Emc_Motion_Set_Aout()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.Emc_Motion_Set_Aout)
}

void Emc_Motion_Set_Aout::InitAsDefaultInstance() {
}

Emc_Motion_Set_Aout::Emc_Motion_Set_Aout(const Emc_Motion_Set_Aout& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.Emc_Motion_Set_Aout)
}

void Emc_Motion_Set_Aout::SharedCtor() {
  _cached_size_ = 0;
  index_ = 0u;
  start_ = 0;
  end_ = 0;
  now_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Emc_Motion_Set_Aout::~Emc_Motion_Set_Aout() {
  // @@protoc_insertion_point(destructor:pb.Emc_Motion_Set_Aout)
  SharedDtor();
}

void Emc_Motion_Set_Aout::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Emc_Motion_Set_Aout::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Emc_Motion_Set_Aout::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Emc_Motion_Set_Aout_descriptor_;
}

const Emc_Motion_Set_Aout& Emc_Motion_Set_Aout::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_machinetalk_2fprotobuf_2fcanon_2eproto();
  return *default_instance_;
}

Emc_Motion_Set_Aout* Emc_Motion_Set_Aout::default_instance_ = NULL;

Emc_Motion_Set_Aout* Emc_Motion_Set_Aout::New() const {
  return new Emc_Motion_Set_Aout;
}

void Emc_Motion_Set_Aout::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<Emc_Motion_Set_Aout*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(start_, end_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Emc_Motion_Set_Aout::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.Emc_Motion_Set_Aout)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 index = 10;
      case 10: {
        if (tag == 80) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &index_)));
          set_has_index();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(161)) goto parse_start;
        break;
      }

      // required double start = 20;
      case 20: {
        if (tag == 161) {
         parse_start:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &start_)));
          set_has_start();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(241)) goto parse_end;
        break;
      }

      // required double end = 30;
      case 30: {
        if (tag == 241) {
         parse_end:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &end_)));
          set_has_end();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(320)) goto parse_now;
        break;
      }

      // required bool now = 40;
      case 40: {
        if (tag == 320) {
         parse_now:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &now_)));
          set_has_now();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.Emc_Motion_Set_Aout)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.Emc_Motion_Set_Aout)
  return false;
#undef DO_
}

void Emc_Motion_Set_Aout::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.Emc_Motion_Set_Aout)
  // required uint32 index = 10;
  if (has_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->index(), output);
  }

  // required double start = 20;
  if (has_start()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(20, this->start(), output);
  }

  // required double end = 30;
  if (has_end()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(30, this->end(), output);
  }

  // required bool now = 40;
  if (has_now()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(40, this->now(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.Emc_Motion_Set_Aout)
}

::google::protobuf::uint8* Emc_Motion_Set_Aout::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.Emc_Motion_Set_Aout)
  // required uint32 index = 10;
  if (has_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->index(), target);
  }

  // required double start = 20;
  if (has_start()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(20, this->start(), target);
  }

  // required double end = 30;
  if (has_end()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(30, this->end(), target);
  }

  // required bool now = 40;
  if (has_now()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(40, this->now(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.Emc_Motion_Set_Aout)
  return target;
}

int Emc_Motion_Set_Aout::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 index = 10;
    if (has_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->index());
    }

    // required double start = 20;
    if (has_start()) {
      total_size += 2 + 8;
    }

    // required double end = 30;
    if (has_end()) {
      total_size += 2 + 8;
    }

    // required bool now = 40;
    if (has_now()) {
      total_size += 2 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Emc_Motion_Set_Aout::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Emc_Motion_Set_Aout* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Emc_Motion_Set_Aout*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Emc_Motion_Set_Aout::MergeFrom(const Emc_Motion_Set_Aout& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_index()) {
      set_index(from.index());
    }
    if (from.has_start()) {
      set_start(from.start());
    }
    if (from.has_end()) {
      set_end(from.end());
    }
    if (from.has_now()) {
      set_now(from.now());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Emc_Motion_Set_Aout::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Emc_Motion_Set_Aout::CopyFrom(const Emc_Motion_Set_Aout& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Emc_Motion_Set_Aout::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void Emc_Motion_Set_Aout::Swap(Emc_Motion_Set_Aout* other) {
  if (other != this) {
    std::swap(index_, other->index_);
    std::swap(start_, other->start_);
    std::swap(end_, other->end_);
    std::swap(now_, other->now_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Emc_Motion_Set_Aout::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Emc_Motion_Set_Aout_descriptor_;
  metadata.reflection = Emc_Motion_Set_Aout_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Emc_Aux_Input_Wait::kIndexFieldNumber;
const int Emc_Aux_Input_Wait::kInputTypeFieldNumber;
const int Emc_Aux_Input_Wait::kWaitTypeFieldNumber;
const int Emc_Aux_Input_Wait::kTimeoutFieldNumber;
#endif  // !_MSC_VER

Emc_Aux_Input_Wait::Emc_Aux_Input_Wait()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.Emc_Aux_Input_Wait)
}

void Emc_Aux_Input_Wait::InitAsDefaultInstance() {
}

Emc_Aux_Input_Wait::Emc_Aux_Input_Wait(const Emc_Aux_Input_Wait& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.Emc_Aux_Input_Wait)
}

void Emc_Aux_Input_Wait::SharedCtor() {
  _cached_size_ = 0;
  index_ = 0u;
  input_type_ = 0;
  wait_type_ = 0;
  timeout_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Emc_Aux_Input_Wait::~Emc_Aux_Input_Wait() {
  // @@protoc_insertion_point(destructor:pb.Emc_Aux_Input_Wait)
  SharedDtor();
}

void Emc_Aux_Input_Wait::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Emc_Aux_Input_Wait::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Emc_Aux_Input_Wait::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Emc_Aux_Input_Wait_descriptor_;
}

const Emc_Aux_Input_Wait& Emc_Aux_Input_Wait::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_machinetalk_2fprotobuf_2fcanon_2eproto();
  return *default_instance_;
}

Emc_Aux_Input_Wait* Emc_Aux_Input_Wait::default_instance_ = NULL;

Emc_Aux_Input_Wait* Emc_Aux_Input_Wait::New() const {
  return new Emc_Aux_Input_Wait;
}

void Emc_Aux_Input_Wait::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<Emc_Aux_Input_Wait*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(index_, wait_type_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Emc_Aux_Input_Wait::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.Emc_Aux_Input_Wait)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 index = 10;
      case 10: {
        if (tag == 80) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &index_)));
          set_has_index();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(160)) goto parse_input_type;
        break;
      }

      // required .pb.InputType input_type = 20;
      case 20: {
        if (tag == 160) {
         parse_input_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::pb::InputType_IsValid(value)) {
            set_input_type(static_cast< ::pb::InputType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(20, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(240)) goto parse_wait_type;
        break;
      }

      // required .pb.WaitType wait_type = 30;
      case 30: {
        if (tag == 240) {
         parse_wait_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::pb::WaitType_IsValid(value)) {
            set_wait_type(static_cast< ::pb::WaitType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(30, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(321)) goto parse_timeout;
        break;
      }

      // required double timeout = 40;
      case 40: {
        if (tag == 321) {
         parse_timeout:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &timeout_)));
          set_has_timeout();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.Emc_Aux_Input_Wait)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.Emc_Aux_Input_Wait)
  return false;
#undef DO_
}

void Emc_Aux_Input_Wait::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.Emc_Aux_Input_Wait)
  // required uint32 index = 10;
  if (has_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->index(), output);
  }

  // required .pb.InputType input_type = 20;
  if (has_input_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      20, this->input_type(), output);
  }

  // required .pb.WaitType wait_type = 30;
  if (has_wait_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      30, this->wait_type(), output);
  }

  // required double timeout = 40;
  if (has_timeout()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(40, this->timeout(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.Emc_Aux_Input_Wait)
}

::google::protobuf::uint8* Emc_Aux_Input_Wait::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.Emc_Aux_Input_Wait)
  // required uint32 index = 10;
  if (has_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->index(), target);
  }

  // required .pb.InputType input_type = 20;
  if (has_input_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      20, this->input_type(), target);
  }

  // required .pb.WaitType wait_type = 30;
  if (has_wait_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      30, this->wait_type(), target);
  }

  // required double timeout = 40;
  if (has_timeout()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(40, this->timeout(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.Emc_Aux_Input_Wait)
  return target;
}

int Emc_Aux_Input_Wait::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 index = 10;
    if (has_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->index());
    }

    // required .pb.InputType input_type = 20;
    if (has_input_type()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->input_type());
    }

    // required .pb.WaitType wait_type = 30;
    if (has_wait_type()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->wait_type());
    }

    // required double timeout = 40;
    if (has_timeout()) {
      total_size += 2 + 8;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Emc_Aux_Input_Wait::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Emc_Aux_Input_Wait* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Emc_Aux_Input_Wait*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Emc_Aux_Input_Wait::MergeFrom(const Emc_Aux_Input_Wait& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_index()) {
      set_index(from.index());
    }
    if (from.has_input_type()) {
      set_input_type(from.input_type());
    }
    if (from.has_wait_type()) {
      set_wait_type(from.wait_type());
    }
    if (from.has_timeout()) {
      set_timeout(from.timeout());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Emc_Aux_Input_Wait::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Emc_Aux_Input_Wait::CopyFrom(const Emc_Aux_Input_Wait& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Emc_Aux_Input_Wait::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void Emc_Aux_Input_Wait::Swap(Emc_Aux_Input_Wait* other) {
  if (other != this) {
    std::swap(index_, other->index_);
    std::swap(input_type_, other->input_type_);
    std::swap(wait_type_, other->wait_type_);
    std::swap(timeout_, other->timeout_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Emc_Aux_Input_Wait::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Emc_Aux_Input_Wait_descriptor_;
  metadata.reflection = Emc_Aux_Input_Wait_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Emc_Exec_Plugin_Ca1l::kCallFieldNumber;
#endif  // !_MSC_VER

Emc_Exec_Plugin_Ca1l::Emc_Exec_Plugin_Ca1l()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.Emc_Exec_Plugin_Ca1l)
}

void Emc_Exec_Plugin_Ca1l::InitAsDefaultInstance() {
}

Emc_Exec_Plugin_Ca1l::Emc_Exec_Plugin_Ca1l(const Emc_Exec_Plugin_Ca1l& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.Emc_Exec_Plugin_Ca1l)
}

void Emc_Exec_Plugin_Ca1l::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  call_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Emc_Exec_Plugin_Ca1l::~Emc_Exec_Plugin_Ca1l() {
  // @@protoc_insertion_point(destructor:pb.Emc_Exec_Plugin_Ca1l)
  SharedDtor();
}

void Emc_Exec_Plugin_Ca1l::SharedDtor() {
  if (call_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete call_;
  }
  if (this != default_instance_) {
  }
}

void Emc_Exec_Plugin_Ca1l::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Emc_Exec_Plugin_Ca1l::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Emc_Exec_Plugin_Ca1l_descriptor_;
}

const Emc_Exec_Plugin_Ca1l& Emc_Exec_Plugin_Ca1l::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_machinetalk_2fprotobuf_2fcanon_2eproto();
  return *default_instance_;
}

Emc_Exec_Plugin_Ca1l* Emc_Exec_Plugin_Ca1l::default_instance_ = NULL;

Emc_Exec_Plugin_Ca1l* Emc_Exec_Plugin_Ca1l::New() const {
  return new Emc_Exec_Plugin_Ca1l;
}

void Emc_Exec_Plugin_Ca1l::Clear() {
  if (has_call()) {
    if (call_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
      call_->clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Emc_Exec_Plugin_Ca1l::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.Emc_Exec_Plugin_Ca1l)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bytes call = 20;
      case 20: {
        if (tag == 162) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_call()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.Emc_Exec_Plugin_Ca1l)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.Emc_Exec_Plugin_Ca1l)
  return false;
#undef DO_
}

void Emc_Exec_Plugin_Ca1l::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.Emc_Exec_Plugin_Ca1l)
  // required bytes call = 20;
  if (has_call()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      20, this->call(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.Emc_Exec_Plugin_Ca1l)
}

::google::protobuf::uint8* Emc_Exec_Plugin_Ca1l::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.Emc_Exec_Plugin_Ca1l)
  // required bytes call = 20;
  if (has_call()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        20, this->call(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.Emc_Exec_Plugin_Ca1l)
  return target;
}

int Emc_Exec_Plugin_Ca1l::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bytes call = 20;
    if (has_call()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->call());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Emc_Exec_Plugin_Ca1l::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Emc_Exec_Plugin_Ca1l* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Emc_Exec_Plugin_Ca1l*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Emc_Exec_Plugin_Ca1l::MergeFrom(const Emc_Exec_Plugin_Ca1l& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_call()) {
      set_call(from.call());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Emc_Exec_Plugin_Ca1l::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Emc_Exec_Plugin_Ca1l::CopyFrom(const Emc_Exec_Plugin_Ca1l& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Emc_Exec_Plugin_Ca1l::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void Emc_Exec_Plugin_Ca1l::Swap(Emc_Exec_Plugin_Ca1l* other) {
  if (other != this) {
    std::swap(call_, other->call_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Emc_Exec_Plugin_Ca1l::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Emc_Exec_Plugin_Ca1l_descriptor_;
  metadata.reflection = Emc_Exec_Plugin_Ca1l_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Emc_Io_Plugin_Call::kCallFieldNumber;
#endif  // !_MSC_VER

Emc_Io_Plugin_Call::Emc_Io_Plugin_Call()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.Emc_Io_Plugin_Call)
}

void Emc_Io_Plugin_Call::InitAsDefaultInstance() {
}

Emc_Io_Plugin_Call::Emc_Io_Plugin_Call(const Emc_Io_Plugin_Call& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.Emc_Io_Plugin_Call)
}

void Emc_Io_Plugin_Call::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  call_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Emc_Io_Plugin_Call::~Emc_Io_Plugin_Call() {
  // @@protoc_insertion_point(destructor:pb.Emc_Io_Plugin_Call)
  SharedDtor();
}

void Emc_Io_Plugin_Call::SharedDtor() {
  if (call_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete call_;
  }
  if (this != default_instance_) {
  }
}

void Emc_Io_Plugin_Call::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Emc_Io_Plugin_Call::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Emc_Io_Plugin_Call_descriptor_;
}

const Emc_Io_Plugin_Call& Emc_Io_Plugin_Call::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_machinetalk_2fprotobuf_2fcanon_2eproto();
  return *default_instance_;
}

Emc_Io_Plugin_Call* Emc_Io_Plugin_Call::default_instance_ = NULL;

Emc_Io_Plugin_Call* Emc_Io_Plugin_Call::New() const {
  return new Emc_Io_Plugin_Call;
}

void Emc_Io_Plugin_Call::Clear() {
  if (has_call()) {
    if (call_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
      call_->clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Emc_Io_Plugin_Call::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.Emc_Io_Plugin_Call)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bytes call = 20;
      case 20: {
        if (tag == 162) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_call()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.Emc_Io_Plugin_Call)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.Emc_Io_Plugin_Call)
  return false;
#undef DO_
}

void Emc_Io_Plugin_Call::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.Emc_Io_Plugin_Call)
  // required bytes call = 20;
  if (has_call()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      20, this->call(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.Emc_Io_Plugin_Call)
}

::google::protobuf::uint8* Emc_Io_Plugin_Call::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.Emc_Io_Plugin_Call)
  // required bytes call = 20;
  if (has_call()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        20, this->call(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.Emc_Io_Plugin_Call)
  return target;
}

int Emc_Io_Plugin_Call::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bytes call = 20;
    if (has_call()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->call());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Emc_Io_Plugin_Call::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Emc_Io_Plugin_Call* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Emc_Io_Plugin_Call*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Emc_Io_Plugin_Call::MergeFrom(const Emc_Io_Plugin_Call& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_call()) {
      set_call(from.call());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Emc_Io_Plugin_Call::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Emc_Io_Plugin_Call::CopyFrom(const Emc_Io_Plugin_Call& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Emc_Io_Plugin_Call::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void Emc_Io_Plugin_Call::Swap(Emc_Io_Plugin_Call* other) {
  if (other != this) {
    std::swap(call_, other->call_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Emc_Io_Plugin_Call::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Emc_Io_Plugin_Call_descriptor_;
  metadata.reflection = Emc_Io_Plugin_Call_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace pb

// @@protoc_insertion_point(global_scope)
