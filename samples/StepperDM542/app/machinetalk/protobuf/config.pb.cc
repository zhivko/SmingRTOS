// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: machinetalk/protobuf/config.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "machinetalk/protobuf/config.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace pb {

namespace {

const ::google::protobuf::Descriptor* File_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  File_reflection_ = NULL;
const ::google::protobuf::Descriptor* Application_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Application_reflection_ = NULL;
const ::google::protobuf::Descriptor* StdoutLine_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  StdoutLine_reflection_ = NULL;
const ::google::protobuf::Descriptor* MachineInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MachineInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* Launcher_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Launcher_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* ApplicationType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* FileContent_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_machinetalk_2fprotobuf_2fconfig_2eproto() {
  protobuf_AddDesc_machinetalk_2fprotobuf_2fconfig_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "machinetalk/protobuf/config.proto");
  GOOGLE_CHECK(file != NULL);
  File_descriptor_ = file->message_type(0);
  static const int File_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(File, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(File, encoding_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(File, blob_),
  };
  File_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      File_descriptor_,
      File::default_instance_,
      File_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(File, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(File, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(File));
  Application_descriptor_ = file->message_type(1);
  static const int Application_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Application, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Application, description_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Application, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Application, weburi_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Application, file_),
  };
  Application_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Application_descriptor_,
      Application::default_instance_,
      Application_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Application, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Application, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Application));
  StdoutLine_descriptor_ = file->message_type(2);
  static const int StdoutLine_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StdoutLine, index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StdoutLine, line_),
  };
  StdoutLine_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      StdoutLine_descriptor_,
      StdoutLine::default_instance_,
      StdoutLine_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StdoutLine, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StdoutLine, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(StdoutLine));
  MachineInfo_descriptor_ = file->message_type(3);
  static const int MachineInfo_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MachineInfo, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MachineInfo, manufacturer_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MachineInfo, model_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MachineInfo, variant_),
  };
  MachineInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MachineInfo_descriptor_,
      MachineInfo::default_instance_,
      MachineInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MachineInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MachineInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MachineInfo));
  Launcher_descriptor_ = file->message_type(4);
  static const int Launcher_offsets_[12] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Launcher, index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Launcher, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Launcher, description_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Launcher, image_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Launcher, info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Launcher, running_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Launcher, terminating_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Launcher, command_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Launcher, shell_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Launcher, output_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Launcher, returncode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Launcher, workdir_),
  };
  Launcher_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Launcher_descriptor_,
      Launcher::default_instance_,
      Launcher_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Launcher, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Launcher, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Launcher));
  ApplicationType_descriptor_ = file->enum_type(0);
  FileContent_descriptor_ = file->enum_type(1);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_machinetalk_2fprotobuf_2fconfig_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    File_descriptor_, &File::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Application_descriptor_, &Application::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    StdoutLine_descriptor_, &StdoutLine::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MachineInfo_descriptor_, &MachineInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Launcher_descriptor_, &Launcher::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_machinetalk_2fprotobuf_2fconfig_2eproto() {
  delete File::default_instance_;
  delete File_reflection_;
  delete Application::default_instance_;
  delete Application_reflection_;
  delete StdoutLine::default_instance_;
  delete StdoutLine_reflection_;
  delete MachineInfo::default_instance_;
  delete MachineInfo_reflection_;
  delete Launcher::default_instance_;
  delete Launcher_reflection_;
}

void protobuf_AddDesc_machinetalk_2fprotobuf_2fconfig_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::protobuf_AddDesc_machinetalk_2fprotobuf_2fnanopb_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n!machinetalk/protobuf/config.proto\022\002pb\032"
    "!machinetalk/protobuf/nanopb.proto\"M\n\004Fi"
    "le\022\014\n\004name\030\001 \002(\t\022!\n\010encoding\030\002 \002(\0162\017.pb."
    "FileContent\022\014\n\004blob\030\003 \001(\014:\006\222\?\003H\310\001\"\203\001\n\013Ap"
    "plication\022\014\n\004name\030\001 \002(\t\022\023\n\013description\030\002"
    " \001(\t\022!\n\004type\030\003 \001(\0162\023.pb.ApplicationType\022"
    "\016\n\006weburi\030\004 \001(\t\022\026\n\004file\030\005 \003(\0132\010.pb.File:"
    "\006\222\?\003H\311\001\"1\n\nStdoutLine\022\r\n\005index\030\001 \002(\005\022\014\n\004"
    "line\030\002 \001(\t:\006\222\?\003H\312\001\"Y\n\013MachineInfo\022\014\n\004typ"
    "e\030\001 \001(\t\022\024\n\014manufacturer\030\002 \001(\t\022\r\n\005model\030\003"
    " \001(\t\022\017\n\007variant\030\004 \001(\t:\006\222\?\003H\313\001\"\207\002\n\010Launch"
    "er\022\r\n\005index\030\001 \002(\005\022\014\n\004name\030\002 \001(\t\022\023\n\013descr"
    "iption\030\003 \001(\t\022\027\n\005image\030\004 \001(\0132\010.pb.File\022\035\n"
    "\004info\030\005 \001(\0132\017.pb.MachineInfo\022\017\n\007running\030"
    "\006 \001(\010\022\023\n\013terminating\030\007 \001(\010\022\017\n\007command\030\010 "
    "\001(\t\022\r\n\005shell\030\t \001(\010\022\036\n\006output\030\n \003(\0132\016.pb."
    "StdoutLine\022\022\n\nreturncode\030\013 \001(\005\022\017\n\007workdi"
    "r\030\014 \001(\t:\006\222\?\003H\314\001*<\n\017ApplicationType\022\013\n\007QT"
    "5_QML\020\001\022\014\n\010GLADEVCP\020\002\022\016\n\nJAVASCRIPT\020\003*&\n"
    "\013FileContent\022\r\n\tCLEARTEXT\020\001\022\010\n\004ZLIB\020\002", 797);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "machinetalk/protobuf/config.proto", &protobuf_RegisterTypes);
  File::default_instance_ = new File();
  Application::default_instance_ = new Application();
  StdoutLine::default_instance_ = new StdoutLine();
  MachineInfo::default_instance_ = new MachineInfo();
  Launcher::default_instance_ = new Launcher();
  File::default_instance_->InitAsDefaultInstance();
  Application::default_instance_->InitAsDefaultInstance();
  StdoutLine::default_instance_->InitAsDefaultInstance();
  MachineInfo::default_instance_->InitAsDefaultInstance();
  Launcher::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_machinetalk_2fprotobuf_2fconfig_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_machinetalk_2fprotobuf_2fconfig_2eproto {
  StaticDescriptorInitializer_machinetalk_2fprotobuf_2fconfig_2eproto() {
    protobuf_AddDesc_machinetalk_2fprotobuf_2fconfig_2eproto();
  }
} static_descriptor_initializer_machinetalk_2fprotobuf_2fconfig_2eproto_;
const ::google::protobuf::EnumDescriptor* ApplicationType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ApplicationType_descriptor_;
}
bool ApplicationType_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* FileContent_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FileContent_descriptor_;
}
bool FileContent_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
const int File::kNameFieldNumber;
const int File::kEncodingFieldNumber;
const int File::kBlobFieldNumber;
#endif  // !_MSC_VER

File::File()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.File)
}

void File::InitAsDefaultInstance() {
}

File::File(const File& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.File)
}

void File::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  encoding_ = 1;
  blob_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

File::~File() {
  // @@protoc_insertion_point(destructor:pb.File)
  SharedDtor();
}

void File::SharedDtor() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (blob_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete blob_;
  }
  if (this != default_instance_) {
  }
}

void File::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* File::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return File_descriptor_;
}

const File& File::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_machinetalk_2fprotobuf_2fconfig_2eproto();
  return *default_instance_;
}

File* File::default_instance_ = NULL;

File* File::New() const {
  return new File;
}

void File::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        name_->clear();
      }
    }
    encoding_ = 1;
    if (has_blob()) {
      if (blob_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        blob_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool File::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.File)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_encoding;
        break;
      }

      // required .pb.FileContent encoding = 2;
      case 2: {
        if (tag == 16) {
         parse_encoding:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::pb::FileContent_IsValid(value)) {
            set_encoding(static_cast< ::pb::FileContent >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_blob;
        break;
      }

      // optional bytes blob = 3;
      case 3: {
        if (tag == 26) {
         parse_blob:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_blob()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.File)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.File)
  return false;
#undef DO_
}

void File::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.File)
  // required string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // required .pb.FileContent encoding = 2;
  if (has_encoding()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->encoding(), output);
  }

  // optional bytes blob = 3;
  if (has_blob()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->blob(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.File)
}

::google::protobuf::uint8* File::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.File)
  // required string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // required .pb.FileContent encoding = 2;
  if (has_encoding()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->encoding(), target);
  }

  // optional bytes blob = 3;
  if (has_blob()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->blob(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.File)
  return target;
}

int File::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // required .pb.FileContent encoding = 2;
    if (has_encoding()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->encoding());
    }

    // optional bytes blob = 3;
    if (has_blob()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->blob());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void File::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const File* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const File*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void File::MergeFrom(const File& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_encoding()) {
      set_encoding(from.encoding());
    }
    if (from.has_blob()) {
      set_blob(from.blob());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void File::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void File::CopyFrom(const File& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool File::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void File::Swap(File* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(encoding_, other->encoding_);
    std::swap(blob_, other->blob_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata File::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = File_descriptor_;
  metadata.reflection = File_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Application::kNameFieldNumber;
const int Application::kDescriptionFieldNumber;
const int Application::kTypeFieldNumber;
const int Application::kWeburiFieldNumber;
const int Application::kFileFieldNumber;
#endif  // !_MSC_VER

Application::Application()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.Application)
}

void Application::InitAsDefaultInstance() {
}

Application::Application(const Application& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.Application)
}

void Application::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  description_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  type_ = 1;
  weburi_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Application::~Application() {
  // @@protoc_insertion_point(destructor:pb.Application)
  SharedDtor();
}

void Application::SharedDtor() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (description_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete description_;
  }
  if (weburi_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete weburi_;
  }
  if (this != default_instance_) {
  }
}

void Application::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Application::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Application_descriptor_;
}

const Application& Application::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_machinetalk_2fprotobuf_2fconfig_2eproto();
  return *default_instance_;
}

Application* Application::default_instance_ = NULL;

Application* Application::New() const {
  return new Application;
}

void Application::Clear() {
  if (_has_bits_[0 / 32] & 15) {
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        name_->clear();
      }
    }
    if (has_description()) {
      if (description_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        description_->clear();
      }
    }
    type_ = 1;
    if (has_weburi()) {
      if (weburi_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        weburi_->clear();
      }
    }
  }
  file_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Application::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.Application)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_description;
        break;
      }

      // optional string description = 2;
      case 2: {
        if (tag == 18) {
         parse_description:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_description()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->description().data(), this->description().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "description");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_type;
        break;
      }

      // optional .pb.ApplicationType type = 3;
      case 3: {
        if (tag == 24) {
         parse_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::pb::ApplicationType_IsValid(value)) {
            set_type(static_cast< ::pb::ApplicationType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_weburi;
        break;
      }

      // optional string weburi = 4;
      case 4: {
        if (tag == 34) {
         parse_weburi:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_weburi()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->weburi().data(), this->weburi().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "weburi");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_file;
        break;
      }

      // repeated .pb.File file = 5;
      case 5: {
        if (tag == 42) {
         parse_file:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_file()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_file;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.Application)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.Application)
  return false;
#undef DO_
}

void Application::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.Application)
  // required string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // optional string description = 2;
  if (has_description()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->description().data(), this->description().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "description");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->description(), output);
  }

  // optional .pb.ApplicationType type = 3;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->type(), output);
  }

  // optional string weburi = 4;
  if (has_weburi()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->weburi().data(), this->weburi().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "weburi");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->weburi(), output);
  }

  // repeated .pb.File file = 5;
  for (int i = 0; i < this->file_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->file(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.Application)
}

::google::protobuf::uint8* Application::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.Application)
  // required string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // optional string description = 2;
  if (has_description()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->description().data(), this->description().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "description");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->description(), target);
  }

  // optional .pb.ApplicationType type = 3;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->type(), target);
  }

  // optional string weburi = 4;
  if (has_weburi()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->weburi().data(), this->weburi().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "weburi");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->weburi(), target);
  }

  // repeated .pb.File file = 5;
  for (int i = 0; i < this->file_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->file(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.Application)
  return target;
}

int Application::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional string description = 2;
    if (has_description()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->description());
    }

    // optional .pb.ApplicationType type = 3;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // optional string weburi = 4;
    if (has_weburi()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->weburi());
    }

  }
  // repeated .pb.File file = 5;
  total_size += 1 * this->file_size();
  for (int i = 0; i < this->file_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->file(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Application::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Application* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Application*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Application::MergeFrom(const Application& from) {
  GOOGLE_CHECK_NE(&from, this);
  file_.MergeFrom(from.file_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_description()) {
      set_description(from.description());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_weburi()) {
      set_weburi(from.weburi());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Application::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Application::CopyFrom(const Application& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Application::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->file())) return false;
  return true;
}

void Application::Swap(Application* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(description_, other->description_);
    std::swap(type_, other->type_);
    std::swap(weburi_, other->weburi_);
    file_.Swap(&other->file_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Application::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Application_descriptor_;
  metadata.reflection = Application_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int StdoutLine::kIndexFieldNumber;
const int StdoutLine::kLineFieldNumber;
#endif  // !_MSC_VER

StdoutLine::StdoutLine()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.StdoutLine)
}

void StdoutLine::InitAsDefaultInstance() {
}

StdoutLine::StdoutLine(const StdoutLine& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.StdoutLine)
}

void StdoutLine::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  index_ = 0;
  line_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

StdoutLine::~StdoutLine() {
  // @@protoc_insertion_point(destructor:pb.StdoutLine)
  SharedDtor();
}

void StdoutLine::SharedDtor() {
  if (line_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete line_;
  }
  if (this != default_instance_) {
  }
}

void StdoutLine::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* StdoutLine::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return StdoutLine_descriptor_;
}

const StdoutLine& StdoutLine::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_machinetalk_2fprotobuf_2fconfig_2eproto();
  return *default_instance_;
}

StdoutLine* StdoutLine::default_instance_ = NULL;

StdoutLine* StdoutLine::New() const {
  return new StdoutLine;
}

void StdoutLine::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    index_ = 0;
    if (has_line()) {
      if (line_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        line_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool StdoutLine::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.StdoutLine)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 index = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &index_)));
          set_has_index();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_line;
        break;
      }

      // optional string line = 2;
      case 2: {
        if (tag == 18) {
         parse_line:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_line()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->line().data(), this->line().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "line");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.StdoutLine)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.StdoutLine)
  return false;
#undef DO_
}

void StdoutLine::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.StdoutLine)
  // required int32 index = 1;
  if (has_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->index(), output);
  }

  // optional string line = 2;
  if (has_line()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->line().data(), this->line().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "line");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->line(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.StdoutLine)
}

::google::protobuf::uint8* StdoutLine::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.StdoutLine)
  // required int32 index = 1;
  if (has_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->index(), target);
  }

  // optional string line = 2;
  if (has_line()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->line().data(), this->line().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "line");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->line(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.StdoutLine)
  return target;
}

int StdoutLine::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 index = 1;
    if (has_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->index());
    }

    // optional string line = 2;
    if (has_line()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->line());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StdoutLine::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const StdoutLine* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const StdoutLine*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void StdoutLine::MergeFrom(const StdoutLine& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_index()) {
      set_index(from.index());
    }
    if (from.has_line()) {
      set_line(from.line());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void StdoutLine::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StdoutLine::CopyFrom(const StdoutLine& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StdoutLine::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void StdoutLine::Swap(StdoutLine* other) {
  if (other != this) {
    std::swap(index_, other->index_);
    std::swap(line_, other->line_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata StdoutLine::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = StdoutLine_descriptor_;
  metadata.reflection = StdoutLine_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MachineInfo::kTypeFieldNumber;
const int MachineInfo::kManufacturerFieldNumber;
const int MachineInfo::kModelFieldNumber;
const int MachineInfo::kVariantFieldNumber;
#endif  // !_MSC_VER

MachineInfo::MachineInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.MachineInfo)
}

void MachineInfo::InitAsDefaultInstance() {
}

MachineInfo::MachineInfo(const MachineInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.MachineInfo)
}

void MachineInfo::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  type_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  manufacturer_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  model_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  variant_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MachineInfo::~MachineInfo() {
  // @@protoc_insertion_point(destructor:pb.MachineInfo)
  SharedDtor();
}

void MachineInfo::SharedDtor() {
  if (type_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete type_;
  }
  if (manufacturer_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete manufacturer_;
  }
  if (model_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete model_;
  }
  if (variant_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete variant_;
  }
  if (this != default_instance_) {
  }
}

void MachineInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MachineInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MachineInfo_descriptor_;
}

const MachineInfo& MachineInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_machinetalk_2fprotobuf_2fconfig_2eproto();
  return *default_instance_;
}

MachineInfo* MachineInfo::default_instance_ = NULL;

MachineInfo* MachineInfo::New() const {
  return new MachineInfo;
}

void MachineInfo::Clear() {
  if (_has_bits_[0 / 32] & 15) {
    if (has_type()) {
      if (type_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        type_->clear();
      }
    }
    if (has_manufacturer()) {
      if (manufacturer_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        manufacturer_->clear();
      }
    }
    if (has_model()) {
      if (model_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        model_->clear();
      }
    }
    if (has_variant()) {
      if (variant_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        variant_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MachineInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.MachineInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string type = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_type()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->type().data(), this->type().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "type");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_manufacturer;
        break;
      }

      // optional string manufacturer = 2;
      case 2: {
        if (tag == 18) {
         parse_manufacturer:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_manufacturer()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->manufacturer().data(), this->manufacturer().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "manufacturer");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_model;
        break;
      }

      // optional string model = 3;
      case 3: {
        if (tag == 26) {
         parse_model:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_model()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->model().data(), this->model().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "model");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_variant;
        break;
      }

      // optional string variant = 4;
      case 4: {
        if (tag == 34) {
         parse_variant:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_variant()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->variant().data(), this->variant().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "variant");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.MachineInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.MachineInfo)
  return false;
#undef DO_
}

void MachineInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.MachineInfo)
  // optional string type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->type().data(), this->type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "type");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->type(), output);
  }

  // optional string manufacturer = 2;
  if (has_manufacturer()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->manufacturer().data(), this->manufacturer().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "manufacturer");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->manufacturer(), output);
  }

  // optional string model = 3;
  if (has_model()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->model().data(), this->model().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "model");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->model(), output);
  }

  // optional string variant = 4;
  if (has_variant()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->variant().data(), this->variant().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "variant");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->variant(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.MachineInfo)
}

::google::protobuf::uint8* MachineInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.MachineInfo)
  // optional string type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->type().data(), this->type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "type");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->type(), target);
  }

  // optional string manufacturer = 2;
  if (has_manufacturer()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->manufacturer().data(), this->manufacturer().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "manufacturer");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->manufacturer(), target);
  }

  // optional string model = 3;
  if (has_model()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->model().data(), this->model().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "model");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->model(), target);
  }

  // optional string variant = 4;
  if (has_variant()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->variant().data(), this->variant().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "variant");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->variant(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.MachineInfo)
  return target;
}

int MachineInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->type());
    }

    // optional string manufacturer = 2;
    if (has_manufacturer()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->manufacturer());
    }

    // optional string model = 3;
    if (has_model()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->model());
    }

    // optional string variant = 4;
    if (has_variant()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->variant());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MachineInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MachineInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MachineInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MachineInfo::MergeFrom(const MachineInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_manufacturer()) {
      set_manufacturer(from.manufacturer());
    }
    if (from.has_model()) {
      set_model(from.model());
    }
    if (from.has_variant()) {
      set_variant(from.variant());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MachineInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MachineInfo::CopyFrom(const MachineInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MachineInfo::IsInitialized() const {

  return true;
}

void MachineInfo::Swap(MachineInfo* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(manufacturer_, other->manufacturer_);
    std::swap(model_, other->model_);
    std::swap(variant_, other->variant_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MachineInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MachineInfo_descriptor_;
  metadata.reflection = MachineInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Launcher::kIndexFieldNumber;
const int Launcher::kNameFieldNumber;
const int Launcher::kDescriptionFieldNumber;
const int Launcher::kImageFieldNumber;
const int Launcher::kInfoFieldNumber;
const int Launcher::kRunningFieldNumber;
const int Launcher::kTerminatingFieldNumber;
const int Launcher::kCommandFieldNumber;
const int Launcher::kShellFieldNumber;
const int Launcher::kOutputFieldNumber;
const int Launcher::kReturncodeFieldNumber;
const int Launcher::kWorkdirFieldNumber;
#endif  // !_MSC_VER

Launcher::Launcher()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.Launcher)
}

void Launcher::InitAsDefaultInstance() {
  image_ = const_cast< ::pb::File*>(&::pb::File::default_instance());
  info_ = const_cast< ::pb::MachineInfo*>(&::pb::MachineInfo::default_instance());
}

Launcher::Launcher(const Launcher& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.Launcher)
}

void Launcher::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  index_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  description_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  image_ = NULL;
  info_ = NULL;
  running_ = false;
  terminating_ = false;
  command_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  shell_ = false;
  returncode_ = 0;
  workdir_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Launcher::~Launcher() {
  // @@protoc_insertion_point(destructor:pb.Launcher)
  SharedDtor();
}

void Launcher::SharedDtor() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (description_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete description_;
  }
  if (command_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete command_;
  }
  if (workdir_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete workdir_;
  }
  if (this != default_instance_) {
    delete image_;
    delete info_;
  }
}

void Launcher::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Launcher::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Launcher_descriptor_;
}

const Launcher& Launcher::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_machinetalk_2fprotobuf_2fconfig_2eproto();
  return *default_instance_;
}

Launcher* Launcher::default_instance_ = NULL;

Launcher* Launcher::New() const {
  return new Launcher;
}

void Launcher::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<Launcher*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(index_, terminating_);
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        name_->clear();
      }
    }
    if (has_description()) {
      if (description_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        description_->clear();
      }
    }
    if (has_image()) {
      if (image_ != NULL) image_->::pb::File::Clear();
    }
    if (has_info()) {
      if (info_ != NULL) info_->::pb::MachineInfo::Clear();
    }
    if (has_command()) {
      if (command_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        command_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & 3328) {
    shell_ = false;
    returncode_ = 0;
    if (has_workdir()) {
      if (workdir_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        workdir_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  output_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Launcher::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.Launcher)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 index = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &index_)));
          set_has_index();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }

      // optional string name = 2;
      case 2: {
        if (tag == 18) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_description;
        break;
      }

      // optional string description = 3;
      case 3: {
        if (tag == 26) {
         parse_description:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_description()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->description().data(), this->description().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "description");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_image;
        break;
      }

      // optional .pb.File image = 4;
      case 4: {
        if (tag == 34) {
         parse_image:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_image()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_info;
        break;
      }

      // optional .pb.MachineInfo info = 5;
      case 5: {
        if (tag == 42) {
         parse_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_info()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_running;
        break;
      }

      // optional bool running = 6;
      case 6: {
        if (tag == 48) {
         parse_running:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &running_)));
          set_has_running();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_terminating;
        break;
      }

      // optional bool terminating = 7;
      case 7: {
        if (tag == 56) {
         parse_terminating:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &terminating_)));
          set_has_terminating();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_command;
        break;
      }

      // optional string command = 8;
      case 8: {
        if (tag == 66) {
         parse_command:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_command()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->command().data(), this->command().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "command");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_shell;
        break;
      }

      // optional bool shell = 9;
      case 9: {
        if (tag == 72) {
         parse_shell:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &shell_)));
          set_has_shell();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(82)) goto parse_output;
        break;
      }

      // repeated .pb.StdoutLine output = 10;
      case 10: {
        if (tag == 82) {
         parse_output:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_output()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(82)) goto parse_output;
        if (input->ExpectTag(88)) goto parse_returncode;
        break;
      }

      // optional int32 returncode = 11;
      case 11: {
        if (tag == 88) {
         parse_returncode:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &returncode_)));
          set_has_returncode();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(98)) goto parse_workdir;
        break;
      }

      // optional string workdir = 12;
      case 12: {
        if (tag == 98) {
         parse_workdir:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_workdir()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->workdir().data(), this->workdir().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "workdir");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.Launcher)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.Launcher)
  return false;
#undef DO_
}

void Launcher::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.Launcher)
  // required int32 index = 1;
  if (has_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->index(), output);
  }

  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->name(), output);
  }

  // optional string description = 3;
  if (has_description()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->description().data(), this->description().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "description");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->description(), output);
  }

  // optional .pb.File image = 4;
  if (has_image()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->image(), output);
  }

  // optional .pb.MachineInfo info = 5;
  if (has_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->info(), output);
  }

  // optional bool running = 6;
  if (has_running()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->running(), output);
  }

  // optional bool terminating = 7;
  if (has_terminating()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->terminating(), output);
  }

  // optional string command = 8;
  if (has_command()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->command().data(), this->command().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "command");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      8, this->command(), output);
  }

  // optional bool shell = 9;
  if (has_shell()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(9, this->shell(), output);
  }

  // repeated .pb.StdoutLine output = 10;
  for (int i = 0; i < this->output_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, this->output(i), output);
  }

  // optional int32 returncode = 11;
  if (has_returncode()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->returncode(), output);
  }

  // optional string workdir = 12;
  if (has_workdir()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->workdir().data(), this->workdir().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "workdir");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      12, this->workdir(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.Launcher)
}

::google::protobuf::uint8* Launcher::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.Launcher)
  // required int32 index = 1;
  if (has_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->index(), target);
  }

  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }

  // optional string description = 3;
  if (has_description()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->description().data(), this->description().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "description");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->description(), target);
  }

  // optional .pb.File image = 4;
  if (has_image()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->image(), target);
  }

  // optional .pb.MachineInfo info = 5;
  if (has_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->info(), target);
  }

  // optional bool running = 6;
  if (has_running()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->running(), target);
  }

  // optional bool terminating = 7;
  if (has_terminating()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(7, this->terminating(), target);
  }

  // optional string command = 8;
  if (has_command()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->command().data(), this->command().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "command");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->command(), target);
  }

  // optional bool shell = 9;
  if (has_shell()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(9, this->shell(), target);
  }

  // repeated .pb.StdoutLine output = 10;
  for (int i = 0; i < this->output_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        10, this->output(i), target);
  }

  // optional int32 returncode = 11;
  if (has_returncode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->returncode(), target);
  }

  // optional string workdir = 12;
  if (has_workdir()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->workdir().data(), this->workdir().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "workdir");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        12, this->workdir(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.Launcher)
  return target;
}

int Launcher::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 index = 1;
    if (has_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->index());
    }

    // optional string name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional string description = 3;
    if (has_description()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->description());
    }

    // optional .pb.File image = 4;
    if (has_image()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->image());
    }

    // optional .pb.MachineInfo info = 5;
    if (has_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->info());
    }

    // optional bool running = 6;
    if (has_running()) {
      total_size += 1 + 1;
    }

    // optional bool terminating = 7;
    if (has_terminating()) {
      total_size += 1 + 1;
    }

    // optional string command = 8;
    if (has_command()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->command());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional bool shell = 9;
    if (has_shell()) {
      total_size += 1 + 1;
    }

    // optional int32 returncode = 11;
    if (has_returncode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->returncode());
    }

    // optional string workdir = 12;
    if (has_workdir()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->workdir());
    }

  }
  // repeated .pb.StdoutLine output = 10;
  total_size += 1 * this->output_size();
  for (int i = 0; i < this->output_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->output(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Launcher::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Launcher* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Launcher*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Launcher::MergeFrom(const Launcher& from) {
  GOOGLE_CHECK_NE(&from, this);
  output_.MergeFrom(from.output_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_index()) {
      set_index(from.index());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_description()) {
      set_description(from.description());
    }
    if (from.has_image()) {
      mutable_image()->::pb::File::MergeFrom(from.image());
    }
    if (from.has_info()) {
      mutable_info()->::pb::MachineInfo::MergeFrom(from.info());
    }
    if (from.has_running()) {
      set_running(from.running());
    }
    if (from.has_terminating()) {
      set_terminating(from.terminating());
    }
    if (from.has_command()) {
      set_command(from.command());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_shell()) {
      set_shell(from.shell());
    }
    if (from.has_returncode()) {
      set_returncode(from.returncode());
    }
    if (from.has_workdir()) {
      set_workdir(from.workdir());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Launcher::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Launcher::CopyFrom(const Launcher& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Launcher::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_image()) {
    if (!this->image().IsInitialized()) return false;
  }
  if (!::google::protobuf::internal::AllAreInitialized(this->output())) return false;
  return true;
}

void Launcher::Swap(Launcher* other) {
  if (other != this) {
    std::swap(index_, other->index_);
    std::swap(name_, other->name_);
    std::swap(description_, other->description_);
    std::swap(image_, other->image_);
    std::swap(info_, other->info_);
    std::swap(running_, other->running_);
    std::swap(terminating_, other->terminating_);
    std::swap(command_, other->command_);
    std::swap(shell_, other->shell_);
    output_.Swap(&other->output_);
    std::swap(returncode_, other->returncode_);
    std::swap(workdir_, other->workdir_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Launcher::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Launcher_descriptor_;
  metadata.reflection = Launcher_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace pb

// @@protoc_insertion_point(global_scope)
