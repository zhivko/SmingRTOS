// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: machinetalk/protobuf/preview.proto

#ifndef PROTOBUF_machinetalk_2fprotobuf_2fpreview_2eproto__INCLUDED
#define PROTOBUF_machinetalk_2fprotobuf_2fpreview_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "machinetalk/protobuf/nanopb.pb.h"
// @@protoc_insertion_point(includes)

namespace pb {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_machinetalk_2fprotobuf_2fpreview_2eproto();
void protobuf_AssignDesc_machinetalk_2fprotobuf_2fpreview_2eproto();
void protobuf_ShutdownFile_machinetalk_2fprotobuf_2fpreview_2eproto();

class Position;
class Preview;

enum KinematicsType {
  KT_JOINT = 1,
  KT_TRIVKINS = 2,
  KT_DELTA = 3
};
bool KinematicsType_IsValid(int value);
const KinematicsType KinematicsType_MIN = KT_JOINT;
const KinematicsType KinematicsType_MAX = KT_DELTA;
const int KinematicsType_ARRAYSIZE = KinematicsType_MAX + 1;

const ::google::protobuf::EnumDescriptor* KinematicsType_descriptor();
inline const ::std::string& KinematicsType_Name(KinematicsType value) {
  return ::google::protobuf::internal::NameOfEnum(
    KinematicsType_descriptor(), value);
}
inline bool KinematicsType_Parse(
    const ::std::string& name, KinematicsType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<KinematicsType>(
    KinematicsType_descriptor(), name, value);
}
enum PreviewOpType {
  PV_STRAIGHT_PROBE = 1,
  PV_RIGID_TAP = 2,
  PV_STRAIGHT_FEED = 3,
  PV_ARC_FEED = 4,
  PV_STRAIGHT_TRAVERSE = 5,
  PV_SET_G5X_OFFSET = 6,
  PV_SET_G92_OFFSET = 7,
  PV_SET_XY_ROTATION = 8,
  PV_SELECT_PLANE = 9,
  PV_SET_TRAVERSE_RATE = 10,
  PV_SET_FEED_RATE = 11,
  PV_CHANGE_TOOL = 12,
  PV_CHANGE_TOOL_NUMBER = 13,
  PV_DWELL = 14,
  PV_MESSAGE = 15,
  PV_COMMENT = 16,
  PV_USE_TOOL_OFFSET = 17,
  PV_SET_PARAMS = 18,
  PV_SET_FEED_MODE = 19,
  PV_SOURCE_CONTEXT = 20
};
bool PreviewOpType_IsValid(int value);
const PreviewOpType PreviewOpType_MIN = PV_STRAIGHT_PROBE;
const PreviewOpType PreviewOpType_MAX = PV_SOURCE_CONTEXT;
const int PreviewOpType_ARRAYSIZE = PreviewOpType_MAX + 1;

const ::google::protobuf::EnumDescriptor* PreviewOpType_descriptor();
inline const ::std::string& PreviewOpType_Name(PreviewOpType value) {
  return ::google::protobuf::internal::NameOfEnum(
    PreviewOpType_descriptor(), value);
}
inline bool PreviewOpType_Parse(
    const ::std::string& name, PreviewOpType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<PreviewOpType>(
    PreviewOpType_descriptor(), name, value);
}
enum SourceType {
  ST_NGC_FILE = 1,
  ST_NGC_STRING = 2,
  ST_PYTHON_METHOD = 3
};
bool SourceType_IsValid(int value);
const SourceType SourceType_MIN = ST_NGC_FILE;
const SourceType SourceType_MAX = ST_PYTHON_METHOD;
const int SourceType_ARRAYSIZE = SourceType_MAX + 1;

const ::google::protobuf::EnumDescriptor* SourceType_descriptor();
inline const ::std::string& SourceType_Name(SourceType value) {
  return ::google::protobuf::internal::NameOfEnum(
    SourceType_descriptor(), value);
}
inline bool SourceType_Parse(
    const ::std::string& name, SourceType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<SourceType>(
    SourceType_descriptor(), name, value);
}
// ===================================================================

class Position : public ::google::protobuf::Message {
 public:
  Position();
  virtual ~Position();

  Position(const Position& from);

  inline Position& operator=(const Position& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Position& default_instance();

  void Swap(Position* other);

  // implements Message ----------------------------------------------

  Position* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Position& from);
  void MergeFrom(const Position& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional double x = 3;
  inline bool has_x() const;
  inline void clear_x();
  static const int kXFieldNumber = 3;
  inline double x() const;
  inline void set_x(double value);

  // optional double y = 4;
  inline bool has_y() const;
  inline void clear_y();
  static const int kYFieldNumber = 4;
  inline double y() const;
  inline void set_y(double value);

  // optional double z = 5;
  inline bool has_z() const;
  inline void clear_z();
  static const int kZFieldNumber = 5;
  inline double z() const;
  inline void set_z(double value);

  // optional double a = 6;
  inline bool has_a() const;
  inline void clear_a();
  static const int kAFieldNumber = 6;
  inline double a() const;
  inline void set_a(double value);

  // optional double b = 7;
  inline bool has_b() const;
  inline void clear_b();
  static const int kBFieldNumber = 7;
  inline double b() const;
  inline void set_b(double value);

  // optional double c = 8;
  inline bool has_c() const;
  inline void clear_c();
  static const int kCFieldNumber = 8;
  inline double c() const;
  inline void set_c(double value);

  // optional double u = 9;
  inline bool has_u() const;
  inline void clear_u();
  static const int kUFieldNumber = 9;
  inline double u() const;
  inline void set_u(double value);

  // optional double v = 10;
  inline bool has_v() const;
  inline void clear_v();
  static const int kVFieldNumber = 10;
  inline double v() const;
  inline void set_v(double value);

  // optional double w = 11;
  inline bool has_w() const;
  inline void clear_w();
  static const int kWFieldNumber = 11;
  inline double w() const;
  inline void set_w(double value);

  // @@protoc_insertion_point(class_scope:pb.Position)
 private:
  inline void set_has_x();
  inline void clear_has_x();
  inline void set_has_y();
  inline void clear_has_y();
  inline void set_has_z();
  inline void clear_has_z();
  inline void set_has_a();
  inline void clear_has_a();
  inline void set_has_b();
  inline void clear_has_b();
  inline void set_has_c();
  inline void clear_has_c();
  inline void set_has_u();
  inline void clear_has_u();
  inline void set_has_v();
  inline void clear_has_v();
  inline void set_has_w();
  inline void clear_has_w();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  double x_;
  double y_;
  double z_;
  double a_;
  double b_;
  double c_;
  double u_;
  double v_;
  double w_;
  friend void  protobuf_AddDesc_machinetalk_2fprotobuf_2fpreview_2eproto();
  friend void protobuf_AssignDesc_machinetalk_2fprotobuf_2fpreview_2eproto();
  friend void protobuf_ShutdownFile_machinetalk_2fprotobuf_2fpreview_2eproto();

  void InitAsDefaultInstance();
  static Position* default_instance_;
};
// -------------------------------------------------------------------

class Preview : public ::google::protobuf::Message {
 public:
  Preview();
  virtual ~Preview();

  Preview(const Preview& from);

  inline Preview& operator=(const Preview& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Preview& default_instance();

  void Swap(Preview* other);

  // implements Message ----------------------------------------------

  Preview* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Preview& from);
  void MergeFrom(const Preview& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .pb.PreviewOpType type = 1;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::pb::PreviewOpType type() const;
  inline void set_type(::pb::PreviewOpType value);

  // optional int32 line_number = 2;
  inline bool has_line_number() const;
  inline void clear_line_number();
  static const int kLineNumberFieldNumber = 2;
  inline ::google::protobuf::int32 line_number() const;
  inline void set_line_number(::google::protobuf::int32 value);

  // optional .pb.Position pos = 3;
  inline bool has_pos() const;
  inline void clear_pos();
  static const int kPosFieldNumber = 3;
  inline const ::pb::Position& pos() const;
  inline ::pb::Position* mutable_pos();
  inline ::pb::Position* release_pos();
  inline void set_allocated_pos(::pb::Position* pos);

  // optional double first_end = 4;
  inline bool has_first_end() const;
  inline void clear_first_end();
  static const int kFirstEndFieldNumber = 4;
  inline double first_end() const;
  inline void set_first_end(double value);

  // optional double second_end = 5;
  inline bool has_second_end() const;
  inline void clear_second_end();
  static const int kSecondEndFieldNumber = 5;
  inline double second_end() const;
  inline void set_second_end(double value);

  // optional double first_axis = 6;
  inline bool has_first_axis() const;
  inline void clear_first_axis();
  static const int kFirstAxisFieldNumber = 6;
  inline double first_axis() const;
  inline void set_first_axis(double value);

  // optional double second_axis = 7;
  inline bool has_second_axis() const;
  inline void clear_second_axis();
  static const int kSecondAxisFieldNumber = 7;
  inline double second_axis() const;
  inline void set_second_axis(double value);

  // optional int32 rotation = 8;
  inline bool has_rotation() const;
  inline void clear_rotation();
  static const int kRotationFieldNumber = 8;
  inline ::google::protobuf::int32 rotation() const;
  inline void set_rotation(::google::protobuf::int32 value);

  // optional double axis_end_point = 9;
  inline bool has_axis_end_point() const;
  inline void clear_axis_end_point();
  static const int kAxisEndPointFieldNumber = 9;
  inline double axis_end_point() const;
  inline void set_axis_end_point(double value);

  // optional double xy_rotation = 10;
  inline bool has_xy_rotation() const;
  inline void clear_xy_rotation();
  static const int kXyRotationFieldNumber = 10;
  inline double xy_rotation() const;
  inline void set_xy_rotation(double value);

  // optional int32 plane = 11;
  inline bool has_plane() const;
  inline void clear_plane();
  static const int kPlaneFieldNumber = 11;
  inline ::google::protobuf::int32 plane() const;
  inline void set_plane(::google::protobuf::int32 value);

  // optional double rate = 12;
  inline bool has_rate() const;
  inline void clear_rate();
  static const int kRateFieldNumber = 12;
  inline double rate() const;
  inline void set_rate(double value);

  // optional int32 feed_mode = 13;
  inline bool has_feed_mode() const;
  inline void clear_feed_mode();
  static const int kFeedModeFieldNumber = 13;
  inline ::google::protobuf::int32 feed_mode() const;
  inline void set_feed_mode(::google::protobuf::int32 value);

  // optional double time = 14;
  inline bool has_time() const;
  inline void clear_time();
  static const int kTimeFieldNumber = 14;
  inline double time() const;
  inline void set_time(double value);

  // optional string text = 15;
  inline bool has_text() const;
  inline void clear_text();
  static const int kTextFieldNumber = 15;
  inline const ::std::string& text() const;
  inline void set_text(const ::std::string& value);
  inline void set_text(const char* value);
  inline void set_text(const char* value, size_t size);
  inline ::std::string* mutable_text();
  inline ::std::string* release_text();
  inline void set_allocated_text(::std::string* text);

  // optional double angular_units = 101;
  inline bool has_angular_units() const;
  inline void clear_angular_units();
  static const int kAngularUnitsFieldNumber = 101;
  inline double angular_units() const;
  inline void set_angular_units(double value);

  // optional double length_units = 102;
  inline bool has_length_units() const;
  inline void clear_length_units();
  static const int kLengthUnitsFieldNumber = 102;
  inline double length_units() const;
  inline void set_length_units(double value);

  // optional int32 probetype = 103;
  inline bool has_probetype() const;
  inline void clear_probetype();
  static const int kProbetypeFieldNumber = 103;
  inline ::google::protobuf::int32 probetype() const;
  inline void set_probetype(::google::protobuf::int32 value);

  // optional .pb.KinematicsType kins = 104 [default = KT_JOINT];
  inline bool has_kins() const;
  inline void clear_kins();
  static const int kKinsFieldNumber = 104;
  inline ::pb::KinematicsType kins() const;
  inline void set_kins(::pb::KinematicsType value);

  // optional int32 axismask = 105;
  inline bool has_axismask() const;
  inline void clear_axismask();
  static const int kAxismaskFieldNumber = 105;
  inline ::google::protobuf::int32 axismask() const;
  inline void set_axismask(::google::protobuf::int32 value);

  // optional int32 g5_index = 106;
  inline bool has_g5_index() const;
  inline void clear_g5_index();
  static const int kG5IndexFieldNumber = 106;
  inline ::google::protobuf::int32 g5_index() const;
  inline void set_g5_index(::google::protobuf::int32 value);

  // optional int32 pocket = 107;
  inline bool has_pocket() const;
  inline void clear_pocket();
  static const int kPocketFieldNumber = 107;
  inline ::google::protobuf::int32 pocket() const;
  inline void set_pocket(::google::protobuf::int32 value);

  // optional .pb.SourceType stype = 110;
  inline bool has_stype() const;
  inline void clear_stype();
  static const int kStypeFieldNumber = 110;
  inline ::pb::SourceType stype() const;
  inline void set_stype(::pb::SourceType value);

  // optional string filename = 111;
  inline bool has_filename() const;
  inline void clear_filename();
  static const int kFilenameFieldNumber = 111;
  inline const ::std::string& filename() const;
  inline void set_filename(const ::std::string& value);
  inline void set_filename(const char* value);
  inline void set_filename(const char* value, size_t size);
  inline ::std::string* mutable_filename();
  inline ::std::string* release_filename();
  inline void set_allocated_filename(::std::string* filename);

  // optional string cmdstring = 112;
  inline bool has_cmdstring() const;
  inline void clear_cmdstring();
  static const int kCmdstringFieldNumber = 112;
  inline const ::std::string& cmdstring() const;
  inline void set_cmdstring(const ::std::string& value);
  inline void set_cmdstring(const char* value);
  inline void set_cmdstring(const char* value, size_t size);
  inline ::std::string* mutable_cmdstring();
  inline ::std::string* release_cmdstring();
  inline void set_allocated_cmdstring(::std::string* cmdstring);

  // optional int32 call_level = 113;
  inline bool has_call_level() const;
  inline void clear_call_level();
  static const int kCallLevelFieldNumber = 113;
  inline ::google::protobuf::int32 call_level() const;
  inline void set_call_level(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:pb.Preview)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_line_number();
  inline void clear_has_line_number();
  inline void set_has_pos();
  inline void clear_has_pos();
  inline void set_has_first_end();
  inline void clear_has_first_end();
  inline void set_has_second_end();
  inline void clear_has_second_end();
  inline void set_has_first_axis();
  inline void clear_has_first_axis();
  inline void set_has_second_axis();
  inline void clear_has_second_axis();
  inline void set_has_rotation();
  inline void clear_has_rotation();
  inline void set_has_axis_end_point();
  inline void clear_has_axis_end_point();
  inline void set_has_xy_rotation();
  inline void clear_has_xy_rotation();
  inline void set_has_plane();
  inline void clear_has_plane();
  inline void set_has_rate();
  inline void clear_has_rate();
  inline void set_has_feed_mode();
  inline void clear_has_feed_mode();
  inline void set_has_time();
  inline void clear_has_time();
  inline void set_has_text();
  inline void clear_has_text();
  inline void set_has_angular_units();
  inline void clear_has_angular_units();
  inline void set_has_length_units();
  inline void clear_has_length_units();
  inline void set_has_probetype();
  inline void clear_has_probetype();
  inline void set_has_kins();
  inline void clear_has_kins();
  inline void set_has_axismask();
  inline void clear_has_axismask();
  inline void set_has_g5_index();
  inline void clear_has_g5_index();
  inline void set_has_pocket();
  inline void clear_has_pocket();
  inline void set_has_stype();
  inline void clear_has_stype();
  inline void set_has_filename();
  inline void clear_has_filename();
  inline void set_has_cmdstring();
  inline void clear_has_cmdstring();
  inline void set_has_call_level();
  inline void clear_has_call_level();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int type_;
  ::google::protobuf::int32 line_number_;
  ::pb::Position* pos_;
  double first_end_;
  double second_end_;
  double first_axis_;
  double second_axis_;
  double axis_end_point_;
  ::google::protobuf::int32 rotation_;
  ::google::protobuf::int32 plane_;
  double xy_rotation_;
  double rate_;
  double time_;
  ::std::string* text_;
  ::google::protobuf::int32 feed_mode_;
  ::google::protobuf::int32 probetype_;
  double angular_units_;
  double length_units_;
  int kins_;
  ::google::protobuf::int32 axismask_;
  ::google::protobuf::int32 g5_index_;
  ::google::protobuf::int32 pocket_;
  ::std::string* filename_;
  int stype_;
  ::google::protobuf::int32 call_level_;
  ::std::string* cmdstring_;
  friend void  protobuf_AddDesc_machinetalk_2fprotobuf_2fpreview_2eproto();
  friend void protobuf_AssignDesc_machinetalk_2fprotobuf_2fpreview_2eproto();
  friend void protobuf_ShutdownFile_machinetalk_2fprotobuf_2fpreview_2eproto();

  void InitAsDefaultInstance();
  static Preview* default_instance_;
};
// ===================================================================


// ===================================================================

// Position

// optional double x = 3;
inline bool Position::has_x() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Position::set_has_x() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Position::clear_has_x() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Position::clear_x() {
  x_ = 0;
  clear_has_x();
}
inline double Position::x() const {
  // @@protoc_insertion_point(field_get:pb.Position.x)
  return x_;
}
inline void Position::set_x(double value) {
  set_has_x();
  x_ = value;
  // @@protoc_insertion_point(field_set:pb.Position.x)
}

// optional double y = 4;
inline bool Position::has_y() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Position::set_has_y() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Position::clear_has_y() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Position::clear_y() {
  y_ = 0;
  clear_has_y();
}
inline double Position::y() const {
  // @@protoc_insertion_point(field_get:pb.Position.y)
  return y_;
}
inline void Position::set_y(double value) {
  set_has_y();
  y_ = value;
  // @@protoc_insertion_point(field_set:pb.Position.y)
}

// optional double z = 5;
inline bool Position::has_z() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Position::set_has_z() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Position::clear_has_z() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Position::clear_z() {
  z_ = 0;
  clear_has_z();
}
inline double Position::z() const {
  // @@protoc_insertion_point(field_get:pb.Position.z)
  return z_;
}
inline void Position::set_z(double value) {
  set_has_z();
  z_ = value;
  // @@protoc_insertion_point(field_set:pb.Position.z)
}

// optional double a = 6;
inline bool Position::has_a() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Position::set_has_a() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Position::clear_has_a() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Position::clear_a() {
  a_ = 0;
  clear_has_a();
}
inline double Position::a() const {
  // @@protoc_insertion_point(field_get:pb.Position.a)
  return a_;
}
inline void Position::set_a(double value) {
  set_has_a();
  a_ = value;
  // @@protoc_insertion_point(field_set:pb.Position.a)
}

// optional double b = 7;
inline bool Position::has_b() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Position::set_has_b() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Position::clear_has_b() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Position::clear_b() {
  b_ = 0;
  clear_has_b();
}
inline double Position::b() const {
  // @@protoc_insertion_point(field_get:pb.Position.b)
  return b_;
}
inline void Position::set_b(double value) {
  set_has_b();
  b_ = value;
  // @@protoc_insertion_point(field_set:pb.Position.b)
}

// optional double c = 8;
inline bool Position::has_c() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Position::set_has_c() {
  _has_bits_[0] |= 0x00000020u;
}
inline void Position::clear_has_c() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void Position::clear_c() {
  c_ = 0;
  clear_has_c();
}
inline double Position::c() const {
  // @@protoc_insertion_point(field_get:pb.Position.c)
  return c_;
}
inline void Position::set_c(double value) {
  set_has_c();
  c_ = value;
  // @@protoc_insertion_point(field_set:pb.Position.c)
}

// optional double u = 9;
inline bool Position::has_u() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void Position::set_has_u() {
  _has_bits_[0] |= 0x00000040u;
}
inline void Position::clear_has_u() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void Position::clear_u() {
  u_ = 0;
  clear_has_u();
}
inline double Position::u() const {
  // @@protoc_insertion_point(field_get:pb.Position.u)
  return u_;
}
inline void Position::set_u(double value) {
  set_has_u();
  u_ = value;
  // @@protoc_insertion_point(field_set:pb.Position.u)
}

// optional double v = 10;
inline bool Position::has_v() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void Position::set_has_v() {
  _has_bits_[0] |= 0x00000080u;
}
inline void Position::clear_has_v() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void Position::clear_v() {
  v_ = 0;
  clear_has_v();
}
inline double Position::v() const {
  // @@protoc_insertion_point(field_get:pb.Position.v)
  return v_;
}
inline void Position::set_v(double value) {
  set_has_v();
  v_ = value;
  // @@protoc_insertion_point(field_set:pb.Position.v)
}

// optional double w = 11;
inline bool Position::has_w() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void Position::set_has_w() {
  _has_bits_[0] |= 0x00000100u;
}
inline void Position::clear_has_w() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void Position::clear_w() {
  w_ = 0;
  clear_has_w();
}
inline double Position::w() const {
  // @@protoc_insertion_point(field_get:pb.Position.w)
  return w_;
}
inline void Position::set_w(double value) {
  set_has_w();
  w_ = value;
  // @@protoc_insertion_point(field_set:pb.Position.w)
}

// -------------------------------------------------------------------

// Preview

// required .pb.PreviewOpType type = 1;
inline bool Preview::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Preview::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Preview::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Preview::clear_type() {
  type_ = 1;
  clear_has_type();
}
inline ::pb::PreviewOpType Preview::type() const {
  // @@protoc_insertion_point(field_get:pb.Preview.type)
  return static_cast< ::pb::PreviewOpType >(type_);
}
inline void Preview::set_type(::pb::PreviewOpType value) {
  assert(::pb::PreviewOpType_IsValid(value));
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:pb.Preview.type)
}

// optional int32 line_number = 2;
inline bool Preview::has_line_number() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Preview::set_has_line_number() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Preview::clear_has_line_number() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Preview::clear_line_number() {
  line_number_ = 0;
  clear_has_line_number();
}
inline ::google::protobuf::int32 Preview::line_number() const {
  // @@protoc_insertion_point(field_get:pb.Preview.line_number)
  return line_number_;
}
inline void Preview::set_line_number(::google::protobuf::int32 value) {
  set_has_line_number();
  line_number_ = value;
  // @@protoc_insertion_point(field_set:pb.Preview.line_number)
}

// optional .pb.Position pos = 3;
inline bool Preview::has_pos() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Preview::set_has_pos() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Preview::clear_has_pos() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Preview::clear_pos() {
  if (pos_ != NULL) pos_->::pb::Position::Clear();
  clear_has_pos();
}
inline const ::pb::Position& Preview::pos() const {
  // @@protoc_insertion_point(field_get:pb.Preview.pos)
  return pos_ != NULL ? *pos_ : *default_instance_->pos_;
}
inline ::pb::Position* Preview::mutable_pos() {
  set_has_pos();
  if (pos_ == NULL) pos_ = new ::pb::Position;
  // @@protoc_insertion_point(field_mutable:pb.Preview.pos)
  return pos_;
}
inline ::pb::Position* Preview::release_pos() {
  clear_has_pos();
  ::pb::Position* temp = pos_;
  pos_ = NULL;
  return temp;
}
inline void Preview::set_allocated_pos(::pb::Position* pos) {
  delete pos_;
  pos_ = pos;
  if (pos) {
    set_has_pos();
  } else {
    clear_has_pos();
  }
  // @@protoc_insertion_point(field_set_allocated:pb.Preview.pos)
}

// optional double first_end = 4;
inline bool Preview::has_first_end() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Preview::set_has_first_end() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Preview::clear_has_first_end() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Preview::clear_first_end() {
  first_end_ = 0;
  clear_has_first_end();
}
inline double Preview::first_end() const {
  // @@protoc_insertion_point(field_get:pb.Preview.first_end)
  return first_end_;
}
inline void Preview::set_first_end(double value) {
  set_has_first_end();
  first_end_ = value;
  // @@protoc_insertion_point(field_set:pb.Preview.first_end)
}

// optional double second_end = 5;
inline bool Preview::has_second_end() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Preview::set_has_second_end() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Preview::clear_has_second_end() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Preview::clear_second_end() {
  second_end_ = 0;
  clear_has_second_end();
}
inline double Preview::second_end() const {
  // @@protoc_insertion_point(field_get:pb.Preview.second_end)
  return second_end_;
}
inline void Preview::set_second_end(double value) {
  set_has_second_end();
  second_end_ = value;
  // @@protoc_insertion_point(field_set:pb.Preview.second_end)
}

// optional double first_axis = 6;
inline bool Preview::has_first_axis() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Preview::set_has_first_axis() {
  _has_bits_[0] |= 0x00000020u;
}
inline void Preview::clear_has_first_axis() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void Preview::clear_first_axis() {
  first_axis_ = 0;
  clear_has_first_axis();
}
inline double Preview::first_axis() const {
  // @@protoc_insertion_point(field_get:pb.Preview.first_axis)
  return first_axis_;
}
inline void Preview::set_first_axis(double value) {
  set_has_first_axis();
  first_axis_ = value;
  // @@protoc_insertion_point(field_set:pb.Preview.first_axis)
}

// optional double second_axis = 7;
inline bool Preview::has_second_axis() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void Preview::set_has_second_axis() {
  _has_bits_[0] |= 0x00000040u;
}
inline void Preview::clear_has_second_axis() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void Preview::clear_second_axis() {
  second_axis_ = 0;
  clear_has_second_axis();
}
inline double Preview::second_axis() const {
  // @@protoc_insertion_point(field_get:pb.Preview.second_axis)
  return second_axis_;
}
inline void Preview::set_second_axis(double value) {
  set_has_second_axis();
  second_axis_ = value;
  // @@protoc_insertion_point(field_set:pb.Preview.second_axis)
}

// optional int32 rotation = 8;
inline bool Preview::has_rotation() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void Preview::set_has_rotation() {
  _has_bits_[0] |= 0x00000080u;
}
inline void Preview::clear_has_rotation() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void Preview::clear_rotation() {
  rotation_ = 0;
  clear_has_rotation();
}
inline ::google::protobuf::int32 Preview::rotation() const {
  // @@protoc_insertion_point(field_get:pb.Preview.rotation)
  return rotation_;
}
inline void Preview::set_rotation(::google::protobuf::int32 value) {
  set_has_rotation();
  rotation_ = value;
  // @@protoc_insertion_point(field_set:pb.Preview.rotation)
}

// optional double axis_end_point = 9;
inline bool Preview::has_axis_end_point() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void Preview::set_has_axis_end_point() {
  _has_bits_[0] |= 0x00000100u;
}
inline void Preview::clear_has_axis_end_point() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void Preview::clear_axis_end_point() {
  axis_end_point_ = 0;
  clear_has_axis_end_point();
}
inline double Preview::axis_end_point() const {
  // @@protoc_insertion_point(field_get:pb.Preview.axis_end_point)
  return axis_end_point_;
}
inline void Preview::set_axis_end_point(double value) {
  set_has_axis_end_point();
  axis_end_point_ = value;
  // @@protoc_insertion_point(field_set:pb.Preview.axis_end_point)
}

// optional double xy_rotation = 10;
inline bool Preview::has_xy_rotation() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void Preview::set_has_xy_rotation() {
  _has_bits_[0] |= 0x00000200u;
}
inline void Preview::clear_has_xy_rotation() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void Preview::clear_xy_rotation() {
  xy_rotation_ = 0;
  clear_has_xy_rotation();
}
inline double Preview::xy_rotation() const {
  // @@protoc_insertion_point(field_get:pb.Preview.xy_rotation)
  return xy_rotation_;
}
inline void Preview::set_xy_rotation(double value) {
  set_has_xy_rotation();
  xy_rotation_ = value;
  // @@protoc_insertion_point(field_set:pb.Preview.xy_rotation)
}

// optional int32 plane = 11;
inline bool Preview::has_plane() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void Preview::set_has_plane() {
  _has_bits_[0] |= 0x00000400u;
}
inline void Preview::clear_has_plane() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void Preview::clear_plane() {
  plane_ = 0;
  clear_has_plane();
}
inline ::google::protobuf::int32 Preview::plane() const {
  // @@protoc_insertion_point(field_get:pb.Preview.plane)
  return plane_;
}
inline void Preview::set_plane(::google::protobuf::int32 value) {
  set_has_plane();
  plane_ = value;
  // @@protoc_insertion_point(field_set:pb.Preview.plane)
}

// optional double rate = 12;
inline bool Preview::has_rate() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void Preview::set_has_rate() {
  _has_bits_[0] |= 0x00000800u;
}
inline void Preview::clear_has_rate() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void Preview::clear_rate() {
  rate_ = 0;
  clear_has_rate();
}
inline double Preview::rate() const {
  // @@protoc_insertion_point(field_get:pb.Preview.rate)
  return rate_;
}
inline void Preview::set_rate(double value) {
  set_has_rate();
  rate_ = value;
  // @@protoc_insertion_point(field_set:pb.Preview.rate)
}

// optional int32 feed_mode = 13;
inline bool Preview::has_feed_mode() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void Preview::set_has_feed_mode() {
  _has_bits_[0] |= 0x00001000u;
}
inline void Preview::clear_has_feed_mode() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void Preview::clear_feed_mode() {
  feed_mode_ = 0;
  clear_has_feed_mode();
}
inline ::google::protobuf::int32 Preview::feed_mode() const {
  // @@protoc_insertion_point(field_get:pb.Preview.feed_mode)
  return feed_mode_;
}
inline void Preview::set_feed_mode(::google::protobuf::int32 value) {
  set_has_feed_mode();
  feed_mode_ = value;
  // @@protoc_insertion_point(field_set:pb.Preview.feed_mode)
}

// optional double time = 14;
inline bool Preview::has_time() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void Preview::set_has_time() {
  _has_bits_[0] |= 0x00002000u;
}
inline void Preview::clear_has_time() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void Preview::clear_time() {
  time_ = 0;
  clear_has_time();
}
inline double Preview::time() const {
  // @@protoc_insertion_point(field_get:pb.Preview.time)
  return time_;
}
inline void Preview::set_time(double value) {
  set_has_time();
  time_ = value;
  // @@protoc_insertion_point(field_set:pb.Preview.time)
}

// optional string text = 15;
inline bool Preview::has_text() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void Preview::set_has_text() {
  _has_bits_[0] |= 0x00004000u;
}
inline void Preview::clear_has_text() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void Preview::clear_text() {
  if (text_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    text_->clear();
  }
  clear_has_text();
}
inline const ::std::string& Preview::text() const {
  // @@protoc_insertion_point(field_get:pb.Preview.text)
  return *text_;
}
inline void Preview::set_text(const ::std::string& value) {
  set_has_text();
  if (text_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    text_ = new ::std::string;
  }
  text_->assign(value);
  // @@protoc_insertion_point(field_set:pb.Preview.text)
}
inline void Preview::set_text(const char* value) {
  set_has_text();
  if (text_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    text_ = new ::std::string;
  }
  text_->assign(value);
  // @@protoc_insertion_point(field_set_char:pb.Preview.text)
}
inline void Preview::set_text(const char* value, size_t size) {
  set_has_text();
  if (text_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    text_ = new ::std::string;
  }
  text_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:pb.Preview.text)
}
inline ::std::string* Preview::mutable_text() {
  set_has_text();
  if (text_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    text_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:pb.Preview.text)
  return text_;
}
inline ::std::string* Preview::release_text() {
  clear_has_text();
  if (text_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = text_;
    text_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void Preview::set_allocated_text(::std::string* text) {
  if (text_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete text_;
  }
  if (text) {
    set_has_text();
    text_ = text;
  } else {
    clear_has_text();
    text_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:pb.Preview.text)
}

// optional double angular_units = 101;
inline bool Preview::has_angular_units() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void Preview::set_has_angular_units() {
  _has_bits_[0] |= 0x00008000u;
}
inline void Preview::clear_has_angular_units() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void Preview::clear_angular_units() {
  angular_units_ = 0;
  clear_has_angular_units();
}
inline double Preview::angular_units() const {
  // @@protoc_insertion_point(field_get:pb.Preview.angular_units)
  return angular_units_;
}
inline void Preview::set_angular_units(double value) {
  set_has_angular_units();
  angular_units_ = value;
  // @@protoc_insertion_point(field_set:pb.Preview.angular_units)
}

// optional double length_units = 102;
inline bool Preview::has_length_units() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void Preview::set_has_length_units() {
  _has_bits_[0] |= 0x00010000u;
}
inline void Preview::clear_has_length_units() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void Preview::clear_length_units() {
  length_units_ = 0;
  clear_has_length_units();
}
inline double Preview::length_units() const {
  // @@protoc_insertion_point(field_get:pb.Preview.length_units)
  return length_units_;
}
inline void Preview::set_length_units(double value) {
  set_has_length_units();
  length_units_ = value;
  // @@protoc_insertion_point(field_set:pb.Preview.length_units)
}

// optional int32 probetype = 103;
inline bool Preview::has_probetype() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void Preview::set_has_probetype() {
  _has_bits_[0] |= 0x00020000u;
}
inline void Preview::clear_has_probetype() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void Preview::clear_probetype() {
  probetype_ = 0;
  clear_has_probetype();
}
inline ::google::protobuf::int32 Preview::probetype() const {
  // @@protoc_insertion_point(field_get:pb.Preview.probetype)
  return probetype_;
}
inline void Preview::set_probetype(::google::protobuf::int32 value) {
  set_has_probetype();
  probetype_ = value;
  // @@protoc_insertion_point(field_set:pb.Preview.probetype)
}

// optional .pb.KinematicsType kins = 104 [default = KT_JOINT];
inline bool Preview::has_kins() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void Preview::set_has_kins() {
  _has_bits_[0] |= 0x00040000u;
}
inline void Preview::clear_has_kins() {
  _has_bits_[0] &= ~0x00040000u;
}
inline void Preview::clear_kins() {
  kins_ = 1;
  clear_has_kins();
}
inline ::pb::KinematicsType Preview::kins() const {
  // @@protoc_insertion_point(field_get:pb.Preview.kins)
  return static_cast< ::pb::KinematicsType >(kins_);
}
inline void Preview::set_kins(::pb::KinematicsType value) {
  assert(::pb::KinematicsType_IsValid(value));
  set_has_kins();
  kins_ = value;
  // @@protoc_insertion_point(field_set:pb.Preview.kins)
}

// optional int32 axismask = 105;
inline bool Preview::has_axismask() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
inline void Preview::set_has_axismask() {
  _has_bits_[0] |= 0x00080000u;
}
inline void Preview::clear_has_axismask() {
  _has_bits_[0] &= ~0x00080000u;
}
inline void Preview::clear_axismask() {
  axismask_ = 0;
  clear_has_axismask();
}
inline ::google::protobuf::int32 Preview::axismask() const {
  // @@protoc_insertion_point(field_get:pb.Preview.axismask)
  return axismask_;
}
inline void Preview::set_axismask(::google::protobuf::int32 value) {
  set_has_axismask();
  axismask_ = value;
  // @@protoc_insertion_point(field_set:pb.Preview.axismask)
}

// optional int32 g5_index = 106;
inline bool Preview::has_g5_index() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
inline void Preview::set_has_g5_index() {
  _has_bits_[0] |= 0x00100000u;
}
inline void Preview::clear_has_g5_index() {
  _has_bits_[0] &= ~0x00100000u;
}
inline void Preview::clear_g5_index() {
  g5_index_ = 0;
  clear_has_g5_index();
}
inline ::google::protobuf::int32 Preview::g5_index() const {
  // @@protoc_insertion_point(field_get:pb.Preview.g5_index)
  return g5_index_;
}
inline void Preview::set_g5_index(::google::protobuf::int32 value) {
  set_has_g5_index();
  g5_index_ = value;
  // @@protoc_insertion_point(field_set:pb.Preview.g5_index)
}

// optional int32 pocket = 107;
inline bool Preview::has_pocket() const {
  return (_has_bits_[0] & 0x00200000u) != 0;
}
inline void Preview::set_has_pocket() {
  _has_bits_[0] |= 0x00200000u;
}
inline void Preview::clear_has_pocket() {
  _has_bits_[0] &= ~0x00200000u;
}
inline void Preview::clear_pocket() {
  pocket_ = 0;
  clear_has_pocket();
}
inline ::google::protobuf::int32 Preview::pocket() const {
  // @@protoc_insertion_point(field_get:pb.Preview.pocket)
  return pocket_;
}
inline void Preview::set_pocket(::google::protobuf::int32 value) {
  set_has_pocket();
  pocket_ = value;
  // @@protoc_insertion_point(field_set:pb.Preview.pocket)
}

// optional .pb.SourceType stype = 110;
inline bool Preview::has_stype() const {
  return (_has_bits_[0] & 0x00400000u) != 0;
}
inline void Preview::set_has_stype() {
  _has_bits_[0] |= 0x00400000u;
}
inline void Preview::clear_has_stype() {
  _has_bits_[0] &= ~0x00400000u;
}
inline void Preview::clear_stype() {
  stype_ = 1;
  clear_has_stype();
}
inline ::pb::SourceType Preview::stype() const {
  // @@protoc_insertion_point(field_get:pb.Preview.stype)
  return static_cast< ::pb::SourceType >(stype_);
}
inline void Preview::set_stype(::pb::SourceType value) {
  assert(::pb::SourceType_IsValid(value));
  set_has_stype();
  stype_ = value;
  // @@protoc_insertion_point(field_set:pb.Preview.stype)
}

// optional string filename = 111;
inline bool Preview::has_filename() const {
  return (_has_bits_[0] & 0x00800000u) != 0;
}
inline void Preview::set_has_filename() {
  _has_bits_[0] |= 0x00800000u;
}
inline void Preview::clear_has_filename() {
  _has_bits_[0] &= ~0x00800000u;
}
inline void Preview::clear_filename() {
  if (filename_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    filename_->clear();
  }
  clear_has_filename();
}
inline const ::std::string& Preview::filename() const {
  // @@protoc_insertion_point(field_get:pb.Preview.filename)
  return *filename_;
}
inline void Preview::set_filename(const ::std::string& value) {
  set_has_filename();
  if (filename_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    filename_ = new ::std::string;
  }
  filename_->assign(value);
  // @@protoc_insertion_point(field_set:pb.Preview.filename)
}
inline void Preview::set_filename(const char* value) {
  set_has_filename();
  if (filename_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    filename_ = new ::std::string;
  }
  filename_->assign(value);
  // @@protoc_insertion_point(field_set_char:pb.Preview.filename)
}
inline void Preview::set_filename(const char* value, size_t size) {
  set_has_filename();
  if (filename_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    filename_ = new ::std::string;
  }
  filename_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:pb.Preview.filename)
}
inline ::std::string* Preview::mutable_filename() {
  set_has_filename();
  if (filename_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    filename_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:pb.Preview.filename)
  return filename_;
}
inline ::std::string* Preview::release_filename() {
  clear_has_filename();
  if (filename_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = filename_;
    filename_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void Preview::set_allocated_filename(::std::string* filename) {
  if (filename_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete filename_;
  }
  if (filename) {
    set_has_filename();
    filename_ = filename;
  } else {
    clear_has_filename();
    filename_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:pb.Preview.filename)
}

// optional string cmdstring = 112;
inline bool Preview::has_cmdstring() const {
  return (_has_bits_[0] & 0x01000000u) != 0;
}
inline void Preview::set_has_cmdstring() {
  _has_bits_[0] |= 0x01000000u;
}
inline void Preview::clear_has_cmdstring() {
  _has_bits_[0] &= ~0x01000000u;
}
inline void Preview::clear_cmdstring() {
  if (cmdstring_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    cmdstring_->clear();
  }
  clear_has_cmdstring();
}
inline const ::std::string& Preview::cmdstring() const {
  // @@protoc_insertion_point(field_get:pb.Preview.cmdstring)
  return *cmdstring_;
}
inline void Preview::set_cmdstring(const ::std::string& value) {
  set_has_cmdstring();
  if (cmdstring_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    cmdstring_ = new ::std::string;
  }
  cmdstring_->assign(value);
  // @@protoc_insertion_point(field_set:pb.Preview.cmdstring)
}
inline void Preview::set_cmdstring(const char* value) {
  set_has_cmdstring();
  if (cmdstring_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    cmdstring_ = new ::std::string;
  }
  cmdstring_->assign(value);
  // @@protoc_insertion_point(field_set_char:pb.Preview.cmdstring)
}
inline void Preview::set_cmdstring(const char* value, size_t size) {
  set_has_cmdstring();
  if (cmdstring_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    cmdstring_ = new ::std::string;
  }
  cmdstring_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:pb.Preview.cmdstring)
}
inline ::std::string* Preview::mutable_cmdstring() {
  set_has_cmdstring();
  if (cmdstring_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    cmdstring_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:pb.Preview.cmdstring)
  return cmdstring_;
}
inline ::std::string* Preview::release_cmdstring() {
  clear_has_cmdstring();
  if (cmdstring_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = cmdstring_;
    cmdstring_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void Preview::set_allocated_cmdstring(::std::string* cmdstring) {
  if (cmdstring_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete cmdstring_;
  }
  if (cmdstring) {
    set_has_cmdstring();
    cmdstring_ = cmdstring;
  } else {
    clear_has_cmdstring();
    cmdstring_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:pb.Preview.cmdstring)
}

// optional int32 call_level = 113;
inline bool Preview::has_call_level() const {
  return (_has_bits_[0] & 0x02000000u) != 0;
}
inline void Preview::set_has_call_level() {
  _has_bits_[0] |= 0x02000000u;
}
inline void Preview::clear_has_call_level() {
  _has_bits_[0] &= ~0x02000000u;
}
inline void Preview::clear_call_level() {
  call_level_ = 0;
  clear_has_call_level();
}
inline ::google::protobuf::int32 Preview::call_level() const {
  // @@protoc_insertion_point(field_get:pb.Preview.call_level)
  return call_level_;
}
inline void Preview::set_call_level(::google::protobuf::int32 value) {
  set_has_call_level();
  call_level_ = value;
  // @@protoc_insertion_point(field_set:pb.Preview.call_level)
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace pb

#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::pb::KinematicsType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::pb::KinematicsType>() {
  return ::pb::KinematicsType_descriptor();
}
template <> struct is_proto_enum< ::pb::PreviewOpType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::pb::PreviewOpType>() {
  return ::pb::PreviewOpType_descriptor();
}
template <> struct is_proto_enum< ::pb::SourceType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::pb::SourceType>() {
  return ::pb::SourceType_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_machinetalk_2fprotobuf_2fpreview_2eproto__INCLUDED
