// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: machinetalk/protobuf/message.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "machinetalk/protobuf/message.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace pb {

namespace {

const ::google::protobuf::Descriptor* Container_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Container_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_machinetalk_2fprotobuf_2fmessage_2eproto() {
  protobuf_AddDesc_machinetalk_2fprotobuf_2fmessage_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "machinetalk/protobuf/message.proto");
  GOOGLE_CHECK(file != NULL);
  Container_descriptor_ = file->message_type(0);
  static const int Container_offsets_[96] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Container, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Container, tsc_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Container, preview_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Container, motcmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Container, motstat_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Container, legacy_motcmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Container, legacy_motstat_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Container, rtapi_message_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Container, task_reply_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Container, ticket_update_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Container, syslog_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Container, legacy_nml_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Container, legacy_motconfig_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Container, tv_sec_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Container, tv_nsec_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Container, topic_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Container, reply_required_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Container, interp_state_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Container, interp_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Container, rsvp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Container, in_reply_to_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Container, rcs_status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Container, status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Container, serial_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Container, reply_serial_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Container, ticket_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Container, reply_ticket_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Container, sequence_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Container, credit_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Container, line_number_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Container, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Container, note_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Container, retcode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Container, uuid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Container, trace_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Container, instance_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Container, value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Container, rtapicmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Container, service_announcement_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Container, comp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Container, pin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Container, signal_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Container, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Container, thread_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Container, ring_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Container, group_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Container, member_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Container, function_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Container, pparams_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Container, vtable_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Container, inst_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Container, app_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Container, launcher_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Container, index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Container, log_message_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Container, tpexecute_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Container, tpblockdelete_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Container, tpoptionalstop_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Container, tpopen_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Container, taskplan_reply_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Container, traj_set_g5x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Container, traj_set_g92_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Container, traj_set_rotation_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Container, traj_linear_move_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Container, traj_probe_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Container, traj_circular_move_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Container, traj_rigid_tap_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Container, traj_set_term_cond_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Container, traj_set_spindlesync_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Container, traj_delay_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Container, spindle_on_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Container, spindle_speed_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Container, spindle_orient_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Container, spindle_wait_orient_complete_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Container, tool_set_offet_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Container, traj_set_offset_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Container, tool_prepare_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Container, tool_set_number_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Container, traj_set_fo_enable_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Container, traj_set_so_enable_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Container, traj_set_fh_enable_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Container, motion_adaptive_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Container, operator_display_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Container, operator_text_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Container, operator_error_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Container, motion_set_dout_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Container, motion_set_aout_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Container, aux_input_wait_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Container, exec_plugin_call_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Container, io_plugin_call_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Container, emc_status_config_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Container, emc_status_motion_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Container, emc_status_io_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Container, emc_status_task_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Container, emc_status_interp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Container, emc_command_params_),
  };
  Container_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Container_descriptor_,
      Container::default_instance_,
      Container_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Container, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Container, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Container));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_machinetalk_2fprotobuf_2fmessage_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Container_descriptor_, &Container::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_machinetalk_2fprotobuf_2fmessage_2eproto() {
  delete Container::default_instance_;
  delete Container_reflection_;
}

void protobuf_AddDesc_machinetalk_2fprotobuf_2fmessage_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::protobuf_AddDesc_machinetalk_2fprotobuf_2fnanopb_2eproto();
  ::pb::protobuf_AddDesc_machinetalk_2fprotobuf_2ftypes_2eproto();
  ::pb::protobuf_AddDesc_machinetalk_2fprotobuf_2fobject_2eproto();
  ::pb::protobuf_AddDesc_machinetalk_2fprotobuf_2flog_2eproto();
  ::pb::protobuf_AddDesc_machinetalk_2fprotobuf_2fmotcmds_2eproto();
  ::pb::protobuf_AddDesc_machinetalk_2fprotobuf_2ftask_2eproto();
  ::pb::protobuf_AddDesc_machinetalk_2fprotobuf_2fcanon_2eproto();
  ::pb::protobuf_AddDesc_machinetalk_2fprotobuf_2fvalue_2eproto();
  ::pb::protobuf_AddDesc_machinetalk_2fprotobuf_2frtapicommand_2eproto();
  ::pb::protobuf_AddDesc_machinetalk_2fprotobuf_2frtapi_5fmessage_2eproto();
  ::pb::protobuf_AddDesc_machinetalk_2fprotobuf_2fconfig_2eproto();
  ::pb::protobuf_AddDesc_machinetalk_2fprotobuf_2fpreview_2eproto();
  ::pb::protobuf_AddDesc_machinetalk_2fprotobuf_2fstatus_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\"machinetalk/protobuf/message.proto\022\002pb"
    "\032!machinetalk/protobuf/nanopb.proto\032 mac"
    "hinetalk/protobuf/types.proto\032!machineta"
    "lk/protobuf/object.proto\032\036machinetalk/pr"
    "otobuf/log.proto\032\"machinetalk/protobuf/m"
    "otcmds.proto\032\037machinetalk/protobuf/task."
    "proto\032 machinetalk/protobuf/canon.proto\032"
    " machinetalk/protobuf/value.proto\032\'machi"
    "netalk/protobuf/rtapicommand.proto\032(mach"
    "inetalk/protobuf/rtapi_message.proto\032!ma"
    "chinetalk/protobuf/config.proto\032\"machine"
    "talk/protobuf/preview.proto\032!machinetalk"
    "/protobuf/status.proto\"\276\035\n\tContainer\022\037\n\004"
    "type\030\001 \002(\0162\021.pb.ContainerType\022\013\n\003tsc\030\007 \001"
    "(\020\022#\n\007preview\030\010 \003(\0132\013.pb.PreviewB\005\222\?\002\030\003\022"
    "!\n\006motcmd\030\t \001(\0132\021.pb.MotionCommand\022!\n\007mo"
    "tstat\030\n \001(\0132\020.pb.MotionStatus\022\034\n\rlegacy_"
    "motcmd\030\013 \001(\014B\005\222\?\002\030\003\022\035\n\016legacy_motstat\030\014 "
    "\001(\014B\005\222\?\002\030\003\022(\n\rrtapi_message\030\r \001(\0132\021.pb.R"
    "TAPI_Message\022(\n\ntask_reply\030\016 \001(\0132\r.pb.Ta"
    "skReplyB\005\222\?\002\030\003\022\'\n\rticket_update\030\017 \001(\0132\020."
    "pb.TicketUpdate\022\025\n\006syslog\030\022 \001(\014B\005\222\?\002\030\003\022\031"
    "\n\nlegacy_nml\030\023 \001(\014B\005\222\?\002\030\003\022\037\n\020legacy_motc"
    "onfig\030\024 \001(\014B\005\222\?\002\030\003\022\016\n\006tv_sec\030\025 \001(\005\022\017\n\007tv"
    "_nsec\030\026 \001(\005\022\r\n\005topic\030\027 \001(\t\022\026\n\016reply_requ"
    "ired\030\030 \001(\010\0225\n\014interp_state\030\031 \001(\0162\030.pb.In"
    "terpreterStateTypeB\005\222\?\002\030\003\022\023\n\013interp_name"
    "\030\032 \001(\t\022\014\n\004rsvp\030\036 \001(\005\022&\n\013in_reply_to\030! \001("
    "\0162\021.pb.ContainerType\022\"\n\nrcs_status\030# \001(\016"
    "2\016.pb.RCS_STATUS\022\036\n\006status\030( \001(\0162\016.pb.St"
    "atusType\022\016\n\006serial\030- \001(\005\022\024\n\014reply_serial"
    "\0302 \001(\005\022\016\n\006ticket\0307 \001(\005\022\024\n\014reply_ticket\030<"
    " \001(\005\022\020\n\010sequence\030> \001(\005\022\016\n\006credit\030A \001(\005\022\023"
    "\n\013line_number\030B \001(\005\022\023\n\004name\030C \001(\tB\005\222\?\002\030\003"
    "\022\014\n\004note\030D \003(\t\022\017\n\007retcode\030E \001(\005\022\023\n\004uuid\030"
    "H \001(\014B\005\222\?\002\030\003\022\r\n\005trace\030K \001(\010\022\020\n\010instance\030"
    "M \001(\005\022\037\n\005value\030U \003(\0132\t.pb.ValueB\005\222\?\002\030\003\022)"
    "\n\010rtapicmd\030V \001(\0132\020.pb.RTAPICommandB\005\222\?\002\030"
    "\003\022<\n\024service_announcement\030X \003(\0132\027.pb.Ser"
    "viceAnnouncementB\005\222\?\002\030\003\022\"\n\004comp\030d \003(\0132\r."
    "pb.ComponentB\005\222\?\002\030\003\022\033\n\003pin\030\002 \003(\0132\007.pb.Pi"
    "nB\005\222\?\002\030\003\022!\n\006signal\030\003 \003(\0132\n.pb.SignalB\005\222\?"
    "\002\030\003\022\037\n\005param\030g \003(\0132\t.pb.ParamB\005\222\?\002\030\003\022!\n\006"
    "thread\030h \003(\0132\n.pb.ThreadB\005\222\?\002\030\003\022\035\n\004ring\030"
    "i \003(\0132\010.pb.RingB\005\222\?\002\030\003\022\037\n\005group\030j \003(\0132\t."
    "pb.GroupB\005\222\?\002\030\003\022!\n\006member\030k \003(\0132\n.pb.Mem"
    "berB\005\222\?\002\030\003\022%\n\010function\030l \003(\0132\014.pb.Functi"
    "onB\005\222\?\002\030\003\022.\n\007pparams\030m \001(\0132\026.pb.Protocol"
    "ParametersB\005\222\?\002\030\003\022!\n\006vtable\030n \003(\0132\n.pb.V"
    "tableB\005\222\?\002\030\003\022\035\n\004inst\030o \003(\0132\010.pb.InstB\005\222\?"
    "\002\030\003\022#\n\003app\030x \003(\0132\017.pb.ApplicationB\005\222\?\002\030\003"
    "\022&\n\010launcher\030\202\001 \003(\0132\014.pb.LauncherB\005\222\?\002\030\003"
    "\022\025\n\005index\030\203\001 \001(\005B\005\222\?\002\030\003\022*\n\013log_message\030W"
    " \001(\0132\016.pb.LogMessageB\005\222\?\002\030\003\022.\n\ttpexecute"
    "\030\310\001 \001(\0132\023.pb.TaskPlanExecuteB\005\222\?\002\030\003\0226\n\rt"
    "pblockdelete\030\311\001 \001(\0132\027.pb.TaskPlanBlockDe"
    "leteB\005\222\?\002\030\003\0228\n\016tpoptionalstop\030\312\001 \001(\0132\030.p"
    "b.TaskPlanOptionalStopB\005\222\?\002\030\003\022(\n\006tpopen\030"
    "\313\001 \001(\0132\020.pb.TaskPlanOpenB\005\222\?\002\030\003\0221\n\016taskp"
    "lan_reply\030\322\001 \001(\0132\021.pb.TaskPlanReplyB\005\222\?\002"
    "\030\003\022+\n\014traj_set_g5x\030\254\002 \001(\0132\024.pb.Emc_Traj_"
    "Set_G5x\022+\n\014traj_set_g92\030\266\002 \001(\0132\024.pb.Emc_"
    "Traj_Set_G92\0225\n\021traj_set_rotation\030\300\002 \001(\013"
    "2\031.pb.Emc_Traj_Set_Rotation\0223\n\020traj_line"
    "ar_move\030\312\002 \001(\0132\030.pb.Emc_Traj_Linear_Move"
    "\022\'\n\ntraj_probe\030\324\002 \001(\0132\022.pb.Emc_Traj_Prob"
    "e\0227\n\022traj_circular_move\030\336\002 \001(\0132\032.pb.Emc_"
    "Traj_Circular_Move\022/\n\016traj_rigid_tap\030\350\002 "
    "\001(\0132\026.pb.Emc_Traj_Rigid_Tap\0227\n\022traj_set_"
    "term_cond\030\362\002 \001(\0132\032.pb.Emc_Traj_Set_Term_"
    "Cond\022;\n\024traj_set_spindlesync\030\374\002 \001(\0132\034.pb"
    ".Emc_Traj_Set_Spindlesync\022\'\n\ntraj_delay\030"
    "\206\003 \001(\0132\022.pb.Emc_Traj_Delay\022\'\n\nspindle_on"
    "\030\220\003 \001(\0132\022.pb.Emc_Spindle_On\022-\n\rspindle_s"
    "peed\030\232\003 \001(\0132\025.pb.Emc_Spindle_Speed\022/\n\016sp"
    "indle_orient\030\244\003 \001(\0132\026.pb.Emc_Spindle_Ori"
    "ent\022K\n\034spindle_wait_orient_complete\030\256\003 \001"
    "(\0132$.pb.Emc_Spindle_Wait_Orient_Complete"
    "\0220\n\016tool_set_offet\030\270\003 \001(\0132\027.pb.Emc_Tool_"
    "Set_Offset\0221\n\017traj_set_offset\030\302\003 \001(\0132\027.p"
    "b.Emc_Traj_Set_Offset\022+\n\014tool_prepare\030\314\003"
    " \001(\0132\024.pb.Emc_Tool_Prepare\0221\n\017tool_set_n"
    "umber\030\326\003 \001(\0132\027.pb.Emc_Tool_Set_Number\0227\n"
    "\022traj_set_fo_enable\030\340\003 \001(\0132\032.pb.Emc_Traj"
    "_Set_Fo_Enable\0227\n\022traj_set_so_enable\030\352\003 "
    "\001(\0132\032.pb.Emc_Traj_Set_So_Enable\0227\n\022traj_"
    "set_fh_enable\030\364\003 \001(\0132\032.pb.Emc_Traj_Set_F"
    "h_Enable\0221\n\017motion_adaptive\030\376\003 \001(\0132\027.pb."
    "Emc_Motion_Adaptive\0223\n\020operator_display\030"
    "\210\004 \001(\0132\030.pb.Emc_Operator_Display\022-\n\roper"
    "ator_text\030\222\004 \001(\0132\025.pb.Emc_Operator_Text\022"
    "/\n\016operator_error\030\234\004 \001(\0132\026.pb.Emc_Operat"
    "or_Error\0221\n\017motion_set_dout\030\246\004 \001(\0132\027.pb."
    "Emc_Motion_Set_Dout\0221\n\017motion_set_aout\030\260"
    "\004 \001(\0132\027.pb.Emc_Motion_Set_Aout\022/\n\016aux_in"
    "put_wait\030\272\004 \001(\0132\026.pb.Emc_Aux_Input_Wait\022"
    "3\n\020exec_plugin_call\030\304\004 \001(\0132\030.pb.Emc_Exec"
    "_Plugin_Ca1l\022/\n\016io_plugin_call\030\316\004 \001(\0132\026."
    "pb.Emc_Io_Plugin_Call\0226\n\021emc_status_conf"
    "ig\030\330\004 \001(\0132\023.pb.EmcStatusConfigB\005\222\?\002\030\003\0226\n"
    "\021emc_status_motion\030\331\004 \001(\0132\023.pb.EmcStatus"
    "MotionB\005\222\?\002\030\003\022.\n\remc_status_io\030\332\004 \001(\0132\017."
    "pb.EmcStatusIoB\005\222\?\002\030\003\0222\n\017emc_status_task"
    "\030\333\004 \001(\0132\021.pb.EmcStatusTaskB\005\222\?\002\030\003\0226\n\021emc"
    "_status_interp\030\334\004 \001(\0132\023.pb.EmcStatusInte"
    "rpB\005\222\?\002\030\003\022<\n\022emc_command_params\030\342\004 \001(\0132\030"
    ".pb.EmcCommandParametersB\005\222\?\002\030\003:\006\222\?\003H\364\003", 4279);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "machinetalk/protobuf/message.proto", &protobuf_RegisterTypes);
  Container::default_instance_ = new Container();
  Container::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_machinetalk_2fprotobuf_2fmessage_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_machinetalk_2fprotobuf_2fmessage_2eproto {
  StaticDescriptorInitializer_machinetalk_2fprotobuf_2fmessage_2eproto() {
    protobuf_AddDesc_machinetalk_2fprotobuf_2fmessage_2eproto();
  }
} static_descriptor_initializer_machinetalk_2fprotobuf_2fmessage_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int Container::kTypeFieldNumber;
const int Container::kTscFieldNumber;
const int Container::kPreviewFieldNumber;
const int Container::kMotcmdFieldNumber;
const int Container::kMotstatFieldNumber;
const int Container::kLegacyMotcmdFieldNumber;
const int Container::kLegacyMotstatFieldNumber;
const int Container::kRtapiMessageFieldNumber;
const int Container::kTaskReplyFieldNumber;
const int Container::kTicketUpdateFieldNumber;
const int Container::kSyslogFieldNumber;
const int Container::kLegacyNmlFieldNumber;
const int Container::kLegacyMotconfigFieldNumber;
const int Container::kTvSecFieldNumber;
const int Container::kTvNsecFieldNumber;
const int Container::kTopicFieldNumber;
const int Container::kReplyRequiredFieldNumber;
const int Container::kInterpStateFieldNumber;
const int Container::kInterpNameFieldNumber;
const int Container::kRsvpFieldNumber;
const int Container::kInReplyToFieldNumber;
const int Container::kRcsStatusFieldNumber;
const int Container::kStatusFieldNumber;
const int Container::kSerialFieldNumber;
const int Container::kReplySerialFieldNumber;
const int Container::kTicketFieldNumber;
const int Container::kReplyTicketFieldNumber;
const int Container::kSequenceFieldNumber;
const int Container::kCreditFieldNumber;
const int Container::kLineNumberFieldNumber;
const int Container::kNameFieldNumber;
const int Container::kNoteFieldNumber;
const int Container::kRetcodeFieldNumber;
const int Container::kUuidFieldNumber;
const int Container::kTraceFieldNumber;
const int Container::kInstanceFieldNumber;
const int Container::kValueFieldNumber;
const int Container::kRtapicmdFieldNumber;
const int Container::kServiceAnnouncementFieldNumber;
const int Container::kCompFieldNumber;
const int Container::kPinFieldNumber;
const int Container::kSignalFieldNumber;
const int Container::kParamFieldNumber;
const int Container::kThreadFieldNumber;
const int Container::kRingFieldNumber;
const int Container::kGroupFieldNumber;
const int Container::kMemberFieldNumber;
const int Container::kFunctionFieldNumber;
const int Container::kPparamsFieldNumber;
const int Container::kVtableFieldNumber;
const int Container::kInstFieldNumber;
const int Container::kAppFieldNumber;
const int Container::kLauncherFieldNumber;
const int Container::kIndexFieldNumber;
const int Container::kLogMessageFieldNumber;
const int Container::kTpexecuteFieldNumber;
const int Container::kTpblockdeleteFieldNumber;
const int Container::kTpoptionalstopFieldNumber;
const int Container::kTpopenFieldNumber;
const int Container::kTaskplanReplyFieldNumber;
const int Container::kTrajSetG5XFieldNumber;
const int Container::kTrajSetG92FieldNumber;
const int Container::kTrajSetRotationFieldNumber;
const int Container::kTrajLinearMoveFieldNumber;
const int Container::kTrajProbeFieldNumber;
const int Container::kTrajCircularMoveFieldNumber;
const int Container::kTrajRigidTapFieldNumber;
const int Container::kTrajSetTermCondFieldNumber;
const int Container::kTrajSetSpindlesyncFieldNumber;
const int Container::kTrajDelayFieldNumber;
const int Container::kSpindleOnFieldNumber;
const int Container::kSpindleSpeedFieldNumber;
const int Container::kSpindleOrientFieldNumber;
const int Container::kSpindleWaitOrientCompleteFieldNumber;
const int Container::kToolSetOffetFieldNumber;
const int Container::kTrajSetOffsetFieldNumber;
const int Container::kToolPrepareFieldNumber;
const int Container::kToolSetNumberFieldNumber;
const int Container::kTrajSetFoEnableFieldNumber;
const int Container::kTrajSetSoEnableFieldNumber;
const int Container::kTrajSetFhEnableFieldNumber;
const int Container::kMotionAdaptiveFieldNumber;
const int Container::kOperatorDisplayFieldNumber;
const int Container::kOperatorTextFieldNumber;
const int Container::kOperatorErrorFieldNumber;
const int Container::kMotionSetDoutFieldNumber;
const int Container::kMotionSetAoutFieldNumber;
const int Container::kAuxInputWaitFieldNumber;
const int Container::kExecPluginCallFieldNumber;
const int Container::kIoPluginCallFieldNumber;
const int Container::kEmcStatusConfigFieldNumber;
const int Container::kEmcStatusMotionFieldNumber;
const int Container::kEmcStatusIoFieldNumber;
const int Container::kEmcStatusTaskFieldNumber;
const int Container::kEmcStatusInterpFieldNumber;
const int Container::kEmcCommandParamsFieldNumber;
#endif  // !_MSC_VER

Container::Container()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.Container)
}

void Container::InitAsDefaultInstance() {
  motcmd_ = const_cast< ::pb::MotionCommand*>(&::pb::MotionCommand::default_instance());
  motstat_ = const_cast< ::pb::MotionStatus*>(&::pb::MotionStatus::default_instance());
  rtapi_message_ = const_cast< ::pb::RTAPI_Message*>(&::pb::RTAPI_Message::default_instance());
  task_reply_ = const_cast< ::pb::TaskReply*>(&::pb::TaskReply::default_instance());
  ticket_update_ = const_cast< ::pb::TicketUpdate*>(&::pb::TicketUpdate::default_instance());
  rtapicmd_ = const_cast< ::pb::RTAPICommand*>(&::pb::RTAPICommand::default_instance());
  pparams_ = const_cast< ::pb::ProtocolParameters*>(&::pb::ProtocolParameters::default_instance());
  log_message_ = const_cast< ::pb::LogMessage*>(&::pb::LogMessage::default_instance());
  tpexecute_ = const_cast< ::pb::TaskPlanExecute*>(&::pb::TaskPlanExecute::default_instance());
  tpblockdelete_ = const_cast< ::pb::TaskPlanBlockDelete*>(&::pb::TaskPlanBlockDelete::default_instance());
  tpoptionalstop_ = const_cast< ::pb::TaskPlanOptionalStop*>(&::pb::TaskPlanOptionalStop::default_instance());
  tpopen_ = const_cast< ::pb::TaskPlanOpen*>(&::pb::TaskPlanOpen::default_instance());
  taskplan_reply_ = const_cast< ::pb::TaskPlanReply*>(&::pb::TaskPlanReply::default_instance());
  traj_set_g5x_ = const_cast< ::pb::Emc_Traj_Set_G5x*>(&::pb::Emc_Traj_Set_G5x::default_instance());
  traj_set_g92_ = const_cast< ::pb::Emc_Traj_Set_G92*>(&::pb::Emc_Traj_Set_G92::default_instance());
  traj_set_rotation_ = const_cast< ::pb::Emc_Traj_Set_Rotation*>(&::pb::Emc_Traj_Set_Rotation::default_instance());
  traj_linear_move_ = const_cast< ::pb::Emc_Traj_Linear_Move*>(&::pb::Emc_Traj_Linear_Move::default_instance());
  traj_probe_ = const_cast< ::pb::Emc_Traj_Probe*>(&::pb::Emc_Traj_Probe::default_instance());
  traj_circular_move_ = const_cast< ::pb::Emc_Traj_Circular_Move*>(&::pb::Emc_Traj_Circular_Move::default_instance());
  traj_rigid_tap_ = const_cast< ::pb::Emc_Traj_Rigid_Tap*>(&::pb::Emc_Traj_Rigid_Tap::default_instance());
  traj_set_term_cond_ = const_cast< ::pb::Emc_Traj_Set_Term_Cond*>(&::pb::Emc_Traj_Set_Term_Cond::default_instance());
  traj_set_spindlesync_ = const_cast< ::pb::Emc_Traj_Set_Spindlesync*>(&::pb::Emc_Traj_Set_Spindlesync::default_instance());
  traj_delay_ = const_cast< ::pb::Emc_Traj_Delay*>(&::pb::Emc_Traj_Delay::default_instance());
  spindle_on_ = const_cast< ::pb::Emc_Spindle_On*>(&::pb::Emc_Spindle_On::default_instance());
  spindle_speed_ = const_cast< ::pb::Emc_Spindle_Speed*>(&::pb::Emc_Spindle_Speed::default_instance());
  spindle_orient_ = const_cast< ::pb::Emc_Spindle_Orient*>(&::pb::Emc_Spindle_Orient::default_instance());
  spindle_wait_orient_complete_ = const_cast< ::pb::Emc_Spindle_Wait_Orient_Complete*>(&::pb::Emc_Spindle_Wait_Orient_Complete::default_instance());
  tool_set_offet_ = const_cast< ::pb::Emc_Tool_Set_Offset*>(&::pb::Emc_Tool_Set_Offset::default_instance());
  traj_set_offset_ = const_cast< ::pb::Emc_Traj_Set_Offset*>(&::pb::Emc_Traj_Set_Offset::default_instance());
  tool_prepare_ = const_cast< ::pb::Emc_Tool_Prepare*>(&::pb::Emc_Tool_Prepare::default_instance());
  tool_set_number_ = const_cast< ::pb::Emc_Tool_Set_Number*>(&::pb::Emc_Tool_Set_Number::default_instance());
  traj_set_fo_enable_ = const_cast< ::pb::Emc_Traj_Set_Fo_Enable*>(&::pb::Emc_Traj_Set_Fo_Enable::default_instance());
  traj_set_so_enable_ = const_cast< ::pb::Emc_Traj_Set_So_Enable*>(&::pb::Emc_Traj_Set_So_Enable::default_instance());
  traj_set_fh_enable_ = const_cast< ::pb::Emc_Traj_Set_Fh_Enable*>(&::pb::Emc_Traj_Set_Fh_Enable::default_instance());
  motion_adaptive_ = const_cast< ::pb::Emc_Motion_Adaptive*>(&::pb::Emc_Motion_Adaptive::default_instance());
  operator_display_ = const_cast< ::pb::Emc_Operator_Display*>(&::pb::Emc_Operator_Display::default_instance());
  operator_text_ = const_cast< ::pb::Emc_Operator_Text*>(&::pb::Emc_Operator_Text::default_instance());
  operator_error_ = const_cast< ::pb::Emc_Operator_Error*>(&::pb::Emc_Operator_Error::default_instance());
  motion_set_dout_ = const_cast< ::pb::Emc_Motion_Set_Dout*>(&::pb::Emc_Motion_Set_Dout::default_instance());
  motion_set_aout_ = const_cast< ::pb::Emc_Motion_Set_Aout*>(&::pb::Emc_Motion_Set_Aout::default_instance());
  aux_input_wait_ = const_cast< ::pb::Emc_Aux_Input_Wait*>(&::pb::Emc_Aux_Input_Wait::default_instance());
  exec_plugin_call_ = const_cast< ::pb::Emc_Exec_Plugin_Ca1l*>(&::pb::Emc_Exec_Plugin_Ca1l::default_instance());
  io_plugin_call_ = const_cast< ::pb::Emc_Io_Plugin_Call*>(&::pb::Emc_Io_Plugin_Call::default_instance());
  emc_status_config_ = const_cast< ::pb::EmcStatusConfig*>(&::pb::EmcStatusConfig::default_instance());
  emc_status_motion_ = const_cast< ::pb::EmcStatusMotion*>(&::pb::EmcStatusMotion::default_instance());
  emc_status_io_ = const_cast< ::pb::EmcStatusIo*>(&::pb::EmcStatusIo::default_instance());
  emc_status_task_ = const_cast< ::pb::EmcStatusTask*>(&::pb::EmcStatusTask::default_instance());
  emc_status_interp_ = const_cast< ::pb::EmcStatusInterp*>(&::pb::EmcStatusInterp::default_instance());
  emc_command_params_ = const_cast< ::pb::EmcCommandParameters*>(&::pb::EmcCommandParameters::default_instance());
}

Container::Container(const Container& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.Container)
}

void Container::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  type_ = 2;
  tsc_ = GOOGLE_LONGLONG(0);
  motcmd_ = NULL;
  motstat_ = NULL;
  legacy_motcmd_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  legacy_motstat_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  rtapi_message_ = NULL;
  task_reply_ = NULL;
  ticket_update_ = NULL;
  syslog_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  legacy_nml_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  legacy_motconfig_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  tv_sec_ = 0;
  tv_nsec_ = 0;
  topic_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  reply_required_ = false;
  interp_state_ = 1;
  interp_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  rsvp_ = 0;
  in_reply_to_ = 2;
  rcs_status_ = -1;
  status_ = 1;
  serial_ = 0;
  reply_serial_ = 0;
  ticket_ = 0;
  reply_ticket_ = 0;
  sequence_ = 0;
  credit_ = 0;
  line_number_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  retcode_ = 0;
  uuid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  trace_ = false;
  instance_ = 0;
  rtapicmd_ = NULL;
  pparams_ = NULL;
  index_ = 0;
  log_message_ = NULL;
  tpexecute_ = NULL;
  tpblockdelete_ = NULL;
  tpoptionalstop_ = NULL;
  tpopen_ = NULL;
  taskplan_reply_ = NULL;
  traj_set_g5x_ = NULL;
  traj_set_g92_ = NULL;
  traj_set_rotation_ = NULL;
  traj_linear_move_ = NULL;
  traj_probe_ = NULL;
  traj_circular_move_ = NULL;
  traj_rigid_tap_ = NULL;
  traj_set_term_cond_ = NULL;
  traj_set_spindlesync_ = NULL;
  traj_delay_ = NULL;
  spindle_on_ = NULL;
  spindle_speed_ = NULL;
  spindle_orient_ = NULL;
  spindle_wait_orient_complete_ = NULL;
  tool_set_offet_ = NULL;
  traj_set_offset_ = NULL;
  tool_prepare_ = NULL;
  tool_set_number_ = NULL;
  traj_set_fo_enable_ = NULL;
  traj_set_so_enable_ = NULL;
  traj_set_fh_enable_ = NULL;
  motion_adaptive_ = NULL;
  operator_display_ = NULL;
  operator_text_ = NULL;
  operator_error_ = NULL;
  motion_set_dout_ = NULL;
  motion_set_aout_ = NULL;
  aux_input_wait_ = NULL;
  exec_plugin_call_ = NULL;
  io_plugin_call_ = NULL;
  emc_status_config_ = NULL;
  emc_status_motion_ = NULL;
  emc_status_io_ = NULL;
  emc_status_task_ = NULL;
  emc_status_interp_ = NULL;
  emc_command_params_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Container::~Container() {
  // @@protoc_insertion_point(destructor:pb.Container)
  SharedDtor();
}

void Container::SharedDtor() {
  if (legacy_motcmd_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete legacy_motcmd_;
  }
  if (legacy_motstat_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete legacy_motstat_;
  }
  if (syslog_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete syslog_;
  }
  if (legacy_nml_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete legacy_nml_;
  }
  if (legacy_motconfig_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete legacy_motconfig_;
  }
  if (topic_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete topic_;
  }
  if (interp_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete interp_name_;
  }
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (uuid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete uuid_;
  }
  if (this != default_instance_) {
    delete motcmd_;
    delete motstat_;
    delete rtapi_message_;
    delete task_reply_;
    delete ticket_update_;
    delete rtapicmd_;
    delete pparams_;
    delete log_message_;
    delete tpexecute_;
    delete tpblockdelete_;
    delete tpoptionalstop_;
    delete tpopen_;
    delete taskplan_reply_;
    delete traj_set_g5x_;
    delete traj_set_g92_;
    delete traj_set_rotation_;
    delete traj_linear_move_;
    delete traj_probe_;
    delete traj_circular_move_;
    delete traj_rigid_tap_;
    delete traj_set_term_cond_;
    delete traj_set_spindlesync_;
    delete traj_delay_;
    delete spindle_on_;
    delete spindle_speed_;
    delete spindle_orient_;
    delete spindle_wait_orient_complete_;
    delete tool_set_offet_;
    delete traj_set_offset_;
    delete tool_prepare_;
    delete tool_set_number_;
    delete traj_set_fo_enable_;
    delete traj_set_so_enable_;
    delete traj_set_fh_enable_;
    delete motion_adaptive_;
    delete operator_display_;
    delete operator_text_;
    delete operator_error_;
    delete motion_set_dout_;
    delete motion_set_aout_;
    delete aux_input_wait_;
    delete exec_plugin_call_;
    delete io_plugin_call_;
    delete emc_status_config_;
    delete emc_status_motion_;
    delete emc_status_io_;
    delete emc_status_task_;
    delete emc_status_interp_;
    delete emc_command_params_;
  }
}

void Container::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Container::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Container_descriptor_;
}

const Container& Container::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_machinetalk_2fprotobuf_2fmessage_2eproto();
  return *default_instance_;
}

Container* Container::default_instance_ = NULL;

Container* Container::New() const {
  return new Container;
}

void Container::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<Container*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 251) {
    type_ = 2;
    tsc_ = GOOGLE_LONGLONG(0);
    if (has_motcmd()) {
      if (motcmd_ != NULL) motcmd_->::pb::MotionCommand::Clear();
    }
    if (has_motstat()) {
      if (motstat_ != NULL) motstat_->::pb::MotionStatus::Clear();
    }
    if (has_legacy_motcmd()) {
      if (legacy_motcmd_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        legacy_motcmd_->clear();
      }
    }
    if (has_legacy_motstat()) {
      if (legacy_motstat_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        legacy_motstat_->clear();
      }
    }
    if (has_rtapi_message()) {
      if (rtapi_message_ != NULL) rtapi_message_->::pb::RTAPI_Message::Clear();
    }
  }
  if (_has_bits_[8 / 32] & 65280) {
    if (has_task_reply()) {
      if (task_reply_ != NULL) task_reply_->::pb::TaskReply::Clear();
    }
    if (has_ticket_update()) {
      if (ticket_update_ != NULL) ticket_update_->::pb::TicketUpdate::Clear();
    }
    if (has_syslog()) {
      if (syslog_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        syslog_->clear();
      }
    }
    if (has_legacy_nml()) {
      if (legacy_nml_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        legacy_nml_->clear();
      }
    }
    if (has_legacy_motconfig()) {
      if (legacy_motconfig_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        legacy_motconfig_->clear();
      }
    }
    tv_sec_ = 0;
    tv_nsec_ = 0;
    if (has_topic()) {
      if (topic_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        topic_->clear();
      }
    }
  }
  if (_has_bits_[16 / 32] & 16711680) {
    reply_required_ = false;
    interp_state_ = 1;
    if (has_interp_name()) {
      if (interp_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        interp_name_->clear();
      }
    }
    rsvp_ = 0;
    in_reply_to_ = 2;
    rcs_status_ = -1;
    status_ = 1;
    serial_ = 0;
  }
  if (_has_bits_[24 / 32] & 2130706432) {
    ZR_(reply_serial_, ticket_);
    ZR_(reply_ticket_, line_number_);
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        name_->clear();
      }
    }
  }
  if (_has_bits_[32 / 32] & 47) {
    ZR_(retcode_, instance_);
    if (has_uuid()) {
      if (uuid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        uuid_->clear();
      }
    }
    trace_ = false;
    if (has_rtapicmd()) {
      if (rtapicmd_ != NULL) rtapicmd_->::pb::RTAPICommand::Clear();
    }
  }
  if (_has_bits_[48 / 32] & 14745600) {
    if (has_pparams()) {
      if (pparams_ != NULL) pparams_->::pb::ProtocolParameters::Clear();
    }
    index_ = 0;
    if (has_log_message()) {
      if (log_message_ != NULL) log_message_->::pb::LogMessage::Clear();
    }
    if (has_tpexecute()) {
      if (tpexecute_ != NULL) tpexecute_->::pb::TaskPlanExecute::Clear();
    }
  }
  if (_has_bits_[56 / 32] & 4278190080) {
    if (has_tpblockdelete()) {
      if (tpblockdelete_ != NULL) tpblockdelete_->::pb::TaskPlanBlockDelete::Clear();
    }
    if (has_tpoptionalstop()) {
      if (tpoptionalstop_ != NULL) tpoptionalstop_->::pb::TaskPlanOptionalStop::Clear();
    }
    if (has_tpopen()) {
      if (tpopen_ != NULL) tpopen_->::pb::TaskPlanOpen::Clear();
    }
    if (has_taskplan_reply()) {
      if (taskplan_reply_ != NULL) taskplan_reply_->::pb::TaskPlanReply::Clear();
    }
    if (has_traj_set_g5x()) {
      if (traj_set_g5x_ != NULL) traj_set_g5x_->::pb::Emc_Traj_Set_G5x::Clear();
    }
    if (has_traj_set_g92()) {
      if (traj_set_g92_ != NULL) traj_set_g92_->::pb::Emc_Traj_Set_G92::Clear();
    }
    if (has_traj_set_rotation()) {
      if (traj_set_rotation_ != NULL) traj_set_rotation_->::pb::Emc_Traj_Set_Rotation::Clear();
    }
    if (has_traj_linear_move()) {
      if (traj_linear_move_ != NULL) traj_linear_move_->::pb::Emc_Traj_Linear_Move::Clear();
    }
  }
  if (_has_bits_[64 / 32] & 255) {
    if (has_traj_probe()) {
      if (traj_probe_ != NULL) traj_probe_->::pb::Emc_Traj_Probe::Clear();
    }
    if (has_traj_circular_move()) {
      if (traj_circular_move_ != NULL) traj_circular_move_->::pb::Emc_Traj_Circular_Move::Clear();
    }
    if (has_traj_rigid_tap()) {
      if (traj_rigid_tap_ != NULL) traj_rigid_tap_->::pb::Emc_Traj_Rigid_Tap::Clear();
    }
    if (has_traj_set_term_cond()) {
      if (traj_set_term_cond_ != NULL) traj_set_term_cond_->::pb::Emc_Traj_Set_Term_Cond::Clear();
    }
    if (has_traj_set_spindlesync()) {
      if (traj_set_spindlesync_ != NULL) traj_set_spindlesync_->::pb::Emc_Traj_Set_Spindlesync::Clear();
    }
    if (has_traj_delay()) {
      if (traj_delay_ != NULL) traj_delay_->::pb::Emc_Traj_Delay::Clear();
    }
    if (has_spindle_on()) {
      if (spindle_on_ != NULL) spindle_on_->::pb::Emc_Spindle_On::Clear();
    }
    if (has_spindle_speed()) {
      if (spindle_speed_ != NULL) spindle_speed_->::pb::Emc_Spindle_Speed::Clear();
    }
  }
  if (_has_bits_[72 / 32] & 65280) {
    if (has_spindle_orient()) {
      if (spindle_orient_ != NULL) spindle_orient_->::pb::Emc_Spindle_Orient::Clear();
    }
    if (has_spindle_wait_orient_complete()) {
      if (spindle_wait_orient_complete_ != NULL) spindle_wait_orient_complete_->::pb::Emc_Spindle_Wait_Orient_Complete::Clear();
    }
    if (has_tool_set_offet()) {
      if (tool_set_offet_ != NULL) tool_set_offet_->::pb::Emc_Tool_Set_Offset::Clear();
    }
    if (has_traj_set_offset()) {
      if (traj_set_offset_ != NULL) traj_set_offset_->::pb::Emc_Traj_Set_Offset::Clear();
    }
    if (has_tool_prepare()) {
      if (tool_prepare_ != NULL) tool_prepare_->::pb::Emc_Tool_Prepare::Clear();
    }
    if (has_tool_set_number()) {
      if (tool_set_number_ != NULL) tool_set_number_->::pb::Emc_Tool_Set_Number::Clear();
    }
    if (has_traj_set_fo_enable()) {
      if (traj_set_fo_enable_ != NULL) traj_set_fo_enable_->::pb::Emc_Traj_Set_Fo_Enable::Clear();
    }
    if (has_traj_set_so_enable()) {
      if (traj_set_so_enable_ != NULL) traj_set_so_enable_->::pb::Emc_Traj_Set_So_Enable::Clear();
    }
  }
  if (_has_bits_[80 / 32] & 16711680) {
    if (has_traj_set_fh_enable()) {
      if (traj_set_fh_enable_ != NULL) traj_set_fh_enable_->::pb::Emc_Traj_Set_Fh_Enable::Clear();
    }
    if (has_motion_adaptive()) {
      if (motion_adaptive_ != NULL) motion_adaptive_->::pb::Emc_Motion_Adaptive::Clear();
    }
    if (has_operator_display()) {
      if (operator_display_ != NULL) operator_display_->::pb::Emc_Operator_Display::Clear();
    }
    if (has_operator_text()) {
      if (operator_text_ != NULL) operator_text_->::pb::Emc_Operator_Text::Clear();
    }
    if (has_operator_error()) {
      if (operator_error_ != NULL) operator_error_->::pb::Emc_Operator_Error::Clear();
    }
    if (has_motion_set_dout()) {
      if (motion_set_dout_ != NULL) motion_set_dout_->::pb::Emc_Motion_Set_Dout::Clear();
    }
    if (has_motion_set_aout()) {
      if (motion_set_aout_ != NULL) motion_set_aout_->::pb::Emc_Motion_Set_Aout::Clear();
    }
    if (has_aux_input_wait()) {
      if (aux_input_wait_ != NULL) aux_input_wait_->::pb::Emc_Aux_Input_Wait::Clear();
    }
  }
  if (_has_bits_[88 / 32] & 4278190080) {
    if (has_exec_plugin_call()) {
      if (exec_plugin_call_ != NULL) exec_plugin_call_->::pb::Emc_Exec_Plugin_Ca1l::Clear();
    }
    if (has_io_plugin_call()) {
      if (io_plugin_call_ != NULL) io_plugin_call_->::pb::Emc_Io_Plugin_Call::Clear();
    }
    if (has_emc_status_config()) {
      if (emc_status_config_ != NULL) emc_status_config_->::pb::EmcStatusConfig::Clear();
    }
    if (has_emc_status_motion()) {
      if (emc_status_motion_ != NULL) emc_status_motion_->::pb::EmcStatusMotion::Clear();
    }
    if (has_emc_status_io()) {
      if (emc_status_io_ != NULL) emc_status_io_->::pb::EmcStatusIo::Clear();
    }
    if (has_emc_status_task()) {
      if (emc_status_task_ != NULL) emc_status_task_->::pb::EmcStatusTask::Clear();
    }
    if (has_emc_status_interp()) {
      if (emc_status_interp_ != NULL) emc_status_interp_->::pb::EmcStatusInterp::Clear();
    }
    if (has_emc_command_params()) {
      if (emc_command_params_ != NULL) emc_command_params_->::pb::EmcCommandParameters::Clear();
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  preview_.Clear();
  note_.Clear();
  value_.Clear();
  service_announcement_.Clear();
  comp_.Clear();
  pin_.Clear();
  signal_.Clear();
  param_.Clear();
  thread_.Clear();
  ring_.Clear();
  group_.Clear();
  member_.Clear();
  function_.Clear();
  vtable_.Clear();
  inst_.Clear();
  app_.Clear();
  launcher_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Container::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.Container)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .pb.ContainerType type = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::pb::ContainerType_IsValid(value)) {
            set_type(static_cast< ::pb::ContainerType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_pin;
        break;
      }

      // repeated .pb.Pin pin = 2;
      case 2: {
        if (tag == 18) {
         parse_pin:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_pin()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_pin;
        if (input->ExpectTag(26)) goto parse_signal;
        break;
      }

      // repeated .pb.Signal signal = 3;
      case 3: {
        if (tag == 26) {
         parse_signal:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_signal()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_signal;
        if (input->ExpectTag(57)) goto parse_tsc;
        break;
      }

      // optional sfixed64 tsc = 7;
      case 7: {
        if (tag == 57) {
         parse_tsc:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED64>(
                 input, &tsc_)));
          set_has_tsc();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_preview;
        break;
      }

      // repeated .pb.Preview preview = 8;
      case 8: {
        if (tag == 66) {
         parse_preview:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_preview()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_preview;
        if (input->ExpectTag(74)) goto parse_motcmd;
        break;
      }

      // optional .pb.MotionCommand motcmd = 9;
      case 9: {
        if (tag == 74) {
         parse_motcmd:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_motcmd()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(82)) goto parse_motstat;
        break;
      }

      // optional .pb.MotionStatus motstat = 10;
      case 10: {
        if (tag == 82) {
         parse_motstat:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_motstat()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(90)) goto parse_legacy_motcmd;
        break;
      }

      // optional bytes legacy_motcmd = 11;
      case 11: {
        if (tag == 90) {
         parse_legacy_motcmd:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_legacy_motcmd()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(98)) goto parse_legacy_motstat;
        break;
      }

      // optional bytes legacy_motstat = 12;
      case 12: {
        if (tag == 98) {
         parse_legacy_motstat:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_legacy_motstat()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(106)) goto parse_rtapi_message;
        break;
      }

      // optional .pb.RTAPI_Message rtapi_message = 13;
      case 13: {
        if (tag == 106) {
         parse_rtapi_message:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_rtapi_message()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(114)) goto parse_task_reply;
        break;
      }

      // optional .pb.TaskReply task_reply = 14;
      case 14: {
        if (tag == 114) {
         parse_task_reply:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_task_reply()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(122)) goto parse_ticket_update;
        break;
      }

      // optional .pb.TicketUpdate ticket_update = 15;
      case 15: {
        if (tag == 122) {
         parse_ticket_update:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_ticket_update()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(146)) goto parse_syslog;
        break;
      }

      // optional bytes syslog = 18;
      case 18: {
        if (tag == 146) {
         parse_syslog:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_syslog()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(154)) goto parse_legacy_nml;
        break;
      }

      // optional bytes legacy_nml = 19;
      case 19: {
        if (tag == 154) {
         parse_legacy_nml:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_legacy_nml()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(162)) goto parse_legacy_motconfig;
        break;
      }

      // optional bytes legacy_motconfig = 20;
      case 20: {
        if (tag == 162) {
         parse_legacy_motconfig:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_legacy_motconfig()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(168)) goto parse_tv_sec;
        break;
      }

      // optional int32 tv_sec = 21;
      case 21: {
        if (tag == 168) {
         parse_tv_sec:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tv_sec_)));
          set_has_tv_sec();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(176)) goto parse_tv_nsec;
        break;
      }

      // optional int32 tv_nsec = 22;
      case 22: {
        if (tag == 176) {
         parse_tv_nsec:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tv_nsec_)));
          set_has_tv_nsec();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(186)) goto parse_topic;
        break;
      }

      // optional string topic = 23;
      case 23: {
        if (tag == 186) {
         parse_topic:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_topic()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->topic().data(), this->topic().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "topic");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(192)) goto parse_reply_required;
        break;
      }

      // optional bool reply_required = 24;
      case 24: {
        if (tag == 192) {
         parse_reply_required:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &reply_required_)));
          set_has_reply_required();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(200)) goto parse_interp_state;
        break;
      }

      // optional .pb.InterpreterStateType interp_state = 25;
      case 25: {
        if (tag == 200) {
         parse_interp_state:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::pb::InterpreterStateType_IsValid(value)) {
            set_interp_state(static_cast< ::pb::InterpreterStateType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(25, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(210)) goto parse_interp_name;
        break;
      }

      // optional string interp_name = 26;
      case 26: {
        if (tag == 210) {
         parse_interp_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_interp_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->interp_name().data(), this->interp_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "interp_name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(240)) goto parse_rsvp;
        break;
      }

      // optional int32 rsvp = 30;
      case 30: {
        if (tag == 240) {
         parse_rsvp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &rsvp_)));
          set_has_rsvp();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(264)) goto parse_in_reply_to;
        break;
      }

      // optional .pb.ContainerType in_reply_to = 33;
      case 33: {
        if (tag == 264) {
         parse_in_reply_to:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::pb::ContainerType_IsValid(value)) {
            set_in_reply_to(static_cast< ::pb::ContainerType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(33, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(280)) goto parse_rcs_status;
        break;
      }

      // optional .pb.RCS_STATUS rcs_status = 35;
      case 35: {
        if (tag == 280) {
         parse_rcs_status:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::pb::RCS_STATUS_IsValid(value)) {
            set_rcs_status(static_cast< ::pb::RCS_STATUS >(value));
          } else {
            mutable_unknown_fields()->AddVarint(35, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(320)) goto parse_status;
        break;
      }

      // optional .pb.StatusType status = 40;
      case 40: {
        if (tag == 320) {
         parse_status:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::pb::StatusType_IsValid(value)) {
            set_status(static_cast< ::pb::StatusType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(40, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(360)) goto parse_serial;
        break;
      }

      // optional int32 serial = 45;
      case 45: {
        if (tag == 360) {
         parse_serial:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &serial_)));
          set_has_serial();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(400)) goto parse_reply_serial;
        break;
      }

      // optional int32 reply_serial = 50;
      case 50: {
        if (tag == 400) {
         parse_reply_serial:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &reply_serial_)));
          set_has_reply_serial();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(440)) goto parse_ticket;
        break;
      }

      // optional int32 ticket = 55;
      case 55: {
        if (tag == 440) {
         parse_ticket:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ticket_)));
          set_has_ticket();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(480)) goto parse_reply_ticket;
        break;
      }

      // optional int32 reply_ticket = 60;
      case 60: {
        if (tag == 480) {
         parse_reply_ticket:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &reply_ticket_)));
          set_has_reply_ticket();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(496)) goto parse_sequence;
        break;
      }

      // optional int32 sequence = 62;
      case 62: {
        if (tag == 496) {
         parse_sequence:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sequence_)));
          set_has_sequence();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(520)) goto parse_credit;
        break;
      }

      // optional int32 credit = 65;
      case 65: {
        if (tag == 520) {
         parse_credit:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &credit_)));
          set_has_credit();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(528)) goto parse_line_number;
        break;
      }

      // optional int32 line_number = 66;
      case 66: {
        if (tag == 528) {
         parse_line_number:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &line_number_)));
          set_has_line_number();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(538)) goto parse_name;
        break;
      }

      // optional string name = 67;
      case 67: {
        if (tag == 538) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(546)) goto parse_note;
        break;
      }

      // repeated string note = 68;
      case 68: {
        if (tag == 546) {
         parse_note:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_note()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->note(this->note_size() - 1).data(),
            this->note(this->note_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "note");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(546)) goto parse_note;
        if (input->ExpectTag(552)) goto parse_retcode;
        break;
      }

      // optional int32 retcode = 69;
      case 69: {
        if (tag == 552) {
         parse_retcode:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &retcode_)));
          set_has_retcode();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(578)) goto parse_uuid;
        break;
      }

      // optional bytes uuid = 72;
      case 72: {
        if (tag == 578) {
         parse_uuid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_uuid()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(600)) goto parse_trace;
        break;
      }

      // optional bool trace = 75;
      case 75: {
        if (tag == 600) {
         parse_trace:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &trace_)));
          set_has_trace();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(616)) goto parse_instance;
        break;
      }

      // optional int32 instance = 77;
      case 77: {
        if (tag == 616) {
         parse_instance:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &instance_)));
          set_has_instance();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(682)) goto parse_value;
        break;
      }

      // repeated .pb.Value value = 85;
      case 85: {
        if (tag == 682) {
         parse_value:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_value()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(682)) goto parse_value;
        if (input->ExpectTag(690)) goto parse_rtapicmd;
        break;
      }

      // optional .pb.RTAPICommand rtapicmd = 86;
      case 86: {
        if (tag == 690) {
         parse_rtapicmd:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_rtapicmd()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(698)) goto parse_log_message;
        break;
      }

      // optional .pb.LogMessage log_message = 87;
      case 87: {
        if (tag == 698) {
         parse_log_message:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_log_message()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(706)) goto parse_service_announcement;
        break;
      }

      // repeated .pb.ServiceAnnouncement service_announcement = 88;
      case 88: {
        if (tag == 706) {
         parse_service_announcement:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_service_announcement()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(706)) goto parse_service_announcement;
        if (input->ExpectTag(802)) goto parse_comp;
        break;
      }

      // repeated .pb.Component comp = 100;
      case 100: {
        if (tag == 802) {
         parse_comp:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_comp()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(802)) goto parse_comp;
        if (input->ExpectTag(826)) goto parse_param;
        break;
      }

      // repeated .pb.Param param = 103;
      case 103: {
        if (tag == 826) {
         parse_param:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_param()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(826)) goto parse_param;
        if (input->ExpectTag(834)) goto parse_thread;
        break;
      }

      // repeated .pb.Thread thread = 104;
      case 104: {
        if (tag == 834) {
         parse_thread:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_thread()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(834)) goto parse_thread;
        if (input->ExpectTag(842)) goto parse_ring;
        break;
      }

      // repeated .pb.Ring ring = 105;
      case 105: {
        if (tag == 842) {
         parse_ring:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_ring()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(842)) goto parse_ring;
        if (input->ExpectTag(850)) goto parse_group;
        break;
      }

      // repeated .pb.Group group = 106;
      case 106: {
        if (tag == 850) {
         parse_group:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_group()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(850)) goto parse_group;
        if (input->ExpectTag(858)) goto parse_member;
        break;
      }

      // repeated .pb.Member member = 107;
      case 107: {
        if (tag == 858) {
         parse_member:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_member()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(858)) goto parse_member;
        if (input->ExpectTag(866)) goto parse_function;
        break;
      }

      // repeated .pb.Function function = 108;
      case 108: {
        if (tag == 866) {
         parse_function:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_function()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(866)) goto parse_function;
        if (input->ExpectTag(874)) goto parse_pparams;
        break;
      }

      // optional .pb.ProtocolParameters pparams = 109;
      case 109: {
        if (tag == 874) {
         parse_pparams:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_pparams()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(882)) goto parse_vtable;
        break;
      }

      // repeated .pb.Vtable vtable = 110;
      case 110: {
        if (tag == 882) {
         parse_vtable:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_vtable()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(882)) goto parse_vtable;
        if (input->ExpectTag(890)) goto parse_inst;
        break;
      }

      // repeated .pb.Inst inst = 111;
      case 111: {
        if (tag == 890) {
         parse_inst:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_inst()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(890)) goto parse_inst;
        if (input->ExpectTag(962)) goto parse_app;
        break;
      }

      // repeated .pb.Application app = 120;
      case 120: {
        if (tag == 962) {
         parse_app:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_app()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(962)) goto parse_app;
        if (input->ExpectTag(1042)) goto parse_launcher;
        break;
      }

      // repeated .pb.Launcher launcher = 130;
      case 130: {
        if (tag == 1042) {
         parse_launcher:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_launcher()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(1042)) goto parse_launcher;
        if (input->ExpectTag(1048)) goto parse_index;
        break;
      }

      // optional int32 index = 131;
      case 131: {
        if (tag == 1048) {
         parse_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &index_)));
          set_has_index();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(1602)) goto parse_tpexecute;
        break;
      }

      // optional .pb.TaskPlanExecute tpexecute = 200;
      case 200: {
        if (tag == 1602) {
         parse_tpexecute:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_tpexecute()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(1610)) goto parse_tpblockdelete;
        break;
      }

      // optional .pb.TaskPlanBlockDelete tpblockdelete = 201;
      case 201: {
        if (tag == 1610) {
         parse_tpblockdelete:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_tpblockdelete()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(1618)) goto parse_tpoptionalstop;
        break;
      }

      // optional .pb.TaskPlanOptionalStop tpoptionalstop = 202;
      case 202: {
        if (tag == 1618) {
         parse_tpoptionalstop:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_tpoptionalstop()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(1626)) goto parse_tpopen;
        break;
      }

      // optional .pb.TaskPlanOpen tpopen = 203;
      case 203: {
        if (tag == 1626) {
         parse_tpopen:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_tpopen()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(1682)) goto parse_taskplan_reply;
        break;
      }

      // optional .pb.TaskPlanReply taskplan_reply = 210;
      case 210: {
        if (tag == 1682) {
         parse_taskplan_reply:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_taskplan_reply()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(2402)) goto parse_traj_set_g5x;
        break;
      }

      // optional .pb.Emc_Traj_Set_G5x traj_set_g5x = 300;
      case 300: {
        if (tag == 2402) {
         parse_traj_set_g5x:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_traj_set_g5x()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(2482)) goto parse_traj_set_g92;
        break;
      }

      // optional .pb.Emc_Traj_Set_G92 traj_set_g92 = 310;
      case 310: {
        if (tag == 2482) {
         parse_traj_set_g92:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_traj_set_g92()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(2562)) goto parse_traj_set_rotation;
        break;
      }

      // optional .pb.Emc_Traj_Set_Rotation traj_set_rotation = 320;
      case 320: {
        if (tag == 2562) {
         parse_traj_set_rotation:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_traj_set_rotation()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(2642)) goto parse_traj_linear_move;
        break;
      }

      // optional .pb.Emc_Traj_Linear_Move traj_linear_move = 330;
      case 330: {
        if (tag == 2642) {
         parse_traj_linear_move:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_traj_linear_move()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(2722)) goto parse_traj_probe;
        break;
      }

      // optional .pb.Emc_Traj_Probe traj_probe = 340;
      case 340: {
        if (tag == 2722) {
         parse_traj_probe:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_traj_probe()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(2802)) goto parse_traj_circular_move;
        break;
      }

      // optional .pb.Emc_Traj_Circular_Move traj_circular_move = 350;
      case 350: {
        if (tag == 2802) {
         parse_traj_circular_move:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_traj_circular_move()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(2882)) goto parse_traj_rigid_tap;
        break;
      }

      // optional .pb.Emc_Traj_Rigid_Tap traj_rigid_tap = 360;
      case 360: {
        if (tag == 2882) {
         parse_traj_rigid_tap:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_traj_rigid_tap()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(2962)) goto parse_traj_set_term_cond;
        break;
      }

      // optional .pb.Emc_Traj_Set_Term_Cond traj_set_term_cond = 370;
      case 370: {
        if (tag == 2962) {
         parse_traj_set_term_cond:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_traj_set_term_cond()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(3042)) goto parse_traj_set_spindlesync;
        break;
      }

      // optional .pb.Emc_Traj_Set_Spindlesync traj_set_spindlesync = 380;
      case 380: {
        if (tag == 3042) {
         parse_traj_set_spindlesync:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_traj_set_spindlesync()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(3122)) goto parse_traj_delay;
        break;
      }

      // optional .pb.Emc_Traj_Delay traj_delay = 390;
      case 390: {
        if (tag == 3122) {
         parse_traj_delay:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_traj_delay()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(3202)) goto parse_spindle_on;
        break;
      }

      // optional .pb.Emc_Spindle_On spindle_on = 400;
      case 400: {
        if (tag == 3202) {
         parse_spindle_on:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_spindle_on()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(3282)) goto parse_spindle_speed;
        break;
      }

      // optional .pb.Emc_Spindle_Speed spindle_speed = 410;
      case 410: {
        if (tag == 3282) {
         parse_spindle_speed:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_spindle_speed()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(3362)) goto parse_spindle_orient;
        break;
      }

      // optional .pb.Emc_Spindle_Orient spindle_orient = 420;
      case 420: {
        if (tag == 3362) {
         parse_spindle_orient:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_spindle_orient()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(3442)) goto parse_spindle_wait_orient_complete;
        break;
      }

      // optional .pb.Emc_Spindle_Wait_Orient_Complete spindle_wait_orient_complete = 430;
      case 430: {
        if (tag == 3442) {
         parse_spindle_wait_orient_complete:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_spindle_wait_orient_complete()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(3522)) goto parse_tool_set_offet;
        break;
      }

      // optional .pb.Emc_Tool_Set_Offset tool_set_offet = 440;
      case 440: {
        if (tag == 3522) {
         parse_tool_set_offet:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_tool_set_offet()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(3602)) goto parse_traj_set_offset;
        break;
      }

      // optional .pb.Emc_Traj_Set_Offset traj_set_offset = 450;
      case 450: {
        if (tag == 3602) {
         parse_traj_set_offset:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_traj_set_offset()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(3682)) goto parse_tool_prepare;
        break;
      }

      // optional .pb.Emc_Tool_Prepare tool_prepare = 460;
      case 460: {
        if (tag == 3682) {
         parse_tool_prepare:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_tool_prepare()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(3762)) goto parse_tool_set_number;
        break;
      }

      // optional .pb.Emc_Tool_Set_Number tool_set_number = 470;
      case 470: {
        if (tag == 3762) {
         parse_tool_set_number:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_tool_set_number()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(3842)) goto parse_traj_set_fo_enable;
        break;
      }

      // optional .pb.Emc_Traj_Set_Fo_Enable traj_set_fo_enable = 480;
      case 480: {
        if (tag == 3842) {
         parse_traj_set_fo_enable:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_traj_set_fo_enable()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(3922)) goto parse_traj_set_so_enable;
        break;
      }

      // optional .pb.Emc_Traj_Set_So_Enable traj_set_so_enable = 490;
      case 490: {
        if (tag == 3922) {
         parse_traj_set_so_enable:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_traj_set_so_enable()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(4002)) goto parse_traj_set_fh_enable;
        break;
      }

      // optional .pb.Emc_Traj_Set_Fh_Enable traj_set_fh_enable = 500;
      case 500: {
        if (tag == 4002) {
         parse_traj_set_fh_enable:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_traj_set_fh_enable()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(4082)) goto parse_motion_adaptive;
        break;
      }

      // optional .pb.Emc_Motion_Adaptive motion_adaptive = 510;
      case 510: {
        if (tag == 4082) {
         parse_motion_adaptive:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_motion_adaptive()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(4162)) goto parse_operator_display;
        break;
      }

      // optional .pb.Emc_Operator_Display operator_display = 520;
      case 520: {
        if (tag == 4162) {
         parse_operator_display:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_operator_display()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(4242)) goto parse_operator_text;
        break;
      }

      // optional .pb.Emc_Operator_Text operator_text = 530;
      case 530: {
        if (tag == 4242) {
         parse_operator_text:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_operator_text()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(4322)) goto parse_operator_error;
        break;
      }

      // optional .pb.Emc_Operator_Error operator_error = 540;
      case 540: {
        if (tag == 4322) {
         parse_operator_error:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_operator_error()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(4402)) goto parse_motion_set_dout;
        break;
      }

      // optional .pb.Emc_Motion_Set_Dout motion_set_dout = 550;
      case 550: {
        if (tag == 4402) {
         parse_motion_set_dout:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_motion_set_dout()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(4482)) goto parse_motion_set_aout;
        break;
      }

      // optional .pb.Emc_Motion_Set_Aout motion_set_aout = 560;
      case 560: {
        if (tag == 4482) {
         parse_motion_set_aout:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_motion_set_aout()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(4562)) goto parse_aux_input_wait;
        break;
      }

      // optional .pb.Emc_Aux_Input_Wait aux_input_wait = 570;
      case 570: {
        if (tag == 4562) {
         parse_aux_input_wait:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_aux_input_wait()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(4642)) goto parse_exec_plugin_call;
        break;
      }

      // optional .pb.Emc_Exec_Plugin_Ca1l exec_plugin_call = 580;
      case 580: {
        if (tag == 4642) {
         parse_exec_plugin_call:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_exec_plugin_call()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(4722)) goto parse_io_plugin_call;
        break;
      }

      // optional .pb.Emc_Io_Plugin_Call io_plugin_call = 590;
      case 590: {
        if (tag == 4722) {
         parse_io_plugin_call:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_io_plugin_call()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(4802)) goto parse_emc_status_config;
        break;
      }

      // optional .pb.EmcStatusConfig emc_status_config = 600;
      case 600: {
        if (tag == 4802) {
         parse_emc_status_config:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_emc_status_config()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(4810)) goto parse_emc_status_motion;
        break;
      }

      // optional .pb.EmcStatusMotion emc_status_motion = 601;
      case 601: {
        if (tag == 4810) {
         parse_emc_status_motion:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_emc_status_motion()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(4818)) goto parse_emc_status_io;
        break;
      }

      // optional .pb.EmcStatusIo emc_status_io = 602;
      case 602: {
        if (tag == 4818) {
         parse_emc_status_io:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_emc_status_io()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(4826)) goto parse_emc_status_task;
        break;
      }

      // optional .pb.EmcStatusTask emc_status_task = 603;
      case 603: {
        if (tag == 4826) {
         parse_emc_status_task:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_emc_status_task()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(4834)) goto parse_emc_status_interp;
        break;
      }

      // optional .pb.EmcStatusInterp emc_status_interp = 604;
      case 604: {
        if (tag == 4834) {
         parse_emc_status_interp:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_emc_status_interp()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(4882)) goto parse_emc_command_params;
        break;
      }

      // optional .pb.EmcCommandParameters emc_command_params = 610;
      case 610: {
        if (tag == 4882) {
         parse_emc_command_params:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_emc_command_params()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.Container)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.Container)
  return false;
#undef DO_
}

void Container::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.Container)
  // required .pb.ContainerType type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // repeated .pb.Pin pin = 2;
  for (int i = 0; i < this->pin_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->pin(i), output);
  }

  // repeated .pb.Signal signal = 3;
  for (int i = 0; i < this->signal_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->signal(i), output);
  }

  // optional sfixed64 tsc = 7;
  if (has_tsc()) {
    ::google::protobuf::internal::WireFormatLite::WriteSFixed64(7, this->tsc(), output);
  }

  // repeated .pb.Preview preview = 8;
  for (int i = 0; i < this->preview_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->preview(i), output);
  }

  // optional .pb.MotionCommand motcmd = 9;
  if (has_motcmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->motcmd(), output);
  }

  // optional .pb.MotionStatus motstat = 10;
  if (has_motstat()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, this->motstat(), output);
  }

  // optional bytes legacy_motcmd = 11;
  if (has_legacy_motcmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      11, this->legacy_motcmd(), output);
  }

  // optional bytes legacy_motstat = 12;
  if (has_legacy_motstat()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      12, this->legacy_motstat(), output);
  }

  // optional .pb.RTAPI_Message rtapi_message = 13;
  if (has_rtapi_message()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      13, this->rtapi_message(), output);
  }

  // optional .pb.TaskReply task_reply = 14;
  if (has_task_reply()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      14, this->task_reply(), output);
  }

  // optional .pb.TicketUpdate ticket_update = 15;
  if (has_ticket_update()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      15, this->ticket_update(), output);
  }

  // optional bytes syslog = 18;
  if (has_syslog()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      18, this->syslog(), output);
  }

  // optional bytes legacy_nml = 19;
  if (has_legacy_nml()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      19, this->legacy_nml(), output);
  }

  // optional bytes legacy_motconfig = 20;
  if (has_legacy_motconfig()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      20, this->legacy_motconfig(), output);
  }

  // optional int32 tv_sec = 21;
  if (has_tv_sec()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(21, this->tv_sec(), output);
  }

  // optional int32 tv_nsec = 22;
  if (has_tv_nsec()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(22, this->tv_nsec(), output);
  }

  // optional string topic = 23;
  if (has_topic()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->topic().data(), this->topic().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "topic");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      23, this->topic(), output);
  }

  // optional bool reply_required = 24;
  if (has_reply_required()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(24, this->reply_required(), output);
  }

  // optional .pb.InterpreterStateType interp_state = 25;
  if (has_interp_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      25, this->interp_state(), output);
  }

  // optional string interp_name = 26;
  if (has_interp_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->interp_name().data(), this->interp_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "interp_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      26, this->interp_name(), output);
  }

  // optional int32 rsvp = 30;
  if (has_rsvp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(30, this->rsvp(), output);
  }

  // optional .pb.ContainerType in_reply_to = 33;
  if (has_in_reply_to()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      33, this->in_reply_to(), output);
  }

  // optional .pb.RCS_STATUS rcs_status = 35;
  if (has_rcs_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      35, this->rcs_status(), output);
  }

  // optional .pb.StatusType status = 40;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      40, this->status(), output);
  }

  // optional int32 serial = 45;
  if (has_serial()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(45, this->serial(), output);
  }

  // optional int32 reply_serial = 50;
  if (has_reply_serial()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(50, this->reply_serial(), output);
  }

  // optional int32 ticket = 55;
  if (has_ticket()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(55, this->ticket(), output);
  }

  // optional int32 reply_ticket = 60;
  if (has_reply_ticket()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(60, this->reply_ticket(), output);
  }

  // optional int32 sequence = 62;
  if (has_sequence()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(62, this->sequence(), output);
  }

  // optional int32 credit = 65;
  if (has_credit()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(65, this->credit(), output);
  }

  // optional int32 line_number = 66;
  if (has_line_number()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(66, this->line_number(), output);
  }

  // optional string name = 67;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      67, this->name(), output);
  }

  // repeated string note = 68;
  for (int i = 0; i < this->note_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
    this->note(i).data(), this->note(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE,
    "note");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      68, this->note(i), output);
  }

  // optional int32 retcode = 69;
  if (has_retcode()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(69, this->retcode(), output);
  }

  // optional bytes uuid = 72;
  if (has_uuid()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      72, this->uuid(), output);
  }

  // optional bool trace = 75;
  if (has_trace()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(75, this->trace(), output);
  }

  // optional int32 instance = 77;
  if (has_instance()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(77, this->instance(), output);
  }

  // repeated .pb.Value value = 85;
  for (int i = 0; i < this->value_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      85, this->value(i), output);
  }

  // optional .pb.RTAPICommand rtapicmd = 86;
  if (has_rtapicmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      86, this->rtapicmd(), output);
  }

  // optional .pb.LogMessage log_message = 87;
  if (has_log_message()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      87, this->log_message(), output);
  }

  // repeated .pb.ServiceAnnouncement service_announcement = 88;
  for (int i = 0; i < this->service_announcement_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      88, this->service_announcement(i), output);
  }

  // repeated .pb.Component comp = 100;
  for (int i = 0; i < this->comp_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      100, this->comp(i), output);
  }

  // repeated .pb.Param param = 103;
  for (int i = 0; i < this->param_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      103, this->param(i), output);
  }

  // repeated .pb.Thread thread = 104;
  for (int i = 0; i < this->thread_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      104, this->thread(i), output);
  }

  // repeated .pb.Ring ring = 105;
  for (int i = 0; i < this->ring_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      105, this->ring(i), output);
  }

  // repeated .pb.Group group = 106;
  for (int i = 0; i < this->group_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      106, this->group(i), output);
  }

  // repeated .pb.Member member = 107;
  for (int i = 0; i < this->member_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      107, this->member(i), output);
  }

  // repeated .pb.Function function = 108;
  for (int i = 0; i < this->function_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      108, this->function(i), output);
  }

  // optional .pb.ProtocolParameters pparams = 109;
  if (has_pparams()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      109, this->pparams(), output);
  }

  // repeated .pb.Vtable vtable = 110;
  for (int i = 0; i < this->vtable_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      110, this->vtable(i), output);
  }

  // repeated .pb.Inst inst = 111;
  for (int i = 0; i < this->inst_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      111, this->inst(i), output);
  }

  // repeated .pb.Application app = 120;
  for (int i = 0; i < this->app_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      120, this->app(i), output);
  }

  // repeated .pb.Launcher launcher = 130;
  for (int i = 0; i < this->launcher_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      130, this->launcher(i), output);
  }

  // optional int32 index = 131;
  if (has_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(131, this->index(), output);
  }

  // optional .pb.TaskPlanExecute tpexecute = 200;
  if (has_tpexecute()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      200, this->tpexecute(), output);
  }

  // optional .pb.TaskPlanBlockDelete tpblockdelete = 201;
  if (has_tpblockdelete()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      201, this->tpblockdelete(), output);
  }

  // optional .pb.TaskPlanOptionalStop tpoptionalstop = 202;
  if (has_tpoptionalstop()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      202, this->tpoptionalstop(), output);
  }

  // optional .pb.TaskPlanOpen tpopen = 203;
  if (has_tpopen()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      203, this->tpopen(), output);
  }

  // optional .pb.TaskPlanReply taskplan_reply = 210;
  if (has_taskplan_reply()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      210, this->taskplan_reply(), output);
  }

  // optional .pb.Emc_Traj_Set_G5x traj_set_g5x = 300;
  if (has_traj_set_g5x()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      300, this->traj_set_g5x(), output);
  }

  // optional .pb.Emc_Traj_Set_G92 traj_set_g92 = 310;
  if (has_traj_set_g92()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      310, this->traj_set_g92(), output);
  }

  // optional .pb.Emc_Traj_Set_Rotation traj_set_rotation = 320;
  if (has_traj_set_rotation()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      320, this->traj_set_rotation(), output);
  }

  // optional .pb.Emc_Traj_Linear_Move traj_linear_move = 330;
  if (has_traj_linear_move()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      330, this->traj_linear_move(), output);
  }

  // optional .pb.Emc_Traj_Probe traj_probe = 340;
  if (has_traj_probe()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      340, this->traj_probe(), output);
  }

  // optional .pb.Emc_Traj_Circular_Move traj_circular_move = 350;
  if (has_traj_circular_move()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      350, this->traj_circular_move(), output);
  }

  // optional .pb.Emc_Traj_Rigid_Tap traj_rigid_tap = 360;
  if (has_traj_rigid_tap()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      360, this->traj_rigid_tap(), output);
  }

  // optional .pb.Emc_Traj_Set_Term_Cond traj_set_term_cond = 370;
  if (has_traj_set_term_cond()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      370, this->traj_set_term_cond(), output);
  }

  // optional .pb.Emc_Traj_Set_Spindlesync traj_set_spindlesync = 380;
  if (has_traj_set_spindlesync()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      380, this->traj_set_spindlesync(), output);
  }

  // optional .pb.Emc_Traj_Delay traj_delay = 390;
  if (has_traj_delay()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      390, this->traj_delay(), output);
  }

  // optional .pb.Emc_Spindle_On spindle_on = 400;
  if (has_spindle_on()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      400, this->spindle_on(), output);
  }

  // optional .pb.Emc_Spindle_Speed spindle_speed = 410;
  if (has_spindle_speed()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      410, this->spindle_speed(), output);
  }

  // optional .pb.Emc_Spindle_Orient spindle_orient = 420;
  if (has_spindle_orient()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      420, this->spindle_orient(), output);
  }

  // optional .pb.Emc_Spindle_Wait_Orient_Complete spindle_wait_orient_complete = 430;
  if (has_spindle_wait_orient_complete()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      430, this->spindle_wait_orient_complete(), output);
  }

  // optional .pb.Emc_Tool_Set_Offset tool_set_offet = 440;
  if (has_tool_set_offet()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      440, this->tool_set_offet(), output);
  }

  // optional .pb.Emc_Traj_Set_Offset traj_set_offset = 450;
  if (has_traj_set_offset()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      450, this->traj_set_offset(), output);
  }

  // optional .pb.Emc_Tool_Prepare tool_prepare = 460;
  if (has_tool_prepare()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      460, this->tool_prepare(), output);
  }

  // optional .pb.Emc_Tool_Set_Number tool_set_number = 470;
  if (has_tool_set_number()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      470, this->tool_set_number(), output);
  }

  // optional .pb.Emc_Traj_Set_Fo_Enable traj_set_fo_enable = 480;
  if (has_traj_set_fo_enable()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      480, this->traj_set_fo_enable(), output);
  }

  // optional .pb.Emc_Traj_Set_So_Enable traj_set_so_enable = 490;
  if (has_traj_set_so_enable()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      490, this->traj_set_so_enable(), output);
  }

  // optional .pb.Emc_Traj_Set_Fh_Enable traj_set_fh_enable = 500;
  if (has_traj_set_fh_enable()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      500, this->traj_set_fh_enable(), output);
  }

  // optional .pb.Emc_Motion_Adaptive motion_adaptive = 510;
  if (has_motion_adaptive()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      510, this->motion_adaptive(), output);
  }

  // optional .pb.Emc_Operator_Display operator_display = 520;
  if (has_operator_display()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      520, this->operator_display(), output);
  }

  // optional .pb.Emc_Operator_Text operator_text = 530;
  if (has_operator_text()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      530, this->operator_text(), output);
  }

  // optional .pb.Emc_Operator_Error operator_error = 540;
  if (has_operator_error()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      540, this->operator_error(), output);
  }

  // optional .pb.Emc_Motion_Set_Dout motion_set_dout = 550;
  if (has_motion_set_dout()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      550, this->motion_set_dout(), output);
  }

  // optional .pb.Emc_Motion_Set_Aout motion_set_aout = 560;
  if (has_motion_set_aout()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      560, this->motion_set_aout(), output);
  }

  // optional .pb.Emc_Aux_Input_Wait aux_input_wait = 570;
  if (has_aux_input_wait()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      570, this->aux_input_wait(), output);
  }

  // optional .pb.Emc_Exec_Plugin_Ca1l exec_plugin_call = 580;
  if (has_exec_plugin_call()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      580, this->exec_plugin_call(), output);
  }

  // optional .pb.Emc_Io_Plugin_Call io_plugin_call = 590;
  if (has_io_plugin_call()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      590, this->io_plugin_call(), output);
  }

  // optional .pb.EmcStatusConfig emc_status_config = 600;
  if (has_emc_status_config()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      600, this->emc_status_config(), output);
  }

  // optional .pb.EmcStatusMotion emc_status_motion = 601;
  if (has_emc_status_motion()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      601, this->emc_status_motion(), output);
  }

  // optional .pb.EmcStatusIo emc_status_io = 602;
  if (has_emc_status_io()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      602, this->emc_status_io(), output);
  }

  // optional .pb.EmcStatusTask emc_status_task = 603;
  if (has_emc_status_task()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      603, this->emc_status_task(), output);
  }

  // optional .pb.EmcStatusInterp emc_status_interp = 604;
  if (has_emc_status_interp()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      604, this->emc_status_interp(), output);
  }

  // optional .pb.EmcCommandParameters emc_command_params = 610;
  if (has_emc_command_params()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      610, this->emc_command_params(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.Container)
}

::google::protobuf::uint8* Container::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.Container)
  // required .pb.ContainerType type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // repeated .pb.Pin pin = 2;
  for (int i = 0; i < this->pin_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->pin(i), target);
  }

  // repeated .pb.Signal signal = 3;
  for (int i = 0; i < this->signal_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->signal(i), target);
  }

  // optional sfixed64 tsc = 7;
  if (has_tsc()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSFixed64ToArray(7, this->tsc(), target);
  }

  // repeated .pb.Preview preview = 8;
  for (int i = 0; i < this->preview_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->preview(i), target);
  }

  // optional .pb.MotionCommand motcmd = 9;
  if (has_motcmd()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        9, this->motcmd(), target);
  }

  // optional .pb.MotionStatus motstat = 10;
  if (has_motstat()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        10, this->motstat(), target);
  }

  // optional bytes legacy_motcmd = 11;
  if (has_legacy_motcmd()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        11, this->legacy_motcmd(), target);
  }

  // optional bytes legacy_motstat = 12;
  if (has_legacy_motstat()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        12, this->legacy_motstat(), target);
  }

  // optional .pb.RTAPI_Message rtapi_message = 13;
  if (has_rtapi_message()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        13, this->rtapi_message(), target);
  }

  // optional .pb.TaskReply task_reply = 14;
  if (has_task_reply()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        14, this->task_reply(), target);
  }

  // optional .pb.TicketUpdate ticket_update = 15;
  if (has_ticket_update()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        15, this->ticket_update(), target);
  }

  // optional bytes syslog = 18;
  if (has_syslog()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        18, this->syslog(), target);
  }

  // optional bytes legacy_nml = 19;
  if (has_legacy_nml()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        19, this->legacy_nml(), target);
  }

  // optional bytes legacy_motconfig = 20;
  if (has_legacy_motconfig()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        20, this->legacy_motconfig(), target);
  }

  // optional int32 tv_sec = 21;
  if (has_tv_sec()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(21, this->tv_sec(), target);
  }

  // optional int32 tv_nsec = 22;
  if (has_tv_nsec()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(22, this->tv_nsec(), target);
  }

  // optional string topic = 23;
  if (has_topic()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->topic().data(), this->topic().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "topic");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        23, this->topic(), target);
  }

  // optional bool reply_required = 24;
  if (has_reply_required()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(24, this->reply_required(), target);
  }

  // optional .pb.InterpreterStateType interp_state = 25;
  if (has_interp_state()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      25, this->interp_state(), target);
  }

  // optional string interp_name = 26;
  if (has_interp_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->interp_name().data(), this->interp_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "interp_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        26, this->interp_name(), target);
  }

  // optional int32 rsvp = 30;
  if (has_rsvp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(30, this->rsvp(), target);
  }

  // optional .pb.ContainerType in_reply_to = 33;
  if (has_in_reply_to()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      33, this->in_reply_to(), target);
  }

  // optional .pb.RCS_STATUS rcs_status = 35;
  if (has_rcs_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      35, this->rcs_status(), target);
  }

  // optional .pb.StatusType status = 40;
  if (has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      40, this->status(), target);
  }

  // optional int32 serial = 45;
  if (has_serial()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(45, this->serial(), target);
  }

  // optional int32 reply_serial = 50;
  if (has_reply_serial()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(50, this->reply_serial(), target);
  }

  // optional int32 ticket = 55;
  if (has_ticket()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(55, this->ticket(), target);
  }

  // optional int32 reply_ticket = 60;
  if (has_reply_ticket()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(60, this->reply_ticket(), target);
  }

  // optional int32 sequence = 62;
  if (has_sequence()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(62, this->sequence(), target);
  }

  // optional int32 credit = 65;
  if (has_credit()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(65, this->credit(), target);
  }

  // optional int32 line_number = 66;
  if (has_line_number()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(66, this->line_number(), target);
  }

  // optional string name = 67;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        67, this->name(), target);
  }

  // repeated string note = 68;
  for (int i = 0; i < this->note_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->note(i).data(), this->note(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "note");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(68, this->note(i), target);
  }

  // optional int32 retcode = 69;
  if (has_retcode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(69, this->retcode(), target);
  }

  // optional bytes uuid = 72;
  if (has_uuid()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        72, this->uuid(), target);
  }

  // optional bool trace = 75;
  if (has_trace()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(75, this->trace(), target);
  }

  // optional int32 instance = 77;
  if (has_instance()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(77, this->instance(), target);
  }

  // repeated .pb.Value value = 85;
  for (int i = 0; i < this->value_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        85, this->value(i), target);
  }

  // optional .pb.RTAPICommand rtapicmd = 86;
  if (has_rtapicmd()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        86, this->rtapicmd(), target);
  }

  // optional .pb.LogMessage log_message = 87;
  if (has_log_message()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        87, this->log_message(), target);
  }

  // repeated .pb.ServiceAnnouncement service_announcement = 88;
  for (int i = 0; i < this->service_announcement_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        88, this->service_announcement(i), target);
  }

  // repeated .pb.Component comp = 100;
  for (int i = 0; i < this->comp_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        100, this->comp(i), target);
  }

  // repeated .pb.Param param = 103;
  for (int i = 0; i < this->param_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        103, this->param(i), target);
  }

  // repeated .pb.Thread thread = 104;
  for (int i = 0; i < this->thread_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        104, this->thread(i), target);
  }

  // repeated .pb.Ring ring = 105;
  for (int i = 0; i < this->ring_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        105, this->ring(i), target);
  }

  // repeated .pb.Group group = 106;
  for (int i = 0; i < this->group_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        106, this->group(i), target);
  }

  // repeated .pb.Member member = 107;
  for (int i = 0; i < this->member_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        107, this->member(i), target);
  }

  // repeated .pb.Function function = 108;
  for (int i = 0; i < this->function_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        108, this->function(i), target);
  }

  // optional .pb.ProtocolParameters pparams = 109;
  if (has_pparams()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        109, this->pparams(), target);
  }

  // repeated .pb.Vtable vtable = 110;
  for (int i = 0; i < this->vtable_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        110, this->vtable(i), target);
  }

  // repeated .pb.Inst inst = 111;
  for (int i = 0; i < this->inst_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        111, this->inst(i), target);
  }

  // repeated .pb.Application app = 120;
  for (int i = 0; i < this->app_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        120, this->app(i), target);
  }

  // repeated .pb.Launcher launcher = 130;
  for (int i = 0; i < this->launcher_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        130, this->launcher(i), target);
  }

  // optional int32 index = 131;
  if (has_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(131, this->index(), target);
  }

  // optional .pb.TaskPlanExecute tpexecute = 200;
  if (has_tpexecute()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        200, this->tpexecute(), target);
  }

  // optional .pb.TaskPlanBlockDelete tpblockdelete = 201;
  if (has_tpblockdelete()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        201, this->tpblockdelete(), target);
  }

  // optional .pb.TaskPlanOptionalStop tpoptionalstop = 202;
  if (has_tpoptionalstop()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        202, this->tpoptionalstop(), target);
  }

  // optional .pb.TaskPlanOpen tpopen = 203;
  if (has_tpopen()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        203, this->tpopen(), target);
  }

  // optional .pb.TaskPlanReply taskplan_reply = 210;
  if (has_taskplan_reply()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        210, this->taskplan_reply(), target);
  }

  // optional .pb.Emc_Traj_Set_G5x traj_set_g5x = 300;
  if (has_traj_set_g5x()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        300, this->traj_set_g5x(), target);
  }

  // optional .pb.Emc_Traj_Set_G92 traj_set_g92 = 310;
  if (has_traj_set_g92()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        310, this->traj_set_g92(), target);
  }

  // optional .pb.Emc_Traj_Set_Rotation traj_set_rotation = 320;
  if (has_traj_set_rotation()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        320, this->traj_set_rotation(), target);
  }

  // optional .pb.Emc_Traj_Linear_Move traj_linear_move = 330;
  if (has_traj_linear_move()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        330, this->traj_linear_move(), target);
  }

  // optional .pb.Emc_Traj_Probe traj_probe = 340;
  if (has_traj_probe()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        340, this->traj_probe(), target);
  }

  // optional .pb.Emc_Traj_Circular_Move traj_circular_move = 350;
  if (has_traj_circular_move()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        350, this->traj_circular_move(), target);
  }

  // optional .pb.Emc_Traj_Rigid_Tap traj_rigid_tap = 360;
  if (has_traj_rigid_tap()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        360, this->traj_rigid_tap(), target);
  }

  // optional .pb.Emc_Traj_Set_Term_Cond traj_set_term_cond = 370;
  if (has_traj_set_term_cond()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        370, this->traj_set_term_cond(), target);
  }

  // optional .pb.Emc_Traj_Set_Spindlesync traj_set_spindlesync = 380;
  if (has_traj_set_spindlesync()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        380, this->traj_set_spindlesync(), target);
  }

  // optional .pb.Emc_Traj_Delay traj_delay = 390;
  if (has_traj_delay()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        390, this->traj_delay(), target);
  }

  // optional .pb.Emc_Spindle_On spindle_on = 400;
  if (has_spindle_on()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        400, this->spindle_on(), target);
  }

  // optional .pb.Emc_Spindle_Speed spindle_speed = 410;
  if (has_spindle_speed()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        410, this->spindle_speed(), target);
  }

  // optional .pb.Emc_Spindle_Orient spindle_orient = 420;
  if (has_spindle_orient()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        420, this->spindle_orient(), target);
  }

  // optional .pb.Emc_Spindle_Wait_Orient_Complete spindle_wait_orient_complete = 430;
  if (has_spindle_wait_orient_complete()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        430, this->spindle_wait_orient_complete(), target);
  }

  // optional .pb.Emc_Tool_Set_Offset tool_set_offet = 440;
  if (has_tool_set_offet()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        440, this->tool_set_offet(), target);
  }

  // optional .pb.Emc_Traj_Set_Offset traj_set_offset = 450;
  if (has_traj_set_offset()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        450, this->traj_set_offset(), target);
  }

  // optional .pb.Emc_Tool_Prepare tool_prepare = 460;
  if (has_tool_prepare()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        460, this->tool_prepare(), target);
  }

  // optional .pb.Emc_Tool_Set_Number tool_set_number = 470;
  if (has_tool_set_number()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        470, this->tool_set_number(), target);
  }

  // optional .pb.Emc_Traj_Set_Fo_Enable traj_set_fo_enable = 480;
  if (has_traj_set_fo_enable()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        480, this->traj_set_fo_enable(), target);
  }

  // optional .pb.Emc_Traj_Set_So_Enable traj_set_so_enable = 490;
  if (has_traj_set_so_enable()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        490, this->traj_set_so_enable(), target);
  }

  // optional .pb.Emc_Traj_Set_Fh_Enable traj_set_fh_enable = 500;
  if (has_traj_set_fh_enable()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        500, this->traj_set_fh_enable(), target);
  }

  // optional .pb.Emc_Motion_Adaptive motion_adaptive = 510;
  if (has_motion_adaptive()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        510, this->motion_adaptive(), target);
  }

  // optional .pb.Emc_Operator_Display operator_display = 520;
  if (has_operator_display()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        520, this->operator_display(), target);
  }

  // optional .pb.Emc_Operator_Text operator_text = 530;
  if (has_operator_text()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        530, this->operator_text(), target);
  }

  // optional .pb.Emc_Operator_Error operator_error = 540;
  if (has_operator_error()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        540, this->operator_error(), target);
  }

  // optional .pb.Emc_Motion_Set_Dout motion_set_dout = 550;
  if (has_motion_set_dout()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        550, this->motion_set_dout(), target);
  }

  // optional .pb.Emc_Motion_Set_Aout motion_set_aout = 560;
  if (has_motion_set_aout()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        560, this->motion_set_aout(), target);
  }

  // optional .pb.Emc_Aux_Input_Wait aux_input_wait = 570;
  if (has_aux_input_wait()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        570, this->aux_input_wait(), target);
  }

  // optional .pb.Emc_Exec_Plugin_Ca1l exec_plugin_call = 580;
  if (has_exec_plugin_call()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        580, this->exec_plugin_call(), target);
  }

  // optional .pb.Emc_Io_Plugin_Call io_plugin_call = 590;
  if (has_io_plugin_call()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        590, this->io_plugin_call(), target);
  }

  // optional .pb.EmcStatusConfig emc_status_config = 600;
  if (has_emc_status_config()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        600, this->emc_status_config(), target);
  }

  // optional .pb.EmcStatusMotion emc_status_motion = 601;
  if (has_emc_status_motion()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        601, this->emc_status_motion(), target);
  }

  // optional .pb.EmcStatusIo emc_status_io = 602;
  if (has_emc_status_io()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        602, this->emc_status_io(), target);
  }

  // optional .pb.EmcStatusTask emc_status_task = 603;
  if (has_emc_status_task()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        603, this->emc_status_task(), target);
  }

  // optional .pb.EmcStatusInterp emc_status_interp = 604;
  if (has_emc_status_interp()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        604, this->emc_status_interp(), target);
  }

  // optional .pb.EmcCommandParameters emc_command_params = 610;
  if (has_emc_command_params()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        610, this->emc_command_params(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.Container)
  return target;
}

int Container::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .pb.ContainerType type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // optional sfixed64 tsc = 7;
    if (has_tsc()) {
      total_size += 1 + 8;
    }

    // optional .pb.MotionCommand motcmd = 9;
    if (has_motcmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->motcmd());
    }

    // optional .pb.MotionStatus motstat = 10;
    if (has_motstat()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->motstat());
    }

    // optional bytes legacy_motcmd = 11;
    if (has_legacy_motcmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->legacy_motcmd());
    }

    // optional bytes legacy_motstat = 12;
    if (has_legacy_motstat()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->legacy_motstat());
    }

    // optional .pb.RTAPI_Message rtapi_message = 13;
    if (has_rtapi_message()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->rtapi_message());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional .pb.TaskReply task_reply = 14;
    if (has_task_reply()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->task_reply());
    }

    // optional .pb.TicketUpdate ticket_update = 15;
    if (has_ticket_update()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->ticket_update());
    }

    // optional bytes syslog = 18;
    if (has_syslog()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->syslog());
    }

    // optional bytes legacy_nml = 19;
    if (has_legacy_nml()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->legacy_nml());
    }

    // optional bytes legacy_motconfig = 20;
    if (has_legacy_motconfig()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->legacy_motconfig());
    }

    // optional int32 tv_sec = 21;
    if (has_tv_sec()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->tv_sec());
    }

    // optional int32 tv_nsec = 22;
    if (has_tv_nsec()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->tv_nsec());
    }

    // optional string topic = 23;
    if (has_topic()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->topic());
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional bool reply_required = 24;
    if (has_reply_required()) {
      total_size += 2 + 1;
    }

    // optional .pb.InterpreterStateType interp_state = 25;
    if (has_interp_state()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->interp_state());
    }

    // optional string interp_name = 26;
    if (has_interp_name()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->interp_name());
    }

    // optional int32 rsvp = 30;
    if (has_rsvp()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->rsvp());
    }

    // optional .pb.ContainerType in_reply_to = 33;
    if (has_in_reply_to()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->in_reply_to());
    }

    // optional .pb.RCS_STATUS rcs_status = 35;
    if (has_rcs_status()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->rcs_status());
    }

    // optional .pb.StatusType status = 40;
    if (has_status()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->status());
    }

    // optional int32 serial = 45;
    if (has_serial()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->serial());
    }

  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    // optional int32 reply_serial = 50;
    if (has_reply_serial()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->reply_serial());
    }

    // optional int32 ticket = 55;
    if (has_ticket()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ticket());
    }

    // optional int32 reply_ticket = 60;
    if (has_reply_ticket()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->reply_ticket());
    }

    // optional int32 sequence = 62;
    if (has_sequence()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->sequence());
    }

    // optional int32 credit = 65;
    if (has_credit()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->credit());
    }

    // optional int32 line_number = 66;
    if (has_line_number()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->line_number());
    }

    // optional string name = 67;
    if (has_name()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

  }
  if (_has_bits_[32 / 32] & (0xffu << (32 % 32))) {
    // optional int32 retcode = 69;
    if (has_retcode()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->retcode());
    }

    // optional bytes uuid = 72;
    if (has_uuid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->uuid());
    }

    // optional bool trace = 75;
    if (has_trace()) {
      total_size += 2 + 1;
    }

    // optional int32 instance = 77;
    if (has_instance()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->instance());
    }

    // optional .pb.RTAPICommand rtapicmd = 86;
    if (has_rtapicmd()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->rtapicmd());
    }

  }
  if (_has_bits_[48 / 32] & (0xffu << (48 % 32))) {
    // optional .pb.ProtocolParameters pparams = 109;
    if (has_pparams()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->pparams());
    }

    // optional int32 index = 131;
    if (has_index()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->index());
    }

    // optional .pb.LogMessage log_message = 87;
    if (has_log_message()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->log_message());
    }

    // optional .pb.TaskPlanExecute tpexecute = 200;
    if (has_tpexecute()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->tpexecute());
    }

  }
  if (_has_bits_[56 / 32] & (0xffu << (56 % 32))) {
    // optional .pb.TaskPlanBlockDelete tpblockdelete = 201;
    if (has_tpblockdelete()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->tpblockdelete());
    }

    // optional .pb.TaskPlanOptionalStop tpoptionalstop = 202;
    if (has_tpoptionalstop()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->tpoptionalstop());
    }

    // optional .pb.TaskPlanOpen tpopen = 203;
    if (has_tpopen()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->tpopen());
    }

    // optional .pb.TaskPlanReply taskplan_reply = 210;
    if (has_taskplan_reply()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->taskplan_reply());
    }

    // optional .pb.Emc_Traj_Set_G5x traj_set_g5x = 300;
    if (has_traj_set_g5x()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->traj_set_g5x());
    }

    // optional .pb.Emc_Traj_Set_G92 traj_set_g92 = 310;
    if (has_traj_set_g92()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->traj_set_g92());
    }

    // optional .pb.Emc_Traj_Set_Rotation traj_set_rotation = 320;
    if (has_traj_set_rotation()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->traj_set_rotation());
    }

    // optional .pb.Emc_Traj_Linear_Move traj_linear_move = 330;
    if (has_traj_linear_move()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->traj_linear_move());
    }

  }
  if (_has_bits_[64 / 32] & (0xffu << (64 % 32))) {
    // optional .pb.Emc_Traj_Probe traj_probe = 340;
    if (has_traj_probe()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->traj_probe());
    }

    // optional .pb.Emc_Traj_Circular_Move traj_circular_move = 350;
    if (has_traj_circular_move()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->traj_circular_move());
    }

    // optional .pb.Emc_Traj_Rigid_Tap traj_rigid_tap = 360;
    if (has_traj_rigid_tap()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->traj_rigid_tap());
    }

    // optional .pb.Emc_Traj_Set_Term_Cond traj_set_term_cond = 370;
    if (has_traj_set_term_cond()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->traj_set_term_cond());
    }

    // optional .pb.Emc_Traj_Set_Spindlesync traj_set_spindlesync = 380;
    if (has_traj_set_spindlesync()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->traj_set_spindlesync());
    }

    // optional .pb.Emc_Traj_Delay traj_delay = 390;
    if (has_traj_delay()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->traj_delay());
    }

    // optional .pb.Emc_Spindle_On spindle_on = 400;
    if (has_spindle_on()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->spindle_on());
    }

    // optional .pb.Emc_Spindle_Speed spindle_speed = 410;
    if (has_spindle_speed()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->spindle_speed());
    }

  }
  if (_has_bits_[72 / 32] & (0xffu << (72 % 32))) {
    // optional .pb.Emc_Spindle_Orient spindle_orient = 420;
    if (has_spindle_orient()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->spindle_orient());
    }

    // optional .pb.Emc_Spindle_Wait_Orient_Complete spindle_wait_orient_complete = 430;
    if (has_spindle_wait_orient_complete()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->spindle_wait_orient_complete());
    }

    // optional .pb.Emc_Tool_Set_Offset tool_set_offet = 440;
    if (has_tool_set_offet()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->tool_set_offet());
    }

    // optional .pb.Emc_Traj_Set_Offset traj_set_offset = 450;
    if (has_traj_set_offset()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->traj_set_offset());
    }

    // optional .pb.Emc_Tool_Prepare tool_prepare = 460;
    if (has_tool_prepare()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->tool_prepare());
    }

    // optional .pb.Emc_Tool_Set_Number tool_set_number = 470;
    if (has_tool_set_number()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->tool_set_number());
    }

    // optional .pb.Emc_Traj_Set_Fo_Enable traj_set_fo_enable = 480;
    if (has_traj_set_fo_enable()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->traj_set_fo_enable());
    }

    // optional .pb.Emc_Traj_Set_So_Enable traj_set_so_enable = 490;
    if (has_traj_set_so_enable()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->traj_set_so_enable());
    }

  }
  if (_has_bits_[80 / 32] & (0xffu << (80 % 32))) {
    // optional .pb.Emc_Traj_Set_Fh_Enable traj_set_fh_enable = 500;
    if (has_traj_set_fh_enable()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->traj_set_fh_enable());
    }

    // optional .pb.Emc_Motion_Adaptive motion_adaptive = 510;
    if (has_motion_adaptive()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->motion_adaptive());
    }

    // optional .pb.Emc_Operator_Display operator_display = 520;
    if (has_operator_display()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->operator_display());
    }

    // optional .pb.Emc_Operator_Text operator_text = 530;
    if (has_operator_text()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->operator_text());
    }

    // optional .pb.Emc_Operator_Error operator_error = 540;
    if (has_operator_error()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->operator_error());
    }

    // optional .pb.Emc_Motion_Set_Dout motion_set_dout = 550;
    if (has_motion_set_dout()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->motion_set_dout());
    }

    // optional .pb.Emc_Motion_Set_Aout motion_set_aout = 560;
    if (has_motion_set_aout()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->motion_set_aout());
    }

    // optional .pb.Emc_Aux_Input_Wait aux_input_wait = 570;
    if (has_aux_input_wait()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->aux_input_wait());
    }

  }
  if (_has_bits_[88 / 32] & (0xffu << (88 % 32))) {
    // optional .pb.Emc_Exec_Plugin_Ca1l exec_plugin_call = 580;
    if (has_exec_plugin_call()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->exec_plugin_call());
    }

    // optional .pb.Emc_Io_Plugin_Call io_plugin_call = 590;
    if (has_io_plugin_call()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->io_plugin_call());
    }

    // optional .pb.EmcStatusConfig emc_status_config = 600;
    if (has_emc_status_config()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->emc_status_config());
    }

    // optional .pb.EmcStatusMotion emc_status_motion = 601;
    if (has_emc_status_motion()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->emc_status_motion());
    }

    // optional .pb.EmcStatusIo emc_status_io = 602;
    if (has_emc_status_io()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->emc_status_io());
    }

    // optional .pb.EmcStatusTask emc_status_task = 603;
    if (has_emc_status_task()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->emc_status_task());
    }

    // optional .pb.EmcStatusInterp emc_status_interp = 604;
    if (has_emc_status_interp()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->emc_status_interp());
    }

    // optional .pb.EmcCommandParameters emc_command_params = 610;
    if (has_emc_command_params()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->emc_command_params());
    }

  }
  // repeated .pb.Preview preview = 8;
  total_size += 1 * this->preview_size();
  for (int i = 0; i < this->preview_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->preview(i));
  }

  // repeated string note = 68;
  total_size += 2 * this->note_size();
  for (int i = 0; i < this->note_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->note(i));
  }

  // repeated .pb.Value value = 85;
  total_size += 2 * this->value_size();
  for (int i = 0; i < this->value_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->value(i));
  }

  // repeated .pb.ServiceAnnouncement service_announcement = 88;
  total_size += 2 * this->service_announcement_size();
  for (int i = 0; i < this->service_announcement_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->service_announcement(i));
  }

  // repeated .pb.Component comp = 100;
  total_size += 2 * this->comp_size();
  for (int i = 0; i < this->comp_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->comp(i));
  }

  // repeated .pb.Pin pin = 2;
  total_size += 1 * this->pin_size();
  for (int i = 0; i < this->pin_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->pin(i));
  }

  // repeated .pb.Signal signal = 3;
  total_size += 1 * this->signal_size();
  for (int i = 0; i < this->signal_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->signal(i));
  }

  // repeated .pb.Param param = 103;
  total_size += 2 * this->param_size();
  for (int i = 0; i < this->param_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->param(i));
  }

  // repeated .pb.Thread thread = 104;
  total_size += 2 * this->thread_size();
  for (int i = 0; i < this->thread_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->thread(i));
  }

  // repeated .pb.Ring ring = 105;
  total_size += 2 * this->ring_size();
  for (int i = 0; i < this->ring_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->ring(i));
  }

  // repeated .pb.Group group = 106;
  total_size += 2 * this->group_size();
  for (int i = 0; i < this->group_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->group(i));
  }

  // repeated .pb.Member member = 107;
  total_size += 2 * this->member_size();
  for (int i = 0; i < this->member_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->member(i));
  }

  // repeated .pb.Function function = 108;
  total_size += 2 * this->function_size();
  for (int i = 0; i < this->function_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->function(i));
  }

  // repeated .pb.Vtable vtable = 110;
  total_size += 2 * this->vtable_size();
  for (int i = 0; i < this->vtable_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->vtable(i));
  }

  // repeated .pb.Inst inst = 111;
  total_size += 2 * this->inst_size();
  for (int i = 0; i < this->inst_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->inst(i));
  }

  // repeated .pb.Application app = 120;
  total_size += 2 * this->app_size();
  for (int i = 0; i < this->app_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->app(i));
  }

  // repeated .pb.Launcher launcher = 130;
  total_size += 2 * this->launcher_size();
  for (int i = 0; i < this->launcher_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->launcher(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Container::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Container* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Container*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Container::MergeFrom(const Container& from) {
  GOOGLE_CHECK_NE(&from, this);
  preview_.MergeFrom(from.preview_);
  note_.MergeFrom(from.note_);
  value_.MergeFrom(from.value_);
  service_announcement_.MergeFrom(from.service_announcement_);
  comp_.MergeFrom(from.comp_);
  pin_.MergeFrom(from.pin_);
  signal_.MergeFrom(from.signal_);
  param_.MergeFrom(from.param_);
  thread_.MergeFrom(from.thread_);
  ring_.MergeFrom(from.ring_);
  group_.MergeFrom(from.group_);
  member_.MergeFrom(from.member_);
  function_.MergeFrom(from.function_);
  vtable_.MergeFrom(from.vtable_);
  inst_.MergeFrom(from.inst_);
  app_.MergeFrom(from.app_);
  launcher_.MergeFrom(from.launcher_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_tsc()) {
      set_tsc(from.tsc());
    }
    if (from.has_motcmd()) {
      mutable_motcmd()->::pb::MotionCommand::MergeFrom(from.motcmd());
    }
    if (from.has_motstat()) {
      mutable_motstat()->::pb::MotionStatus::MergeFrom(from.motstat());
    }
    if (from.has_legacy_motcmd()) {
      set_legacy_motcmd(from.legacy_motcmd());
    }
    if (from.has_legacy_motstat()) {
      set_legacy_motstat(from.legacy_motstat());
    }
    if (from.has_rtapi_message()) {
      mutable_rtapi_message()->::pb::RTAPI_Message::MergeFrom(from.rtapi_message());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_task_reply()) {
      mutable_task_reply()->::pb::TaskReply::MergeFrom(from.task_reply());
    }
    if (from.has_ticket_update()) {
      mutable_ticket_update()->::pb::TicketUpdate::MergeFrom(from.ticket_update());
    }
    if (from.has_syslog()) {
      set_syslog(from.syslog());
    }
    if (from.has_legacy_nml()) {
      set_legacy_nml(from.legacy_nml());
    }
    if (from.has_legacy_motconfig()) {
      set_legacy_motconfig(from.legacy_motconfig());
    }
    if (from.has_tv_sec()) {
      set_tv_sec(from.tv_sec());
    }
    if (from.has_tv_nsec()) {
      set_tv_nsec(from.tv_nsec());
    }
    if (from.has_topic()) {
      set_topic(from.topic());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_reply_required()) {
      set_reply_required(from.reply_required());
    }
    if (from.has_interp_state()) {
      set_interp_state(from.interp_state());
    }
    if (from.has_interp_name()) {
      set_interp_name(from.interp_name());
    }
    if (from.has_rsvp()) {
      set_rsvp(from.rsvp());
    }
    if (from.has_in_reply_to()) {
      set_in_reply_to(from.in_reply_to());
    }
    if (from.has_rcs_status()) {
      set_rcs_status(from.rcs_status());
    }
    if (from.has_status()) {
      set_status(from.status());
    }
    if (from.has_serial()) {
      set_serial(from.serial());
    }
  }
  if (from._has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    if (from.has_reply_serial()) {
      set_reply_serial(from.reply_serial());
    }
    if (from.has_ticket()) {
      set_ticket(from.ticket());
    }
    if (from.has_reply_ticket()) {
      set_reply_ticket(from.reply_ticket());
    }
    if (from.has_sequence()) {
      set_sequence(from.sequence());
    }
    if (from.has_credit()) {
      set_credit(from.credit());
    }
    if (from.has_line_number()) {
      set_line_number(from.line_number());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
  }
  if (from._has_bits_[32 / 32] & (0xffu << (32 % 32))) {
    if (from.has_retcode()) {
      set_retcode(from.retcode());
    }
    if (from.has_uuid()) {
      set_uuid(from.uuid());
    }
    if (from.has_trace()) {
      set_trace(from.trace());
    }
    if (from.has_instance()) {
      set_instance(from.instance());
    }
    if (from.has_rtapicmd()) {
      mutable_rtapicmd()->::pb::RTAPICommand::MergeFrom(from.rtapicmd());
    }
  }
  if (from._has_bits_[48 / 32] & (0xffu << (48 % 32))) {
    if (from.has_pparams()) {
      mutable_pparams()->::pb::ProtocolParameters::MergeFrom(from.pparams());
    }
    if (from.has_index()) {
      set_index(from.index());
    }
    if (from.has_log_message()) {
      mutable_log_message()->::pb::LogMessage::MergeFrom(from.log_message());
    }
    if (from.has_tpexecute()) {
      mutable_tpexecute()->::pb::TaskPlanExecute::MergeFrom(from.tpexecute());
    }
  }
  if (from._has_bits_[56 / 32] & (0xffu << (56 % 32))) {
    if (from.has_tpblockdelete()) {
      mutable_tpblockdelete()->::pb::TaskPlanBlockDelete::MergeFrom(from.tpblockdelete());
    }
    if (from.has_tpoptionalstop()) {
      mutable_tpoptionalstop()->::pb::TaskPlanOptionalStop::MergeFrom(from.tpoptionalstop());
    }
    if (from.has_tpopen()) {
      mutable_tpopen()->::pb::TaskPlanOpen::MergeFrom(from.tpopen());
    }
    if (from.has_taskplan_reply()) {
      mutable_taskplan_reply()->::pb::TaskPlanReply::MergeFrom(from.taskplan_reply());
    }
    if (from.has_traj_set_g5x()) {
      mutable_traj_set_g5x()->::pb::Emc_Traj_Set_G5x::MergeFrom(from.traj_set_g5x());
    }
    if (from.has_traj_set_g92()) {
      mutable_traj_set_g92()->::pb::Emc_Traj_Set_G92::MergeFrom(from.traj_set_g92());
    }
    if (from.has_traj_set_rotation()) {
      mutable_traj_set_rotation()->::pb::Emc_Traj_Set_Rotation::MergeFrom(from.traj_set_rotation());
    }
    if (from.has_traj_linear_move()) {
      mutable_traj_linear_move()->::pb::Emc_Traj_Linear_Move::MergeFrom(from.traj_linear_move());
    }
  }
  if (from._has_bits_[64 / 32] & (0xffu << (64 % 32))) {
    if (from.has_traj_probe()) {
      mutable_traj_probe()->::pb::Emc_Traj_Probe::MergeFrom(from.traj_probe());
    }
    if (from.has_traj_circular_move()) {
      mutable_traj_circular_move()->::pb::Emc_Traj_Circular_Move::MergeFrom(from.traj_circular_move());
    }
    if (from.has_traj_rigid_tap()) {
      mutable_traj_rigid_tap()->::pb::Emc_Traj_Rigid_Tap::MergeFrom(from.traj_rigid_tap());
    }
    if (from.has_traj_set_term_cond()) {
      mutable_traj_set_term_cond()->::pb::Emc_Traj_Set_Term_Cond::MergeFrom(from.traj_set_term_cond());
    }
    if (from.has_traj_set_spindlesync()) {
      mutable_traj_set_spindlesync()->::pb::Emc_Traj_Set_Spindlesync::MergeFrom(from.traj_set_spindlesync());
    }
    if (from.has_traj_delay()) {
      mutable_traj_delay()->::pb::Emc_Traj_Delay::MergeFrom(from.traj_delay());
    }
    if (from.has_spindle_on()) {
      mutable_spindle_on()->::pb::Emc_Spindle_On::MergeFrom(from.spindle_on());
    }
    if (from.has_spindle_speed()) {
      mutable_spindle_speed()->::pb::Emc_Spindle_Speed::MergeFrom(from.spindle_speed());
    }
  }
  if (from._has_bits_[72 / 32] & (0xffu << (72 % 32))) {
    if (from.has_spindle_orient()) {
      mutable_spindle_orient()->::pb::Emc_Spindle_Orient::MergeFrom(from.spindle_orient());
    }
    if (from.has_spindle_wait_orient_complete()) {
      mutable_spindle_wait_orient_complete()->::pb::Emc_Spindle_Wait_Orient_Complete::MergeFrom(from.spindle_wait_orient_complete());
    }
    if (from.has_tool_set_offet()) {
      mutable_tool_set_offet()->::pb::Emc_Tool_Set_Offset::MergeFrom(from.tool_set_offet());
    }
    if (from.has_traj_set_offset()) {
      mutable_traj_set_offset()->::pb::Emc_Traj_Set_Offset::MergeFrom(from.traj_set_offset());
    }
    if (from.has_tool_prepare()) {
      mutable_tool_prepare()->::pb::Emc_Tool_Prepare::MergeFrom(from.tool_prepare());
    }
    if (from.has_tool_set_number()) {
      mutable_tool_set_number()->::pb::Emc_Tool_Set_Number::MergeFrom(from.tool_set_number());
    }
    if (from.has_traj_set_fo_enable()) {
      mutable_traj_set_fo_enable()->::pb::Emc_Traj_Set_Fo_Enable::MergeFrom(from.traj_set_fo_enable());
    }
    if (from.has_traj_set_so_enable()) {
      mutable_traj_set_so_enable()->::pb::Emc_Traj_Set_So_Enable::MergeFrom(from.traj_set_so_enable());
    }
  }
  if (from._has_bits_[80 / 32] & (0xffu << (80 % 32))) {
    if (from.has_traj_set_fh_enable()) {
      mutable_traj_set_fh_enable()->::pb::Emc_Traj_Set_Fh_Enable::MergeFrom(from.traj_set_fh_enable());
    }
    if (from.has_motion_adaptive()) {
      mutable_motion_adaptive()->::pb::Emc_Motion_Adaptive::MergeFrom(from.motion_adaptive());
    }
    if (from.has_operator_display()) {
      mutable_operator_display()->::pb::Emc_Operator_Display::MergeFrom(from.operator_display());
    }
    if (from.has_operator_text()) {
      mutable_operator_text()->::pb::Emc_Operator_Text::MergeFrom(from.operator_text());
    }
    if (from.has_operator_error()) {
      mutable_operator_error()->::pb::Emc_Operator_Error::MergeFrom(from.operator_error());
    }
    if (from.has_motion_set_dout()) {
      mutable_motion_set_dout()->::pb::Emc_Motion_Set_Dout::MergeFrom(from.motion_set_dout());
    }
    if (from.has_motion_set_aout()) {
      mutable_motion_set_aout()->::pb::Emc_Motion_Set_Aout::MergeFrom(from.motion_set_aout());
    }
    if (from.has_aux_input_wait()) {
      mutable_aux_input_wait()->::pb::Emc_Aux_Input_Wait::MergeFrom(from.aux_input_wait());
    }
  }
  if (from._has_bits_[88 / 32] & (0xffu << (88 % 32))) {
    if (from.has_exec_plugin_call()) {
      mutable_exec_plugin_call()->::pb::Emc_Exec_Plugin_Ca1l::MergeFrom(from.exec_plugin_call());
    }
    if (from.has_io_plugin_call()) {
      mutable_io_plugin_call()->::pb::Emc_Io_Plugin_Call::MergeFrom(from.io_plugin_call());
    }
    if (from.has_emc_status_config()) {
      mutable_emc_status_config()->::pb::EmcStatusConfig::MergeFrom(from.emc_status_config());
    }
    if (from.has_emc_status_motion()) {
      mutable_emc_status_motion()->::pb::EmcStatusMotion::MergeFrom(from.emc_status_motion());
    }
    if (from.has_emc_status_io()) {
      mutable_emc_status_io()->::pb::EmcStatusIo::MergeFrom(from.emc_status_io());
    }
    if (from.has_emc_status_task()) {
      mutable_emc_status_task()->::pb::EmcStatusTask::MergeFrom(from.emc_status_task());
    }
    if (from.has_emc_status_interp()) {
      mutable_emc_status_interp()->::pb::EmcStatusInterp::MergeFrom(from.emc_status_interp());
    }
    if (from.has_emc_command_params()) {
      mutable_emc_command_params()->::pb::EmcCommandParameters::MergeFrom(from.emc_command_params());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Container::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Container::CopyFrom(const Container& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Container::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->preview())) return false;
  if (has_motcmd()) {
    if (!this->motcmd().IsInitialized()) return false;
  }
  if (has_motstat()) {
    if (!this->motstat().IsInitialized()) return false;
  }
  if (has_rtapi_message()) {
    if (!this->rtapi_message().IsInitialized()) return false;
  }
  if (has_task_reply()) {
    if (!this->task_reply().IsInitialized()) return false;
  }
  if (has_ticket_update()) {
    if (!this->ticket_update().IsInitialized()) return false;
  }
  if (!::google::protobuf::internal::AllAreInitialized(this->value())) return false;
  if (has_rtapicmd()) {
    if (!this->rtapicmd().IsInitialized()) return false;
  }
  if (!::google::protobuf::internal::AllAreInitialized(this->service_announcement())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->app())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->launcher())) return false;
  if (has_log_message()) {
    if (!this->log_message().IsInitialized()) return false;
  }
  if (has_tpblockdelete()) {
    if (!this->tpblockdelete().IsInitialized()) return false;
  }
  if (has_tpoptionalstop()) {
    if (!this->tpoptionalstop().IsInitialized()) return false;
  }
  if (has_tpopen()) {
    if (!this->tpopen().IsInitialized()) return false;
  }
  if (has_taskplan_reply()) {
    if (!this->taskplan_reply().IsInitialized()) return false;
  }
  if (has_traj_set_g5x()) {
    if (!this->traj_set_g5x().IsInitialized()) return false;
  }
  if (has_traj_set_g92()) {
    if (!this->traj_set_g92().IsInitialized()) return false;
  }
  if (has_traj_set_rotation()) {
    if (!this->traj_set_rotation().IsInitialized()) return false;
  }
  if (has_traj_linear_move()) {
    if (!this->traj_linear_move().IsInitialized()) return false;
  }
  if (has_traj_probe()) {
    if (!this->traj_probe().IsInitialized()) return false;
  }
  if (has_traj_circular_move()) {
    if (!this->traj_circular_move().IsInitialized()) return false;
  }
  if (has_traj_rigid_tap()) {
    if (!this->traj_rigid_tap().IsInitialized()) return false;
  }
  if (has_traj_set_term_cond()) {
    if (!this->traj_set_term_cond().IsInitialized()) return false;
  }
  if (has_traj_set_spindlesync()) {
    if (!this->traj_set_spindlesync().IsInitialized()) return false;
  }
  if (has_traj_delay()) {
    if (!this->traj_delay().IsInitialized()) return false;
  }
  if (has_spindle_on()) {
    if (!this->spindle_on().IsInitialized()) return false;
  }
  if (has_spindle_speed()) {
    if (!this->spindle_speed().IsInitialized()) return false;
  }
  if (has_spindle_orient()) {
    if (!this->spindle_orient().IsInitialized()) return false;
  }
  if (has_spindle_wait_orient_complete()) {
    if (!this->spindle_wait_orient_complete().IsInitialized()) return false;
  }
  if (has_tool_set_offet()) {
    if (!this->tool_set_offet().IsInitialized()) return false;
  }
  if (has_traj_set_offset()) {
    if (!this->traj_set_offset().IsInitialized()) return false;
  }
  if (has_tool_prepare()) {
    if (!this->tool_prepare().IsInitialized()) return false;
  }
  if (has_tool_set_number()) {
    if (!this->tool_set_number().IsInitialized()) return false;
  }
  if (has_traj_set_fo_enable()) {
    if (!this->traj_set_fo_enable().IsInitialized()) return false;
  }
  if (has_traj_set_so_enable()) {
    if (!this->traj_set_so_enable().IsInitialized()) return false;
  }
  if (has_traj_set_fh_enable()) {
    if (!this->traj_set_fh_enable().IsInitialized()) return false;
  }
  if (has_motion_adaptive()) {
    if (!this->motion_adaptive().IsInitialized()) return false;
  }
  if (has_operator_display()) {
    if (!this->operator_display().IsInitialized()) return false;
  }
  if (has_operator_text()) {
    if (!this->operator_text().IsInitialized()) return false;
  }
  if (has_operator_error()) {
    if (!this->operator_error().IsInitialized()) return false;
  }
  if (has_motion_set_dout()) {
    if (!this->motion_set_dout().IsInitialized()) return false;
  }
  if (has_motion_set_aout()) {
    if (!this->motion_set_aout().IsInitialized()) return false;
  }
  if (has_aux_input_wait()) {
    if (!this->aux_input_wait().IsInitialized()) return false;
  }
  if (has_exec_plugin_call()) {
    if (!this->exec_plugin_call().IsInitialized()) return false;
  }
  if (has_io_plugin_call()) {
    if (!this->io_plugin_call().IsInitialized()) return false;
  }
  if (has_emc_status_config()) {
    if (!this->emc_status_config().IsInitialized()) return false;
  }
  if (has_emc_status_motion()) {
    if (!this->emc_status_motion().IsInitialized()) return false;
  }
  if (has_emc_status_io()) {
    if (!this->emc_status_io().IsInitialized()) return false;
  }
  if (has_emc_status_interp()) {
    if (!this->emc_status_interp().IsInitialized()) return false;
  }
  if (has_emc_command_params()) {
    if (!this->emc_command_params().IsInitialized()) return false;
  }
  return true;
}

void Container::Swap(Container* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(tsc_, other->tsc_);
    preview_.Swap(&other->preview_);
    std::swap(motcmd_, other->motcmd_);
    std::swap(motstat_, other->motstat_);
    std::swap(legacy_motcmd_, other->legacy_motcmd_);
    std::swap(legacy_motstat_, other->legacy_motstat_);
    std::swap(rtapi_message_, other->rtapi_message_);
    std::swap(task_reply_, other->task_reply_);
    std::swap(ticket_update_, other->ticket_update_);
    std::swap(syslog_, other->syslog_);
    std::swap(legacy_nml_, other->legacy_nml_);
    std::swap(legacy_motconfig_, other->legacy_motconfig_);
    std::swap(tv_sec_, other->tv_sec_);
    std::swap(tv_nsec_, other->tv_nsec_);
    std::swap(topic_, other->topic_);
    std::swap(reply_required_, other->reply_required_);
    std::swap(interp_state_, other->interp_state_);
    std::swap(interp_name_, other->interp_name_);
    std::swap(rsvp_, other->rsvp_);
    std::swap(in_reply_to_, other->in_reply_to_);
    std::swap(rcs_status_, other->rcs_status_);
    std::swap(status_, other->status_);
    std::swap(serial_, other->serial_);
    std::swap(reply_serial_, other->reply_serial_);
    std::swap(ticket_, other->ticket_);
    std::swap(reply_ticket_, other->reply_ticket_);
    std::swap(sequence_, other->sequence_);
    std::swap(credit_, other->credit_);
    std::swap(line_number_, other->line_number_);
    std::swap(name_, other->name_);
    note_.Swap(&other->note_);
    std::swap(retcode_, other->retcode_);
    std::swap(uuid_, other->uuid_);
    std::swap(trace_, other->trace_);
    std::swap(instance_, other->instance_);
    value_.Swap(&other->value_);
    std::swap(rtapicmd_, other->rtapicmd_);
    service_announcement_.Swap(&other->service_announcement_);
    comp_.Swap(&other->comp_);
    pin_.Swap(&other->pin_);
    signal_.Swap(&other->signal_);
    param_.Swap(&other->param_);
    thread_.Swap(&other->thread_);
    ring_.Swap(&other->ring_);
    group_.Swap(&other->group_);
    member_.Swap(&other->member_);
    function_.Swap(&other->function_);
    std::swap(pparams_, other->pparams_);
    vtable_.Swap(&other->vtable_);
    inst_.Swap(&other->inst_);
    app_.Swap(&other->app_);
    launcher_.Swap(&other->launcher_);
    std::swap(index_, other->index_);
    std::swap(log_message_, other->log_message_);
    std::swap(tpexecute_, other->tpexecute_);
    std::swap(tpblockdelete_, other->tpblockdelete_);
    std::swap(tpoptionalstop_, other->tpoptionalstop_);
    std::swap(tpopen_, other->tpopen_);
    std::swap(taskplan_reply_, other->taskplan_reply_);
    std::swap(traj_set_g5x_, other->traj_set_g5x_);
    std::swap(traj_set_g92_, other->traj_set_g92_);
    std::swap(traj_set_rotation_, other->traj_set_rotation_);
    std::swap(traj_linear_move_, other->traj_linear_move_);
    std::swap(traj_probe_, other->traj_probe_);
    std::swap(traj_circular_move_, other->traj_circular_move_);
    std::swap(traj_rigid_tap_, other->traj_rigid_tap_);
    std::swap(traj_set_term_cond_, other->traj_set_term_cond_);
    std::swap(traj_set_spindlesync_, other->traj_set_spindlesync_);
    std::swap(traj_delay_, other->traj_delay_);
    std::swap(spindle_on_, other->spindle_on_);
    std::swap(spindle_speed_, other->spindle_speed_);
    std::swap(spindle_orient_, other->spindle_orient_);
    std::swap(spindle_wait_orient_complete_, other->spindle_wait_orient_complete_);
    std::swap(tool_set_offet_, other->tool_set_offet_);
    std::swap(traj_set_offset_, other->traj_set_offset_);
    std::swap(tool_prepare_, other->tool_prepare_);
    std::swap(tool_set_number_, other->tool_set_number_);
    std::swap(traj_set_fo_enable_, other->traj_set_fo_enable_);
    std::swap(traj_set_so_enable_, other->traj_set_so_enable_);
    std::swap(traj_set_fh_enable_, other->traj_set_fh_enable_);
    std::swap(motion_adaptive_, other->motion_adaptive_);
    std::swap(operator_display_, other->operator_display_);
    std::swap(operator_text_, other->operator_text_);
    std::swap(operator_error_, other->operator_error_);
    std::swap(motion_set_dout_, other->motion_set_dout_);
    std::swap(motion_set_aout_, other->motion_set_aout_);
    std::swap(aux_input_wait_, other->aux_input_wait_);
    std::swap(exec_plugin_call_, other->exec_plugin_call_);
    std::swap(io_plugin_call_, other->io_plugin_call_);
    std::swap(emc_status_config_, other->emc_status_config_);
    std::swap(emc_status_motion_, other->emc_status_motion_);
    std::swap(emc_status_io_, other->emc_status_io_);
    std::swap(emc_status_task_, other->emc_status_task_);
    std::swap(emc_status_interp_, other->emc_status_interp_);
    std::swap(emc_command_params_, other->emc_command_params_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_has_bits_[1], other->_has_bits_[1]);
    std::swap(_has_bits_[2], other->_has_bits_[2]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Container::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Container_descriptor_;
  metadata.reflection = Container_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace pb

// @@protoc_insertion_point(global_scope)
