// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: task.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "task.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace pb {

namespace {

const ::google::protobuf::Descriptor* TaskPlanExecute_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TaskPlanExecute_reflection_ = NULL;
const ::google::protobuf::Descriptor* TaskPlanBlockDelete_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TaskPlanBlockDelete_reflection_ = NULL;
const ::google::protobuf::Descriptor* TaskPlanOptionalStop_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TaskPlanOptionalStop_reflection_ = NULL;
const ::google::protobuf::Descriptor* TaskPlanOpen_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TaskPlanOpen_reflection_ = NULL;
const ::google::protobuf::Descriptor* TaskPlanReply_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TaskPlanReply_reflection_ = NULL;
const ::google::protobuf::Descriptor* TaskReply_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TaskReply_reflection_ = NULL;
const ::google::protobuf::Descriptor* TicketUpdate_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TicketUpdate_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_task_2eproto() {
  protobuf_AddDesc_task_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "task.proto");
  GOOGLE_CHECK(file != NULL);
  TaskPlanExecute_descriptor_ = file->message_type(0);
  static const int TaskPlanExecute_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TaskPlanExecute, command_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TaskPlanExecute, line_),
  };
  TaskPlanExecute_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TaskPlanExecute_descriptor_,
      TaskPlanExecute::default_instance_,
      TaskPlanExecute_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TaskPlanExecute, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TaskPlanExecute, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TaskPlanExecute));
  TaskPlanBlockDelete_descriptor_ = file->message_type(1);
  static const int TaskPlanBlockDelete_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TaskPlanBlockDelete, state_),
  };
  TaskPlanBlockDelete_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TaskPlanBlockDelete_descriptor_,
      TaskPlanBlockDelete::default_instance_,
      TaskPlanBlockDelete_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TaskPlanBlockDelete, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TaskPlanBlockDelete, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TaskPlanBlockDelete));
  TaskPlanOptionalStop_descriptor_ = file->message_type(2);
  static const int TaskPlanOptionalStop_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TaskPlanOptionalStop, state_),
  };
  TaskPlanOptionalStop_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TaskPlanOptionalStop_descriptor_,
      TaskPlanOptionalStop::default_instance_,
      TaskPlanOptionalStop_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TaskPlanOptionalStop, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TaskPlanOptionalStop, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TaskPlanOptionalStop));
  TaskPlanOpen_descriptor_ = file->message_type(3);
  static const int TaskPlanOpen_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TaskPlanOpen, filename_),
  };
  TaskPlanOpen_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TaskPlanOpen_descriptor_,
      TaskPlanOpen::default_instance_,
      TaskPlanOpen_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TaskPlanOpen, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TaskPlanOpen, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TaskPlanOpen));
  TaskPlanReply_descriptor_ = file->message_type(4);
  static const int TaskPlanReply_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TaskPlanReply, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TaskPlanReply, errormsg_),
  };
  TaskPlanReply_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TaskPlanReply_descriptor_,
      TaskPlanReply::default_instance_,
      TaskPlanReply_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TaskPlanReply, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TaskPlanReply, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TaskPlanReply));
  TaskReply_descriptor_ = file->message_type(5);
  static const int TaskReply_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TaskReply, ticket_),
  };
  TaskReply_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TaskReply_descriptor_,
      TaskReply::default_instance_,
      TaskReply_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TaskReply, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TaskReply, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TaskReply));
  TicketUpdate_descriptor_ = file->message_type(6);
  static const int TicketUpdate_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TicketUpdate, cticket_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TicketUpdate, status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TicketUpdate, text_),
  };
  TicketUpdate_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TicketUpdate_descriptor_,
      TicketUpdate::default_instance_,
      TicketUpdate_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TicketUpdate, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TicketUpdate, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TicketUpdate));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_task_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TaskPlanExecute_descriptor_, &TaskPlanExecute::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TaskPlanBlockDelete_descriptor_, &TaskPlanBlockDelete::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TaskPlanOptionalStop_descriptor_, &TaskPlanOptionalStop::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TaskPlanOpen_descriptor_, &TaskPlanOpen::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TaskPlanReply_descriptor_, &TaskPlanReply::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TaskReply_descriptor_, &TaskReply::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TicketUpdate_descriptor_, &TicketUpdate::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_task_2eproto() {
  delete TaskPlanExecute::default_instance_;
  delete TaskPlanExecute_reflection_;
  delete TaskPlanBlockDelete::default_instance_;
  delete TaskPlanBlockDelete_reflection_;
  delete TaskPlanOptionalStop::default_instance_;
  delete TaskPlanOptionalStop_reflection_;
  delete TaskPlanOpen::default_instance_;
  delete TaskPlanOpen_reflection_;
  delete TaskPlanReply::default_instance_;
  delete TaskPlanReply_reflection_;
  delete TaskReply::default_instance_;
  delete TaskReply_reflection_;
  delete TicketUpdate::default_instance_;
  delete TicketUpdate_reflection_;
}

void protobuf_AddDesc_task_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::pb::protobuf_AddDesc_types_2eproto();
  ::protobuf_AddDesc_nanopb_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\ntask.proto\022\002pb\032\013types.proto\032\014nanopb.pr"
    "oto\"8\n\017TaskPlanExecute\022\017\n\007command\030\n \001(\t\022"
    "\014\n\004line\030\036 \001(\017:\006\222\?\003H\260\t\",\n\023TaskPlanBlockDe"
    "lete\022\r\n\005state\030\n \002(\010:\006\222\?\003H\261\t\"-\n\024TaskPlanO"
    "ptionalStop\022\r\n\005state\030\n \002(\010:\006\222\?\003H\262\t\"(\n\014Ta"
    "skPlanOpen\022\020\n\010filename\030\n \002(\t:\006\222\?\003H\263\t\"I\n\r"
    "TaskPlanReply\022\036\n\003cmd\030\n \002(\0162\021.pb.Containe"
    "rType\022\020\n\010errormsg\030\024 \001(\t:\006\222\?\003H\264\t\"#\n\tTaskR"
    "eply\022\016\n\006ticket\030\n \002(\007:\006\222\?\003H\265\t\"U\n\014TicketUp"
    "date\022\017\n\007cticket\030\n \002(\007\022\036\n\006status\030\024 \002(\0162\016."
    "pb.RCS_STATUS\022\014\n\004text\030\036 \001(\t:\006\222\?\003H\266\t", 435);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "task.proto", &protobuf_RegisterTypes);
  TaskPlanExecute::default_instance_ = new TaskPlanExecute();
  TaskPlanBlockDelete::default_instance_ = new TaskPlanBlockDelete();
  TaskPlanOptionalStop::default_instance_ = new TaskPlanOptionalStop();
  TaskPlanOpen::default_instance_ = new TaskPlanOpen();
  TaskPlanReply::default_instance_ = new TaskPlanReply();
  TaskReply::default_instance_ = new TaskReply();
  TicketUpdate::default_instance_ = new TicketUpdate();
  TaskPlanExecute::default_instance_->InitAsDefaultInstance();
  TaskPlanBlockDelete::default_instance_->InitAsDefaultInstance();
  TaskPlanOptionalStop::default_instance_->InitAsDefaultInstance();
  TaskPlanOpen::default_instance_->InitAsDefaultInstance();
  TaskPlanReply::default_instance_->InitAsDefaultInstance();
  TaskReply::default_instance_->InitAsDefaultInstance();
  TicketUpdate::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_task_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_task_2eproto {
  StaticDescriptorInitializer_task_2eproto() {
    protobuf_AddDesc_task_2eproto();
  }
} static_descriptor_initializer_task_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int TaskPlanExecute::kCommandFieldNumber;
const int TaskPlanExecute::kLineFieldNumber;
#endif  // !_MSC_VER

TaskPlanExecute::TaskPlanExecute()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TaskPlanExecute)
}

void TaskPlanExecute::InitAsDefaultInstance() {
}

TaskPlanExecute::TaskPlanExecute(const TaskPlanExecute& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TaskPlanExecute)
}

void TaskPlanExecute::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  command_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  line_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TaskPlanExecute::~TaskPlanExecute() {
  // @@protoc_insertion_point(destructor:pb.TaskPlanExecute)
  SharedDtor();
}

void TaskPlanExecute::SharedDtor() {
  if (command_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete command_;
  }
  if (this != default_instance_) {
  }
}

void TaskPlanExecute::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TaskPlanExecute::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TaskPlanExecute_descriptor_;
}

const TaskPlanExecute& TaskPlanExecute::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_task_2eproto();
  return *default_instance_;
}

TaskPlanExecute* TaskPlanExecute::default_instance_ = NULL;

TaskPlanExecute* TaskPlanExecute::New() const {
  return new TaskPlanExecute;
}

void TaskPlanExecute::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_command()) {
      if (command_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        command_->clear();
      }
    }
    line_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TaskPlanExecute::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TaskPlanExecute)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string command = 10;
      case 10: {
        if (tag == 82) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_command()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->command().data(), this->command().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "command");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(245)) goto parse_line;
        break;
      }

      // optional sfixed32 line = 30;
      case 30: {
        if (tag == 245) {
         parse_line:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED32>(
                 input, &line_)));
          set_has_line();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TaskPlanExecute)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TaskPlanExecute)
  return false;
#undef DO_
}

void TaskPlanExecute::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TaskPlanExecute)
  // optional string command = 10;
  if (has_command()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->command().data(), this->command().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "command");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      10, this->command(), output);
  }

  // optional sfixed32 line = 30;
  if (has_line()) {
    ::google::protobuf::internal::WireFormatLite::WriteSFixed32(30, this->line(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TaskPlanExecute)
}

::google::protobuf::uint8* TaskPlanExecute::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TaskPlanExecute)
  // optional string command = 10;
  if (has_command()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->command().data(), this->command().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "command");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->command(), target);
  }

  // optional sfixed32 line = 30;
  if (has_line()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSFixed32ToArray(30, this->line(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TaskPlanExecute)
  return target;
}

int TaskPlanExecute::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string command = 10;
    if (has_command()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->command());
    }

    // optional sfixed32 line = 30;
    if (has_line()) {
      total_size += 2 + 4;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TaskPlanExecute::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TaskPlanExecute* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TaskPlanExecute*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TaskPlanExecute::MergeFrom(const TaskPlanExecute& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_command()) {
      set_command(from.command());
    }
    if (from.has_line()) {
      set_line(from.line());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TaskPlanExecute::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TaskPlanExecute::CopyFrom(const TaskPlanExecute& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TaskPlanExecute::IsInitialized() const {

  return true;
}

void TaskPlanExecute::Swap(TaskPlanExecute* other) {
  if (other != this) {
    std::swap(command_, other->command_);
    std::swap(line_, other->line_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TaskPlanExecute::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TaskPlanExecute_descriptor_;
  metadata.reflection = TaskPlanExecute_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TaskPlanBlockDelete::kStateFieldNumber;
#endif  // !_MSC_VER

TaskPlanBlockDelete::TaskPlanBlockDelete()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TaskPlanBlockDelete)
}

void TaskPlanBlockDelete::InitAsDefaultInstance() {
}

TaskPlanBlockDelete::TaskPlanBlockDelete(const TaskPlanBlockDelete& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TaskPlanBlockDelete)
}

void TaskPlanBlockDelete::SharedCtor() {
  _cached_size_ = 0;
  state_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TaskPlanBlockDelete::~TaskPlanBlockDelete() {
  // @@protoc_insertion_point(destructor:pb.TaskPlanBlockDelete)
  SharedDtor();
}

void TaskPlanBlockDelete::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TaskPlanBlockDelete::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TaskPlanBlockDelete::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TaskPlanBlockDelete_descriptor_;
}

const TaskPlanBlockDelete& TaskPlanBlockDelete::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_task_2eproto();
  return *default_instance_;
}

TaskPlanBlockDelete* TaskPlanBlockDelete::default_instance_ = NULL;

TaskPlanBlockDelete* TaskPlanBlockDelete::New() const {
  return new TaskPlanBlockDelete;
}

void TaskPlanBlockDelete::Clear() {
  state_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TaskPlanBlockDelete::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TaskPlanBlockDelete)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bool state = 10;
      case 10: {
        if (tag == 80) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &state_)));
          set_has_state();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TaskPlanBlockDelete)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TaskPlanBlockDelete)
  return false;
#undef DO_
}

void TaskPlanBlockDelete::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TaskPlanBlockDelete)
  // required bool state = 10;
  if (has_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(10, this->state(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TaskPlanBlockDelete)
}

::google::protobuf::uint8* TaskPlanBlockDelete::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TaskPlanBlockDelete)
  // required bool state = 10;
  if (has_state()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(10, this->state(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TaskPlanBlockDelete)
  return target;
}

int TaskPlanBlockDelete::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bool state = 10;
    if (has_state()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TaskPlanBlockDelete::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TaskPlanBlockDelete* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TaskPlanBlockDelete*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TaskPlanBlockDelete::MergeFrom(const TaskPlanBlockDelete& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_state()) {
      set_state(from.state());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TaskPlanBlockDelete::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TaskPlanBlockDelete::CopyFrom(const TaskPlanBlockDelete& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TaskPlanBlockDelete::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void TaskPlanBlockDelete::Swap(TaskPlanBlockDelete* other) {
  if (other != this) {
    std::swap(state_, other->state_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TaskPlanBlockDelete::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TaskPlanBlockDelete_descriptor_;
  metadata.reflection = TaskPlanBlockDelete_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TaskPlanOptionalStop::kStateFieldNumber;
#endif  // !_MSC_VER

TaskPlanOptionalStop::TaskPlanOptionalStop()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TaskPlanOptionalStop)
}

void TaskPlanOptionalStop::InitAsDefaultInstance() {
}

TaskPlanOptionalStop::TaskPlanOptionalStop(const TaskPlanOptionalStop& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TaskPlanOptionalStop)
}

void TaskPlanOptionalStop::SharedCtor() {
  _cached_size_ = 0;
  state_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TaskPlanOptionalStop::~TaskPlanOptionalStop() {
  // @@protoc_insertion_point(destructor:pb.TaskPlanOptionalStop)
  SharedDtor();
}

void TaskPlanOptionalStop::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TaskPlanOptionalStop::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TaskPlanOptionalStop::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TaskPlanOptionalStop_descriptor_;
}

const TaskPlanOptionalStop& TaskPlanOptionalStop::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_task_2eproto();
  return *default_instance_;
}

TaskPlanOptionalStop* TaskPlanOptionalStop::default_instance_ = NULL;

TaskPlanOptionalStop* TaskPlanOptionalStop::New() const {
  return new TaskPlanOptionalStop;
}

void TaskPlanOptionalStop::Clear() {
  state_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TaskPlanOptionalStop::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TaskPlanOptionalStop)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bool state = 10;
      case 10: {
        if (tag == 80) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &state_)));
          set_has_state();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TaskPlanOptionalStop)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TaskPlanOptionalStop)
  return false;
#undef DO_
}

void TaskPlanOptionalStop::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TaskPlanOptionalStop)
  // required bool state = 10;
  if (has_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(10, this->state(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TaskPlanOptionalStop)
}

::google::protobuf::uint8* TaskPlanOptionalStop::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TaskPlanOptionalStop)
  // required bool state = 10;
  if (has_state()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(10, this->state(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TaskPlanOptionalStop)
  return target;
}

int TaskPlanOptionalStop::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bool state = 10;
    if (has_state()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TaskPlanOptionalStop::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TaskPlanOptionalStop* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TaskPlanOptionalStop*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TaskPlanOptionalStop::MergeFrom(const TaskPlanOptionalStop& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_state()) {
      set_state(from.state());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TaskPlanOptionalStop::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TaskPlanOptionalStop::CopyFrom(const TaskPlanOptionalStop& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TaskPlanOptionalStop::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void TaskPlanOptionalStop::Swap(TaskPlanOptionalStop* other) {
  if (other != this) {
    std::swap(state_, other->state_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TaskPlanOptionalStop::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TaskPlanOptionalStop_descriptor_;
  metadata.reflection = TaskPlanOptionalStop_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TaskPlanOpen::kFilenameFieldNumber;
#endif  // !_MSC_VER

TaskPlanOpen::TaskPlanOpen()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TaskPlanOpen)
}

void TaskPlanOpen::InitAsDefaultInstance() {
}

TaskPlanOpen::TaskPlanOpen(const TaskPlanOpen& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TaskPlanOpen)
}

void TaskPlanOpen::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  filename_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TaskPlanOpen::~TaskPlanOpen() {
  // @@protoc_insertion_point(destructor:pb.TaskPlanOpen)
  SharedDtor();
}

void TaskPlanOpen::SharedDtor() {
  if (filename_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete filename_;
  }
  if (this != default_instance_) {
  }
}

void TaskPlanOpen::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TaskPlanOpen::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TaskPlanOpen_descriptor_;
}

const TaskPlanOpen& TaskPlanOpen::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_task_2eproto();
  return *default_instance_;
}

TaskPlanOpen* TaskPlanOpen::default_instance_ = NULL;

TaskPlanOpen* TaskPlanOpen::New() const {
  return new TaskPlanOpen;
}

void TaskPlanOpen::Clear() {
  if (has_filename()) {
    if (filename_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
      filename_->clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TaskPlanOpen::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TaskPlanOpen)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string filename = 10;
      case 10: {
        if (tag == 82) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_filename()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->filename().data(), this->filename().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "filename");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TaskPlanOpen)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TaskPlanOpen)
  return false;
#undef DO_
}

void TaskPlanOpen::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TaskPlanOpen)
  // required string filename = 10;
  if (has_filename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->filename().data(), this->filename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "filename");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      10, this->filename(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TaskPlanOpen)
}

::google::protobuf::uint8* TaskPlanOpen::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TaskPlanOpen)
  // required string filename = 10;
  if (has_filename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->filename().data(), this->filename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "filename");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->filename(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TaskPlanOpen)
  return target;
}

int TaskPlanOpen::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string filename = 10;
    if (has_filename()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->filename());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TaskPlanOpen::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TaskPlanOpen* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TaskPlanOpen*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TaskPlanOpen::MergeFrom(const TaskPlanOpen& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_filename()) {
      set_filename(from.filename());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TaskPlanOpen::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TaskPlanOpen::CopyFrom(const TaskPlanOpen& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TaskPlanOpen::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void TaskPlanOpen::Swap(TaskPlanOpen* other) {
  if (other != this) {
    std::swap(filename_, other->filename_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TaskPlanOpen::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TaskPlanOpen_descriptor_;
  metadata.reflection = TaskPlanOpen_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TaskPlanReply::kCmdFieldNumber;
const int TaskPlanReply::kErrormsgFieldNumber;
#endif  // !_MSC_VER

TaskPlanReply::TaskPlanReply()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TaskPlanReply)
}

void TaskPlanReply::InitAsDefaultInstance() {
}

TaskPlanReply::TaskPlanReply(const TaskPlanReply& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TaskPlanReply)
}

void TaskPlanReply::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  cmd_ = 2;
  errormsg_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TaskPlanReply::~TaskPlanReply() {
  // @@protoc_insertion_point(destructor:pb.TaskPlanReply)
  SharedDtor();
}

void TaskPlanReply::SharedDtor() {
  if (errormsg_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete errormsg_;
  }
  if (this != default_instance_) {
  }
}

void TaskPlanReply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TaskPlanReply::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TaskPlanReply_descriptor_;
}

const TaskPlanReply& TaskPlanReply::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_task_2eproto();
  return *default_instance_;
}

TaskPlanReply* TaskPlanReply::default_instance_ = NULL;

TaskPlanReply* TaskPlanReply::New() const {
  return new TaskPlanReply;
}

void TaskPlanReply::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    cmd_ = 2;
    if (has_errormsg()) {
      if (errormsg_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        errormsg_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TaskPlanReply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TaskPlanReply)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .pb.ContainerType cmd = 10;
      case 10: {
        if (tag == 80) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::pb::ContainerType_IsValid(value)) {
            set_cmd(static_cast< ::pb::ContainerType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(10, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(162)) goto parse_errormsg;
        break;
      }

      // optional string errormsg = 20;
      case 20: {
        if (tag == 162) {
         parse_errormsg:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_errormsg()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->errormsg().data(), this->errormsg().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "errormsg");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TaskPlanReply)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TaskPlanReply)
  return false;
#undef DO_
}

void TaskPlanReply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TaskPlanReply)
  // required .pb.ContainerType cmd = 10;
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      10, this->cmd(), output);
  }

  // optional string errormsg = 20;
  if (has_errormsg()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->errormsg().data(), this->errormsg().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "errormsg");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      20, this->errormsg(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TaskPlanReply)
}

::google::protobuf::uint8* TaskPlanReply::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TaskPlanReply)
  // required .pb.ContainerType cmd = 10;
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      10, this->cmd(), target);
  }

  // optional string errormsg = 20;
  if (has_errormsg()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->errormsg().data(), this->errormsg().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "errormsg");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        20, this->errormsg(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TaskPlanReply)
  return target;
}

int TaskPlanReply::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .pb.ContainerType cmd = 10;
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional string errormsg = 20;
    if (has_errormsg()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->errormsg());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TaskPlanReply::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TaskPlanReply* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TaskPlanReply*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TaskPlanReply::MergeFrom(const TaskPlanReply& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_errormsg()) {
      set_errormsg(from.errormsg());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TaskPlanReply::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TaskPlanReply::CopyFrom(const TaskPlanReply& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TaskPlanReply::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void TaskPlanReply::Swap(TaskPlanReply* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(errormsg_, other->errormsg_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TaskPlanReply::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TaskPlanReply_descriptor_;
  metadata.reflection = TaskPlanReply_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TaskReply::kTicketFieldNumber;
#endif  // !_MSC_VER

TaskReply::TaskReply()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TaskReply)
}

void TaskReply::InitAsDefaultInstance() {
}

TaskReply::TaskReply(const TaskReply& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TaskReply)
}

void TaskReply::SharedCtor() {
  _cached_size_ = 0;
  ticket_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TaskReply::~TaskReply() {
  // @@protoc_insertion_point(destructor:pb.TaskReply)
  SharedDtor();
}

void TaskReply::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TaskReply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TaskReply::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TaskReply_descriptor_;
}

const TaskReply& TaskReply::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_task_2eproto();
  return *default_instance_;
}

TaskReply* TaskReply::default_instance_ = NULL;

TaskReply* TaskReply::New() const {
  return new TaskReply;
}

void TaskReply::Clear() {
  ticket_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TaskReply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TaskReply)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required fixed32 ticket = 10;
      case 10: {
        if (tag == 85) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &ticket_)));
          set_has_ticket();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TaskReply)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TaskReply)
  return false;
#undef DO_
}

void TaskReply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TaskReply)
  // required fixed32 ticket = 10;
  if (has_ticket()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(10, this->ticket(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TaskReply)
}

::google::protobuf::uint8* TaskReply::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TaskReply)
  // required fixed32 ticket = 10;
  if (has_ticket()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(10, this->ticket(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TaskReply)
  return target;
}

int TaskReply::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required fixed32 ticket = 10;
    if (has_ticket()) {
      total_size += 1 + 4;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TaskReply::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TaskReply* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TaskReply*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TaskReply::MergeFrom(const TaskReply& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ticket()) {
      set_ticket(from.ticket());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TaskReply::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TaskReply::CopyFrom(const TaskReply& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TaskReply::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void TaskReply::Swap(TaskReply* other) {
  if (other != this) {
    std::swap(ticket_, other->ticket_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TaskReply::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TaskReply_descriptor_;
  metadata.reflection = TaskReply_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TicketUpdate::kCticketFieldNumber;
const int TicketUpdate::kStatusFieldNumber;
const int TicketUpdate::kTextFieldNumber;
#endif  // !_MSC_VER

TicketUpdate::TicketUpdate()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TicketUpdate)
}

void TicketUpdate::InitAsDefaultInstance() {
}

TicketUpdate::TicketUpdate(const TicketUpdate& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TicketUpdate)
}

void TicketUpdate::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  cticket_ = 0u;
  status_ = -1;
  text_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TicketUpdate::~TicketUpdate() {
  // @@protoc_insertion_point(destructor:pb.TicketUpdate)
  SharedDtor();
}

void TicketUpdate::SharedDtor() {
  if (text_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete text_;
  }
  if (this != default_instance_) {
  }
}

void TicketUpdate::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TicketUpdate::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TicketUpdate_descriptor_;
}

const TicketUpdate& TicketUpdate::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_task_2eproto();
  return *default_instance_;
}

TicketUpdate* TicketUpdate::default_instance_ = NULL;

TicketUpdate* TicketUpdate::New() const {
  return new TicketUpdate;
}

void TicketUpdate::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    cticket_ = 0u;
    status_ = -1;
    if (has_text()) {
      if (text_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        text_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TicketUpdate::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TicketUpdate)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required fixed32 cticket = 10;
      case 10: {
        if (tag == 85) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &cticket_)));
          set_has_cticket();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(160)) goto parse_status;
        break;
      }

      // required .pb.RCS_STATUS status = 20;
      case 20: {
        if (tag == 160) {
         parse_status:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::pb::RCS_STATUS_IsValid(value)) {
            set_status(static_cast< ::pb::RCS_STATUS >(value));
          } else {
            mutable_unknown_fields()->AddVarint(20, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(242)) goto parse_text;
        break;
      }

      // optional string text = 30;
      case 30: {
        if (tag == 242) {
         parse_text:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_text()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->text().data(), this->text().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "text");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TicketUpdate)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TicketUpdate)
  return false;
#undef DO_
}

void TicketUpdate::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TicketUpdate)
  // required fixed32 cticket = 10;
  if (has_cticket()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(10, this->cticket(), output);
  }

  // required .pb.RCS_STATUS status = 20;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      20, this->status(), output);
  }

  // optional string text = 30;
  if (has_text()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->text().data(), this->text().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "text");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      30, this->text(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TicketUpdate)
}

::google::protobuf::uint8* TicketUpdate::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TicketUpdate)
  // required fixed32 cticket = 10;
  if (has_cticket()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(10, this->cticket(), target);
  }

  // required .pb.RCS_STATUS status = 20;
  if (has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      20, this->status(), target);
  }

  // optional string text = 30;
  if (has_text()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->text().data(), this->text().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "text");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        30, this->text(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TicketUpdate)
  return target;
}

int TicketUpdate::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required fixed32 cticket = 10;
    if (has_cticket()) {
      total_size += 1 + 4;
    }

    // required .pb.RCS_STATUS status = 20;
    if (has_status()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->status());
    }

    // optional string text = 30;
    if (has_text()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->text());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TicketUpdate::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TicketUpdate* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TicketUpdate*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TicketUpdate::MergeFrom(const TicketUpdate& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cticket()) {
      set_cticket(from.cticket());
    }
    if (from.has_status()) {
      set_status(from.status());
    }
    if (from.has_text()) {
      set_text(from.text());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TicketUpdate::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TicketUpdate::CopyFrom(const TicketUpdate& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TicketUpdate::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void TicketUpdate::Swap(TicketUpdate* other) {
  if (other != this) {
    std::swap(cticket_, other->cticket_);
    std::swap(status_, other->status_);
    std::swap(text_, other->text_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TicketUpdate::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TicketUpdate_descriptor_;
  metadata.reflection = TicketUpdate_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace pb

// @@protoc_insertion_point(global_scope)
