/* Automatically generated nanopb header */
/* Generated by nanopb-0.3.3-dev at Wed May 25 22:29:18 2016. */

#ifndef PB_STATUS_NPB_H_INCLUDED
#define PB_STATUS_NPB_H_INCLUDED
#include <pb.h>

#include <machinetalk/generated/types.npb.h>
#include <machinetalk/generated/preview.npb.h>
#include <machinetalk/generated/emcclass.npb.h>
#include <machinetalk/generated/motcmds.npb.h>
#if PB_PROTO_HEADER_VERSION != 30
#error Regenerate this file with the current version of nanopb generator.
#endif

#ifdef __cplusplus
extern "C" {
#endif

/* Enum definitions */
typedef enum _pb_EmcTaskExecStateType {
    pb_EmcTaskExecStateType_EMC_TASK_EXEC_ERROR = 1,
    pb_EmcTaskExecStateType_EMC_TASK_EXEC_DONE = 2,
    pb_EmcTaskExecStateType_EMC_TASK_EXEC_WAITING_FOR_MOTION = 3,
    pb_EmcTaskExecStateType_EMC_TASK_EXEC_WAITING_FOR_MOTION_QUEUE = 4,
    pb_EmcTaskExecStateType_EMC_TASK_EXEC_WAITING_FOR_IO = 5,
    pb_EmcTaskExecStateType_EMC_TASK_EXEC_WAITING_FOR_MOTION_AND_IO = 7,
    pb_EmcTaskExecStateType_EMC_TASK_EXEC_WAITING_FOR_DELAY = 8,
    pb_EmcTaskExecStateType_EMC_TASK_EXEC_WAITING_FOR_SYSTEM_CMD = 9,
    pb_EmcTaskExecStateType_EMC_TASK_EXEC_WAITING_FOR_SPINDLE_ORIENTED = 10
} pb_EmcTaskExecStateType;

typedef enum _pb_EmcInterpStateType {
    pb_EmcInterpStateType_EMC_TASK_INTERP_IDLE = 1,
    pb_EmcInterpStateType_EMC_TASK_INTERP_READING = 2,
    pb_EmcInterpStateType_EMC_TASK_INTERP_PAUSED = 3,
    pb_EmcInterpStateType_EMC_TASK_INTERP_WAITING = 4
} pb_EmcInterpStateType;

typedef enum _pb_EmcInterpExitCodeType {
    pb_EmcInterpExitCodeType_EMC_INTERP_EXIT_OK = 0,
    pb_EmcInterpExitCodeType_EMC_INTERP_EXIT_EXIT = 1,
    pb_EmcInterpExitCodeType_EMC_INTERP_EXIT_EXECUTE_FINISH = 2,
    pb_EmcInterpExitCodeType_EMC_INTERP_EXIT_ENDFILE = 3,
    pb_EmcInterpExitCodeType_EMC_INTERP_EXIT_FILE_NOT_OPEN = 4,
    pb_EmcInterpExitCodeType_EMC_INTERP_EXIT_ERROR = 5
} pb_EmcInterpExitCodeType;

typedef enum _pb_EmcKinematicsType {
    pb_EmcKinematicsType_KINEMATICS_IDENTITY = 1,
    pb_EmcKinematicsType_KINEMATICS_FORWARD_ONLY = 2,
    pb_EmcKinematicsType_KINEMATICS_INVERSE_ONLY = 3,
    pb_EmcKinematicsType_KINEMATICS_BOTH = 4
} pb_EmcKinematicsType;

typedef enum _pb_EmcTrajectoryModeType {
    pb_EmcTrajectoryModeType_EMC_TRAJ_MODE_FREE = 1,
    pb_EmcTrajectoryModeType_EMC_TRAJ_MODE_COORD = 2,
    pb_EmcTrajectoryModeType_EMC_TRAJ_MODE_TELEOP = 3
} pb_EmcTrajectoryModeType;

typedef enum _pb_EmcCanonUnitsType {
    pb_EmcCanonUnitsType_CANON_UNITS_INCHES = 1,
    pb_EmcCanonUnitsType_CANON_UNITS_MM = 2,
    pb_EmcCanonUnitsType_CANON_UNITS_CM = 3
} pb_EmcCanonUnitsType;

typedef enum _pb_EmcTimeUnitsType {
    pb_EmcTimeUnitsType_TIME_UNITS_MINUTE = 1,
    pb_EmcTimeUnitsType_TIME_UNITS_SECOND = 2
} pb_EmcTimeUnitsType;

typedef enum _pb_EmcTaskModeType {
    pb_EmcTaskModeType_EMC_TASK_MODE_MANUAL = 1,
    pb_EmcTaskModeType_EMC_TASK_MODE_AUTO = 2,
    pb_EmcTaskModeType_EMC_TASK_MODE_MDI = 3
} pb_EmcTaskModeType;

typedef enum _pb_EmcTaskStateType {
    pb_EmcTaskStateType_EMC_TASK_STATE_ESTOP = 1,
    pb_EmcTaskStateType_EMC_TASK_STATE_ESTOP_RESET = 2,
    pb_EmcTaskStateType_EMC_TASK_STATE_OFF = 3,
    pb_EmcTaskStateType_EMC_TASK_STATE_ON = 4
} pb_EmcTaskStateType;

typedef enum _pb_EmcAxisType {
    pb_EmcAxisType_EMC_AXIS_LINEAR = 1,
    pb_EmcAxisType_EMC_AXIS_ANGULAR = 2
} pb_EmcAxisType;

typedef enum _pb_EmcPositionOffsetType {
    pb_EmcPositionOffsetType_EMC_CONFIG_RELATIVE_OFFSET = 1,
    pb_EmcPositionOffsetType_EMC_CONFIG_MACHINE_OFFSET = 2
} pb_EmcPositionOffsetType;

typedef enum _pb_EmcPositionFeedbackType {
    pb_EmcPositionFeedbackType_EMC_CONFIG_ACTUAL_FEEDBACK = 1,
    pb_EmcPositionFeedbackType_EMC_CONFIG_COMMANDED_FEEDBACK = 2
} pb_EmcPositionFeedbackType;

/* Struct definitions */
typedef struct _pb_EmcProgramExtension {
    int32_t index;
    pb_callback_t extension;
} pb_EmcProgramExtension;

typedef struct _pb_EmcStatusAnalogIO {
    int32_t index;
    bool has_value;
    double value;
} pb_EmcStatusAnalogIO;

typedef struct _pb_EmcStatusConfig {
    bool has_default_acceleration;
    double default_acceleration;
    bool has_angular_units;
    double angular_units;
    bool has_axes;
    int32_t axes;
    pb_callback_t axis;
    bool has_axis_mask;
    int32_t axis_mask;
    bool has_cycle_time;
    double cycle_time;
    bool has_debug;
    int32_t debug;
    bool has_kinematics_type;
    pb_EmcKinematicsType kinematics_type;
    bool has_linear_units;
    double linear_units;
    bool has_max_acceleration;
    double max_acceleration;
    bool has_max_velocity;
    double max_velocity;
    bool has_program_units;
    pb_EmcCanonUnitsType program_units;
    bool has_default_velocity;
    double default_velocity;
    pb_callback_t program_extension;
    bool has_position_offset;
    pb_EmcPositionOffsetType position_offset;
    bool has_position_feedback;
    pb_EmcPositionFeedbackType position_feedback;
    bool has_max_feed_override;
    double max_feed_override;
    bool has_min_feed_override;
    double min_feed_override;
    bool has_max_spindle_override;
    double max_spindle_override;
    bool has_min_spindle_override;
    double min_spindle_override;
    bool has_default_spindle_speed;
    double default_spindle_speed;
    bool has_default_linear_velocity;
    double default_linear_velocity;
    bool has_min_velocity;
    double min_velocity;
    bool has_max_linear_velocity;
    double max_linear_velocity;
    bool has_min_linear_velocity;
    double min_linear_velocity;
    bool has_default_angular_velocity;
    double default_angular_velocity;
    bool has_max_angular_velocity;
    double max_angular_velocity;
    bool has_min_angular_velocity;
    double min_angular_velocity;
    pb_callback_t increments;
    pb_callback_t grids;
    bool has_lathe;
    bool lathe;
    pb_callback_t geometry;
    bool has_arcdivision;
    uint32_t arcdivision;
    bool has_no_force_homing;
    bool no_force_homing;
    pb_callback_t remote_path;
    bool has_time_units;
    pb_EmcTimeUnitsType time_units;
    pb_callback_t name;
    pb_callback_t user_command;
} pb_EmcStatusConfig;

typedef struct _pb_EmcStatusConfigAxis {
    int32_t index;
    bool has_axisType;
    pb_EmcAxisType axisType;
    bool has_backlash;
    double backlash;
    bool has_max_ferror;
    double max_ferror;
    bool has_max_position_limit;
    double max_position_limit;
    bool has_min_ferror;
    double min_ferror;
    bool has_min_position_limit;
    double min_position_limit;
    bool has_units;
    double units;
    bool has_home_sequence;
    int32_t home_sequence;
    bool has_max_acceleration;
    double max_acceleration;
    bool has_max_velocity;
    double max_velocity;
    pb_callback_t increments;
} pb_EmcStatusConfigAxis;

typedef struct _pb_EmcStatusDigitalIO {
    int32_t index;
    bool has_value;
    bool value;
} pb_EmcStatusDigitalIO;

typedef struct _pb_EmcStatusGCode {
    int32_t index;
    bool has_value;
    int32_t value;
} pb_EmcStatusGCode;

typedef struct _pb_EmcStatusInterp {
    pb_callback_t command;
    pb_callback_t gcodes;
    bool has_interp_state;
    pb_EmcInterpStateType interp_state;
    bool has_interpreter_errcode;
    pb_EmcInterpExitCodeType interpreter_errcode;
    pb_callback_t mcodes;
    pb_callback_t settings;
} pb_EmcStatusInterp;

typedef struct _pb_EmcStatusIo {
    bool has_estop;
    bool estop;
    bool has_flood;
    bool flood;
    bool has_lube;
    bool lube;
    bool has_lube_level;
    bool lube_level;
    bool has_mist;
    bool mist;
    bool has_pocket_prepped;
    bool pocket_prepped;
    bool has_tool_in_spindle;
    bool tool_in_spindle;
    bool has_tool_offset;
    pb_Position tool_offset;
    pb_callback_t tool_table;
} pb_EmcStatusIo;

typedef struct _pb_EmcStatusLimit {
    int32_t index;
    bool has_value;
    int32_t value;
} pb_EmcStatusLimit;

typedef struct _pb_EmcStatusMCode {
    int32_t index;
    bool has_value;
    int32_t value;
} pb_EmcStatusMCode;

typedef struct _pb_EmcStatusMotion {
    bool has_active_queue;
    int32_t active_queue;
    bool has_actual_position;
    pb_Position actual_position;
    bool has_adaptive_feed_enabled;
    bool adaptive_feed_enabled;
    pb_callback_t ain;
    pb_callback_t aout;
    pb_callback_t axis;
    bool has_block_delete;
    bool block_delete;
    bool has_current_line;
    int32_t current_line;
    bool has_current_vel;
    double current_vel;
    bool has_delay_left;
    double delay_left;
    pb_callback_t din;
    bool has_distance_to_go;
    double distance_to_go;
    pb_callback_t dout;
    bool has_dtg;
    pb_Position dtg;
    bool has_enabled;
    bool enabled;
    bool has_feed_hold_enabled;
    bool feed_hold_enabled;
    bool has_feed_override_enabled;
    bool feed_override_enabled;
    bool has_feedrate;
    double feedrate;
    bool has_g5x_index;
    pb_OriginIndex g5x_index;
    bool has_g5x_offset;
    pb_Position g5x_offset;
    bool has_g92_offset;
    pb_Position g92_offset;
    bool has_id;
    int32_t id;
    bool has_inpos;
    bool inpos;
    bool has_joint_actual_position;
    pb_Position joint_actual_position;
    bool has_joint_position;
    pb_Position joint_position;
    pb_callback_t limit;
    bool has_motion_line;
    int32_t motion_line;
    bool has_motion_type;
    pb_MotionType motion_type;
    bool has_motion_mode;
    pb_EmcTrajectoryModeType motion_mode;
    bool has_paused;
    bool paused;
    bool has_position;
    pb_Position position;
    bool has_probe_tripped;
    bool probe_tripped;
    bool has_probe_val;
    int32_t probe_val;
    bool has_probed_position;
    pb_Position probed_position;
    bool has_probing;
    bool probing;
    bool has_queue;
    int32_t queue;
    bool has_queue_full;
    bool queue_full;
    bool has_rotation_xy;
    double rotation_xy;
    bool has_spindle_brake;
    bool spindle_brake;
    bool has_spindle_direction;
    int32_t spindle_direction;
    bool has_spindle_enabled;
    bool spindle_enabled;
    bool has_spindle_increasing;
    int32_t spindle_increasing;
    bool has_spindle_override_enabled;
    bool spindle_override_enabled;
    bool has_spindle_speed;
    double spindle_speed;
    bool has_spindlerate;
    double spindlerate;
    bool has_state;
    pb_RCS_STATUS state;
    bool has_max_velocity;
    double max_velocity;
    bool has_max_acceleration;
    double max_acceleration;
} pb_EmcStatusMotion;

typedef struct _pb_EmcStatusMotionAxis {
    int32_t index;
    bool has_enabled;
    bool enabled;
    bool has_fault;
    bool fault;
    bool has_ferror_current;
    double ferror_current;
    bool has_ferror_highmark;
    double ferror_highmark;
    bool has_homed;
    bool homed;
    bool has_homing;
    bool homing;
    bool has_inpos;
    bool inpos;
    bool has_input;
    double input;
    bool has_max_hard_limit;
    bool max_hard_limit;
    bool has_max_soft_limit;
    bool max_soft_limit;
    bool has_min_hard_limit;
    bool min_hard_limit;
    bool has_min_soft_limit;
    bool min_soft_limit;
    bool has_output;
    double output;
    bool has_override_limits;
    bool override_limits;
    bool has_velocity;
    double velocity;
} pb_EmcStatusMotionAxis;

typedef struct _pb_EmcStatusSetting {
    int32_t index;
    bool has_value;
    double value;
} pb_EmcStatusSetting;

typedef struct _pb_EmcStatusTask {
    bool has_echo_serial_number;
    int32_t echo_serial_number;
    bool has_exec_state;
    pb_EmcTaskExecStateType exec_state;
    pb_callback_t file;
    bool has_input_timeout;
    bool input_timeout;
    bool has_optional_stop;
    bool optional_stop;
    bool has_read_line;
    int32_t read_line;
    bool has_task_mode;
    pb_EmcTaskModeType task_mode;
    bool has_task_paused;
    int32_t task_paused;
    bool has_task_state;
    pb_EmcTaskStateType task_state;
    bool has_total_lines;
    int32_t total_lines;
} pb_EmcStatusTask;

typedef struct _pb_EmcStatusUserCommand {
    int32_t index;
    pb_callback_t command;
} pb_EmcStatusUserCommand;

typedef struct _pb_EmcToolData {
    int32_t index;
    bool has_id;
    int32_t id;
    bool has_xOffset;
    double xOffset;
    bool has_yOffset;
    double yOffset;
    bool has_zOffset;
    double zOffset;
    bool has_aOffset;
    double aOffset;
    bool has_bOffset;
    double bOffset;
    bool has_cOffset;
    double cOffset;
    bool has_uOffset;
    double uOffset;
    bool has_vOffset;
    double vOffset;
    bool has_wOffset;
    double wOffset;
    bool has_diameter;
    double diameter;
    bool has_frontangle;
    double frontangle;
    bool has_backangle;
    double backangle;
    bool has_orientation;
    int32_t orientation;
} pb_EmcToolData;

typedef struct _pb_EmcCommandParameters {
    bool has_index;
    uint32_t index;
    bool has_debug_level;
    uint32_t debug_level;
    bool has_line_number;
    int32_t line_number;
    bool has_scale;
    double scale;
    bool has_velocity;
    double velocity;
    bool has_distance;
    double distance;
    bool has_value;
    double value;
    bool has_enable;
    bool enable;
    pb_callback_t command;
    pb_callback_t path;
    bool has_task_mode;
    pb_EmcTaskModeType task_mode;
    bool has_task_state;
    pb_EmcTaskStateType task_state;
    bool has_traj_mode;
    pb_EmcTrajectoryModeType traj_mode;
    bool has_pose;
    pb_EmcPose pose;
    bool has_tool_data;
    pb_EmcToolData tool_data;
} pb_EmcCommandParameters;

/* Default values for struct fields */

/* Initializer values for message structs */
#define pb_EmcToolData_init_default              {0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0}
#define pb_EmcStatusMotionAxis_init_default      {0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0}
#define pb_EmcStatusConfigAxis_init_default      {0, false, (pb_EmcAxisType)0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, {{NULL}, NULL}}
#define pb_EmcProgramExtension_init_default      {0, {{NULL}, NULL}}
#define pb_EmcStatusAnalogIO_init_default        {0, false, 0}
#define pb_EmcStatusDigitalIO_init_default       {0, false, 0}
#define pb_EmcStatusLimit_init_default           {0, false, 0}
#define pb_EmcStatusGCode_init_default           {0, false, 0}
#define pb_EmcStatusMCode_init_default           {0, false, 0}
#define pb_EmcStatusSetting_init_default         {0, false, 0}
#define pb_EmcStatusConfig_init_default          {false, 0, false, 0, false, 0, {{NULL}, NULL}, false, 0, false, 0, false, 0, false, (pb_EmcKinematicsType)0, false, 0, false, 0, false, 0, false, (pb_EmcCanonUnitsType)0, false, 0, {{NULL}, NULL}, false, (pb_EmcPositionOffsetType)0, false, (pb_EmcPositionFeedbackType)0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, {{NULL}, NULL}, {{NULL}, NULL}, false, 0, {{NULL}, NULL}, false, 0, false, 0, {{NULL}, NULL}, false, (pb_EmcTimeUnitsType)0, {{NULL}, NULL}, {{NULL}, NULL}}
#define pb_EmcStatusMotion_init_default          {false, 0, false, pb_Position_init_default, false, 0, {{NULL}, NULL}, {{NULL}, NULL}, {{NULL}, NULL}, false, 0, false, 0, false, 0, false, 0, {{NULL}, NULL}, false, 0, {{NULL}, NULL}, false, pb_Position_init_default, false, 0, false, 0, false, 0, false, 0, false, (pb_OriginIndex)0, false, pb_Position_init_default, false, pb_Position_init_default, false, 0, false, 0, false, pb_Position_init_default, false, pb_Position_init_default, {{NULL}, NULL}, false, 0, false, (pb_MotionType)0, false, (pb_EmcTrajectoryModeType)0, false, 0, false, pb_Position_init_default, false, 0, false, 0, false, pb_Position_init_default, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, (pb_RCS_STATUS)0, false, 0, false, 0}
#define pb_EmcStatusIo_init_default              {false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, pb_Position_init_default, {{NULL}, NULL}}
#define pb_EmcStatusTask_init_default            {false, 0, false, (pb_EmcTaskExecStateType)0, {{NULL}, NULL}, false, 0, false, 0, false, 0, false, (pb_EmcTaskModeType)0, false, 0, false, (pb_EmcTaskStateType)0, false, 0}
#define pb_EmcStatusInterp_init_default          {{{NULL}, NULL}, {{NULL}, NULL}, false, (pb_EmcInterpStateType)0, false, (pb_EmcInterpExitCodeType)0, {{NULL}, NULL}, {{NULL}, NULL}}
#define pb_EmcCommandParameters_init_default     {false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, {{NULL}, NULL}, {{NULL}, NULL}, false, (pb_EmcTaskModeType)0, false, (pb_EmcTaskStateType)0, false, (pb_EmcTrajectoryModeType)0, false, pb_EmcPose_init_default, false, pb_EmcToolData_init_default}
#define pb_EmcStatusUserCommand_init_default     {0, {{NULL}, NULL}}
#define pb_EmcToolData_init_zero                 {0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0}
#define pb_EmcStatusMotionAxis_init_zero         {0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0}
#define pb_EmcStatusConfigAxis_init_zero         {0, false, (pb_EmcAxisType)0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, {{NULL}, NULL}}
#define pb_EmcProgramExtension_init_zero         {0, {{NULL}, NULL}}
#define pb_EmcStatusAnalogIO_init_zero           {0, false, 0}
#define pb_EmcStatusDigitalIO_init_zero          {0, false, 0}
#define pb_EmcStatusLimit_init_zero              {0, false, 0}
#define pb_EmcStatusGCode_init_zero              {0, false, 0}
#define pb_EmcStatusMCode_init_zero              {0, false, 0}
#define pb_EmcStatusSetting_init_zero            {0, false, 0}
#define pb_EmcStatusConfig_init_zero             {false, 0, false, 0, false, 0, {{NULL}, NULL}, false, 0, false, 0, false, 0, false, (pb_EmcKinematicsType)0, false, 0, false, 0, false, 0, false, (pb_EmcCanonUnitsType)0, false, 0, {{NULL}, NULL}, false, (pb_EmcPositionOffsetType)0, false, (pb_EmcPositionFeedbackType)0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, {{NULL}, NULL}, {{NULL}, NULL}, false, 0, {{NULL}, NULL}, false, 0, false, 0, {{NULL}, NULL}, false, (pb_EmcTimeUnitsType)0, {{NULL}, NULL}, {{NULL}, NULL}}
#define pb_EmcStatusMotion_init_zero             {false, 0, false, pb_Position_init_zero, false, 0, {{NULL}, NULL}, {{NULL}, NULL}, {{NULL}, NULL}, false, 0, false, 0, false, 0, false, 0, {{NULL}, NULL}, false, 0, {{NULL}, NULL}, false, pb_Position_init_zero, false, 0, false, 0, false, 0, false, 0, false, (pb_OriginIndex)0, false, pb_Position_init_zero, false, pb_Position_init_zero, false, 0, false, 0, false, pb_Position_init_zero, false, pb_Position_init_zero, {{NULL}, NULL}, false, 0, false, (pb_MotionType)0, false, (pb_EmcTrajectoryModeType)0, false, 0, false, pb_Position_init_zero, false, 0, false, 0, false, pb_Position_init_zero, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, (pb_RCS_STATUS)0, false, 0, false, 0}
#define pb_EmcStatusIo_init_zero                 {false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, pb_Position_init_zero, {{NULL}, NULL}}
#define pb_EmcStatusTask_init_zero               {false, 0, false, (pb_EmcTaskExecStateType)0, {{NULL}, NULL}, false, 0, false, 0, false, 0, false, (pb_EmcTaskModeType)0, false, 0, false, (pb_EmcTaskStateType)0, false, 0}
#define pb_EmcStatusInterp_init_zero             {{{NULL}, NULL}, {{NULL}, NULL}, false, (pb_EmcInterpStateType)0, false, (pb_EmcInterpExitCodeType)0, {{NULL}, NULL}, {{NULL}, NULL}}
#define pb_EmcCommandParameters_init_zero        {false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, {{NULL}, NULL}, {{NULL}, NULL}, false, (pb_EmcTaskModeType)0, false, (pb_EmcTaskStateType)0, false, (pb_EmcTrajectoryModeType)0, false, pb_EmcPose_init_zero, false, pb_EmcToolData_init_zero}
#define pb_EmcStatusUserCommand_init_zero        {0, {{NULL}, NULL}}

/* Field tags (for use in manual encoding/decoding) */
#define pb_EmcProgramExtension_index_tag         1
#define pb_EmcProgramExtension_extension_tag     2
#define pb_EmcStatusAnalogIO_index_tag           1
#define pb_EmcStatusAnalogIO_value_tag           2
#define pb_EmcStatusConfig_default_acceleration_tag 1
#define pb_EmcStatusConfig_angular_units_tag     2
#define pb_EmcStatusConfig_axes_tag              3
#define pb_EmcStatusConfig_axis_tag              4
#define pb_EmcStatusConfig_axis_mask_tag         5
#define pb_EmcStatusConfig_cycle_time_tag        6
#define pb_EmcStatusConfig_debug_tag             7
#define pb_EmcStatusConfig_kinematics_type_tag   8
#define pb_EmcStatusConfig_linear_units_tag      9
#define pb_EmcStatusConfig_max_acceleration_tag  10
#define pb_EmcStatusConfig_max_velocity_tag      11
#define pb_EmcStatusConfig_program_units_tag     12
#define pb_EmcStatusConfig_default_velocity_tag  13
#define pb_EmcStatusConfig_program_extension_tag 14
#define pb_EmcStatusConfig_position_offset_tag   15
#define pb_EmcStatusConfig_position_feedback_tag 16
#define pb_EmcStatusConfig_max_feed_override_tag 17
#define pb_EmcStatusConfig_min_feed_override_tag 18
#define pb_EmcStatusConfig_max_spindle_override_tag 19
#define pb_EmcStatusConfig_min_spindle_override_tag 20
#define pb_EmcStatusConfig_default_spindle_speed_tag 21
#define pb_EmcStatusConfig_default_linear_velocity_tag 22
#define pb_EmcStatusConfig_min_velocity_tag      23
#define pb_EmcStatusConfig_max_linear_velocity_tag 24
#define pb_EmcStatusConfig_min_linear_velocity_tag 25
#define pb_EmcStatusConfig_default_angular_velocity_tag 26
#define pb_EmcStatusConfig_max_angular_velocity_tag 27
#define pb_EmcStatusConfig_min_angular_velocity_tag 28
#define pb_EmcStatusConfig_increments_tag        29
#define pb_EmcStatusConfig_grids_tag             30
#define pb_EmcStatusConfig_lathe_tag             31
#define pb_EmcStatusConfig_geometry_tag          32
#define pb_EmcStatusConfig_arcdivision_tag       33
#define pb_EmcStatusConfig_no_force_homing_tag   34
#define pb_EmcStatusConfig_remote_path_tag       35
#define pb_EmcStatusConfig_time_units_tag        36
#define pb_EmcStatusConfig_name_tag              37
#define pb_EmcStatusConfig_user_command_tag      38
#define pb_EmcStatusConfigAxis_index_tag         1
#define pb_EmcStatusConfigAxis_axisType_tag      2
#define pb_EmcStatusConfigAxis_backlash_tag      3
#define pb_EmcStatusConfigAxis_max_ferror_tag    4
#define pb_EmcStatusConfigAxis_max_position_limit_tag 5
#define pb_EmcStatusConfigAxis_min_ferror_tag    6
#define pb_EmcStatusConfigAxis_min_position_limit_tag 7
#define pb_EmcStatusConfigAxis_units_tag         8
#define pb_EmcStatusConfigAxis_home_sequence_tag 9
#define pb_EmcStatusConfigAxis_max_acceleration_tag 10
#define pb_EmcStatusConfigAxis_max_velocity_tag  11
#define pb_EmcStatusConfigAxis_increments_tag    12
#define pb_EmcStatusDigitalIO_index_tag          1
#define pb_EmcStatusDigitalIO_value_tag          2
#define pb_EmcStatusGCode_index_tag              1
#define pb_EmcStatusGCode_value_tag              2
#define pb_EmcStatusInterp_command_tag           1
#define pb_EmcStatusInterp_gcodes_tag            2
#define pb_EmcStatusInterp_interp_state_tag      3
#define pb_EmcStatusInterp_interpreter_errcode_tag 4
#define pb_EmcStatusInterp_mcodes_tag            5
#define pb_EmcStatusInterp_settings_tag          6
#define pb_EmcStatusIo_estop_tag                 1
#define pb_EmcStatusIo_flood_tag                 2
#define pb_EmcStatusIo_lube_tag                  3
#define pb_EmcStatusIo_lube_level_tag            4
#define pb_EmcStatusIo_mist_tag                  5
#define pb_EmcStatusIo_pocket_prepped_tag        6
#define pb_EmcStatusIo_tool_in_spindle_tag       7
#define pb_EmcStatusIo_tool_offset_tag           8
#define pb_EmcStatusIo_tool_table_tag            9
#define pb_EmcStatusLimit_index_tag              1
#define pb_EmcStatusLimit_value_tag              2
#define pb_EmcStatusMCode_index_tag              1
#define pb_EmcStatusMCode_value_tag              2
#define pb_EmcStatusMotion_active_queue_tag      1
#define pb_EmcStatusMotion_actual_position_tag   2
#define pb_EmcStatusMotion_adaptive_feed_enabled_tag 3
#define pb_EmcStatusMotion_ain_tag               4
#define pb_EmcStatusMotion_aout_tag              5
#define pb_EmcStatusMotion_axis_tag              6
#define pb_EmcStatusMotion_block_delete_tag      7
#define pb_EmcStatusMotion_current_line_tag      8
#define pb_EmcStatusMotion_current_vel_tag       9
#define pb_EmcStatusMotion_delay_left_tag        10
#define pb_EmcStatusMotion_din_tag               11
#define pb_EmcStatusMotion_distance_to_go_tag    12
#define pb_EmcStatusMotion_dout_tag              13
#define pb_EmcStatusMotion_dtg_tag               14
#define pb_EmcStatusMotion_enabled_tag           15
#define pb_EmcStatusMotion_feed_hold_enabled_tag 16
#define pb_EmcStatusMotion_feed_override_enabled_tag 17
#define pb_EmcStatusMotion_feedrate_tag          18
#define pb_EmcStatusMotion_g5x_index_tag         19
#define pb_EmcStatusMotion_g5x_offset_tag        20
#define pb_EmcStatusMotion_g92_offset_tag        21
#define pb_EmcStatusMotion_id_tag                23
#define pb_EmcStatusMotion_inpos_tag             24
#define pb_EmcStatusMotion_joint_actual_position_tag 25
#define pb_EmcStatusMotion_joint_position_tag    26
#define pb_EmcStatusMotion_limit_tag             27
#define pb_EmcStatusMotion_motion_line_tag       28
#define pb_EmcStatusMotion_motion_type_tag       29
#define pb_EmcStatusMotion_motion_mode_tag       30
#define pb_EmcStatusMotion_paused_tag            31
#define pb_EmcStatusMotion_position_tag          32
#define pb_EmcStatusMotion_probe_tripped_tag     33
#define pb_EmcStatusMotion_probe_val_tag         34
#define pb_EmcStatusMotion_probed_position_tag   35
#define pb_EmcStatusMotion_probing_tag           36
#define pb_EmcStatusMotion_queue_tag             37
#define pb_EmcStatusMotion_queue_full_tag        38
#define pb_EmcStatusMotion_rotation_xy_tag       39
#define pb_EmcStatusMotion_spindle_brake_tag     40
#define pb_EmcStatusMotion_spindle_direction_tag 41
#define pb_EmcStatusMotion_spindle_enabled_tag   42
#define pb_EmcStatusMotion_spindle_increasing_tag 43
#define pb_EmcStatusMotion_spindle_override_enabled_tag 44
#define pb_EmcStatusMotion_spindle_speed_tag     45
#define pb_EmcStatusMotion_spindlerate_tag       46
#define pb_EmcStatusMotion_state_tag             47
#define pb_EmcStatusMotion_max_velocity_tag      48
#define pb_EmcStatusMotion_max_acceleration_tag  49
#define pb_EmcStatusMotionAxis_index_tag         1
#define pb_EmcStatusMotionAxis_enabled_tag       2
#define pb_EmcStatusMotionAxis_fault_tag         3
#define pb_EmcStatusMotionAxis_ferror_current_tag 4
#define pb_EmcStatusMotionAxis_ferror_highmark_tag 5
#define pb_EmcStatusMotionAxis_homed_tag         6
#define pb_EmcStatusMotionAxis_homing_tag        7
#define pb_EmcStatusMotionAxis_inpos_tag         8
#define pb_EmcStatusMotionAxis_input_tag         9
#define pb_EmcStatusMotionAxis_max_hard_limit_tag 10
#define pb_EmcStatusMotionAxis_max_soft_limit_tag 11
#define pb_EmcStatusMotionAxis_min_hard_limit_tag 12
#define pb_EmcStatusMotionAxis_min_soft_limit_tag 13
#define pb_EmcStatusMotionAxis_output_tag        14
#define pb_EmcStatusMotionAxis_override_limits_tag 15
#define pb_EmcStatusMotionAxis_velocity_tag      16
#define pb_EmcStatusSetting_index_tag            1
#define pb_EmcStatusSetting_value_tag            2
#define pb_EmcStatusTask_echo_serial_number_tag  1
#define pb_EmcStatusTask_exec_state_tag          2
#define pb_EmcStatusTask_file_tag                3
#define pb_EmcStatusTask_input_timeout_tag       4
#define pb_EmcStatusTask_optional_stop_tag       5
#define pb_EmcStatusTask_read_line_tag           6
#define pb_EmcStatusTask_task_mode_tag           7
#define pb_EmcStatusTask_task_paused_tag         8
#define pb_EmcStatusTask_task_state_tag          9
#define pb_EmcStatusTask_total_lines_tag         10
#define pb_EmcStatusUserCommand_index_tag        1
#define pb_EmcStatusUserCommand_command_tag      2
#define pb_EmcToolData_index_tag                 1
#define pb_EmcToolData_id_tag                    2
#define pb_EmcToolData_xOffset_tag               3
#define pb_EmcToolData_yOffset_tag               4
#define pb_EmcToolData_zOffset_tag               5
#define pb_EmcToolData_aOffset_tag               6
#define pb_EmcToolData_bOffset_tag               7
#define pb_EmcToolData_cOffset_tag               8
#define pb_EmcToolData_uOffset_tag               9
#define pb_EmcToolData_vOffset_tag               10
#define pb_EmcToolData_wOffset_tag               11
#define pb_EmcToolData_diameter_tag              12
#define pb_EmcToolData_frontangle_tag            13
#define pb_EmcToolData_backangle_tag             14
#define pb_EmcToolData_orientation_tag           15
#define pb_EmcCommandParameters_index_tag        1
#define pb_EmcCommandParameters_debug_level_tag  2
#define pb_EmcCommandParameters_line_number_tag  3
#define pb_EmcCommandParameters_scale_tag        4
#define pb_EmcCommandParameters_velocity_tag     5
#define pb_EmcCommandParameters_distance_tag     6
#define pb_EmcCommandParameters_value_tag        7
#define pb_EmcCommandParameters_enable_tag       8
#define pb_EmcCommandParameters_command_tag      9
#define pb_EmcCommandParameters_path_tag         10
#define pb_EmcCommandParameters_task_mode_tag    100
#define pb_EmcCommandParameters_task_state_tag   101
#define pb_EmcCommandParameters_traj_mode_tag    102
#define pb_EmcCommandParameters_pose_tag         103
#define pb_EmcCommandParameters_tool_data_tag    104

/* Struct field encoding specification for nanopb */
extern const pb_field_t pb_EmcToolData_fields[16];
extern const pb_field_t pb_EmcStatusMotionAxis_fields[17];
extern const pb_field_t pb_EmcStatusConfigAxis_fields[13];
extern const pb_field_t pb_EmcProgramExtension_fields[3];
extern const pb_field_t pb_EmcStatusAnalogIO_fields[3];
extern const pb_field_t pb_EmcStatusDigitalIO_fields[3];
extern const pb_field_t pb_EmcStatusLimit_fields[3];
extern const pb_field_t pb_EmcStatusGCode_fields[3];
extern const pb_field_t pb_EmcStatusMCode_fields[3];
extern const pb_field_t pb_EmcStatusSetting_fields[3];
extern const pb_field_t pb_EmcStatusConfig_fields[39];
extern const pb_field_t pb_EmcStatusMotion_fields[49];
extern const pb_field_t pb_EmcStatusIo_fields[10];
extern const pb_field_t pb_EmcStatusTask_fields[11];
extern const pb_field_t pb_EmcStatusInterp_fields[7];
extern const pb_field_t pb_EmcCommandParameters_fields[16];
extern const pb_field_t pb_EmcStatusUserCommand_fields[3];

/* Maximum encoded size of messages (where known) */
#define pb_EmcToolData_size                      141
#define pb_EmcStatusMotionAxis_size              77
#define pb_EmcStatusAnalogIO_size                20
#define pb_EmcStatusDigitalIO_size               13
#define pb_EmcStatusLimit_size                   22
#define pb_EmcStatusGCode_size                   22
#define pb_EmcStatusMCode_size                   22
#define pb_EmcStatusSetting_size                 20

/* helper macros for message type ids if set with */
/* option (nanopb_msgopt).msgid = <id>; */

#ifdef PB_MSGID
#define PB_MSG_1100 pb_EmcToolData
#define PB_MSG_1101 pb_EmcStatusMotionAxis
#define PB_MSG_1102 pb_EmcStatusConfigAxis
#define PB_MSG_1103 pb_EmcProgramExtension
#define PB_MSG_1104 pb_EmcStatusAnalogIO
#define PB_MSG_1105 pb_EmcStatusDigitalIO
#define PB_MSG_1106 pb_EmcStatusLimit
#define PB_MSG_1107 pb_EmcStatusGCode
#define PB_MSG_1108 pb_EmcStatusMCode
#define PB_MSG_1109 pb_EmcStatusSetting
#define PB_MSG_1110 pb_EmcStatusConfig
#define PB_MSG_1111 pb_EmcStatusMotion
#define PB_MSG_1112 pb_EmcStatusIo
#define PB_MSG_1113 pb_EmcStatusTask
#define PB_MSG_1114 pb_EmcStatusInterp
#define PB_MSG_1115 pb_EmcCommandParameters
#define PB_MSG_1116 pb_EmcStatusUserCommand

#define STATUS_MESSAGES \
	PB_MSG(1100,141,pb_EmcToolData) \
	PB_MSG(1101,77,pb_EmcStatusMotionAxis) \
	PB_MSG(1102,-1,pb_EmcStatusConfigAxis) \
	PB_MSG(1103,-1,pb_EmcProgramExtension) \
	PB_MSG(1104,20,pb_EmcStatusAnalogIO) \
	PB_MSG(1105,13,pb_EmcStatusDigitalIO) \
	PB_MSG(1106,22,pb_EmcStatusLimit) \
	PB_MSG(1107,22,pb_EmcStatusGCode) \
	PB_MSG(1108,22,pb_EmcStatusMCode) \
	PB_MSG(1109,20,pb_EmcStatusSetting) \
	PB_MSG(1110,-1,pb_EmcStatusConfig) \
	PB_MSG(1111,-1,pb_EmcStatusMotion) \
	PB_MSG(1112,-1,pb_EmcStatusIo) \
	PB_MSG(1113,-1,pb_EmcStatusTask) \
	PB_MSG(1114,-1,pb_EmcStatusInterp) \
	PB_MSG(1115,-1,pb_EmcCommandParameters) \
	PB_MSG(1116,-1,pb_EmcStatusUserCommand) \

#endif

#ifdef __cplusplus
} /* extern "C" */
#endif

#endif
