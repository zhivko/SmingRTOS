/* Automatically generated nanopb header */
/* Generated by nanopb-0.3.3-dev at Wed May 25 22:29:14 2016. */

#ifndef PB_RTAPI_MESSAGE_NPB_H_INCLUDED
#define PB_RTAPI_MESSAGE_NPB_H_INCLUDED
#include <pb.h>

#include <machinetalk/generated/value.npb.h>
#if PB_PROTO_HEADER_VERSION != 30
#error Regenerate this file with the current version of nanopb generator.
#endif

#ifdef __cplusplus
extern "C" {
#endif

/* Enum definitions */
/* Struct definitions */
typedef struct _pb_RTAPI_Message {
    int32_t msglevel;
    char format[100];
    pb_size_t arg_count;
    pb_Value arg[10];
} pb_RTAPI_Message;

/* Default values for struct fields */
extern const char pb_RTAPI_Message_format_default[100];

/* Initializer values for message structs */
#define pb_RTAPI_Message_init_default            {0, "*** uninitialized ***", 0, {pb_Value_init_default, pb_Value_init_default, pb_Value_init_default, pb_Value_init_default, pb_Value_init_default, pb_Value_init_default, pb_Value_init_default, pb_Value_init_default, pb_Value_init_default, pb_Value_init_default}}
#define pb_RTAPI_Message_init_zero               {0, "", 0, {pb_Value_init_zero, pb_Value_init_zero, pb_Value_init_zero, pb_Value_init_zero, pb_Value_init_zero, pb_Value_init_zero, pb_Value_init_zero, pb_Value_init_zero, pb_Value_init_zero, pb_Value_init_zero}}

/* Field tags (for use in manual encoding/decoding) */
#define pb_RTAPI_Message_msglevel_tag            10
#define pb_RTAPI_Message_format_tag              20
#define pb_RTAPI_Message_arg_tag                 30

/* Struct field encoding specification for nanopb */
extern const pb_field_t pb_RTAPI_Message_fields[4];

/* Maximum encoded size of messages (where known) */
#define pb_RTAPI_Message_size                    (184 + 10*pb_Value_size)

/* helper macros for message type ids if set with */
/* option (nanopb_msgopt).msgid = <id>; */

#ifdef PB_MSGID
#define PB_MSG_1000 pb_RTAPI_Message

#define RTAPI_MESSAGE_MESSAGES \
	PB_MSG(1000,(184 + 10*pb_Value_size),pb_RTAPI_Message) \

#endif

#ifdef __cplusplus
} /* extern "C" */
#endif

#endif
