// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: preview.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "preview.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace pb {

namespace {

const ::google::protobuf::Descriptor* Position_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Position_reflection_ = NULL;
const ::google::protobuf::Descriptor* Preview_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Preview_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* KinematicsType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* PreviewOpType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* SourceType_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_preview_2eproto() {
  protobuf_AddDesc_preview_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "preview.proto");
  GOOGLE_CHECK(file != NULL);
  Position_descriptor_ = file->message_type(0);
  static const int Position_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Position, x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Position, y_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Position, z_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Position, a_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Position, b_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Position, c_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Position, u_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Position, v_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Position, w_),
  };
  Position_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Position_descriptor_,
      Position::default_instance_,
      Position_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Position, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Position, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Position));
  Preview_descriptor_ = file->message_type(1);
  static const int Preview_offsets_[26] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Preview, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Preview, line_number_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Preview, pos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Preview, first_end_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Preview, second_end_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Preview, first_axis_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Preview, second_axis_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Preview, rotation_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Preview, axis_end_point_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Preview, xy_rotation_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Preview, plane_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Preview, rate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Preview, feed_mode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Preview, time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Preview, text_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Preview, angular_units_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Preview, length_units_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Preview, probetype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Preview, kins_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Preview, axismask_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Preview, g5_index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Preview, pocket_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Preview, stype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Preview, filename_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Preview, cmdstring_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Preview, call_level_),
  };
  Preview_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Preview_descriptor_,
      Preview::default_instance_,
      Preview_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Preview, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Preview, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Preview));
  KinematicsType_descriptor_ = file->enum_type(0);
  PreviewOpType_descriptor_ = file->enum_type(1);
  SourceType_descriptor_ = file->enum_type(2);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_preview_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Position_descriptor_, &Position::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Preview_descriptor_, &Preview::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_preview_2eproto() {
  delete Position::default_instance_;
  delete Position_reflection_;
  delete Preview::default_instance_;
  delete Preview_reflection_;
}

void protobuf_AddDesc_preview_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::protobuf_AddDesc_nanopb_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\rpreview.proto\022\002pb\032\014nanopb.proto\"u\n\010Pos"
    "ition\022\t\n\001x\030\003 \001(\001\022\t\n\001y\030\004 \001(\001\022\t\n\001z\030\005 \001(\001\022\t"
    "\n\001a\030\006 \001(\001\022\t\n\001b\030\007 \001(\001\022\t\n\001c\030\010 \001(\001\022\t\n\001u\030\t \001"
    "(\001\022\t\n\001v\030\n \001(\001\022\t\n\001w\030\013 \001(\001:\006\222\?\003H\240\006\"\265\004\n\007Pre"
    "view\022\037\n\004type\030\001 \002(\0162\021.pb.PreviewOpType\022\023\n"
    "\013line_number\030\002 \001(\005\022\031\n\003pos\030\003 \001(\0132\014.pb.Pos"
    "ition\022\021\n\tfirst_end\030\004 \001(\001\022\022\n\nsecond_end\030\005"
    " \001(\001\022\022\n\nfirst_axis\030\006 \001(\001\022\023\n\013second_axis\030"
    "\007 \001(\001\022\020\n\010rotation\030\010 \001(\005\022\026\n\016axis_end_poin"
    "t\030\t \001(\001\022\023\n\013xy_rotation\030\n \001(\001\022\r\n\005plane\030\013 "
    "\001(\005\022\014\n\004rate\030\014 \001(\001\022\021\n\tfeed_mode\030\r \001(\005\022\014\n\004"
    "time\030\016 \001(\001\022\014\n\004text\030\017 \001(\t\022\025\n\rangular_unit"
    "s\030e \001(\001\022\024\n\014length_units\030f \001(\001\022\021\n\tprobety"
    "pe\030g \001(\005\022*\n\004kins\030h \001(\0162\022.pb.KinematicsTy"
    "pe:\010KT_JOINT\022\020\n\010axismask\030i \001(\005\022\020\n\010g5_ind"
    "ex\030j \001(\005\022\016\n\006pocket\030k \001(\005\022\035\n\005stype\030n \001(\0162"
    "\016.pb.SourceType\022\020\n\010filename\030o \001(\t\022\021\n\tcmd"
    "string\030p \001(\t\022\022\n\ncall_level\030q \001(\005:\006\222\?\003H\241\006"
    "*=\n\016KinematicsType\022\014\n\010KT_JOINT\020\001\022\017\n\013KT_T"
    "RIVKINS\020\002\022\014\n\010KT_DELTA\020\003*\271\003\n\rPreviewOpTyp"
    "e\022\025\n\021PV_STRAIGHT_PROBE\020\001\022\020\n\014PV_RIGID_TAP"
    "\020\002\022\024\n\020PV_STRAIGHT_FEED\020\003\022\017\n\013PV_ARC_FEED\020"
    "\004\022\030\n\024PV_STRAIGHT_TRAVERSE\020\005\022\025\n\021PV_SET_G5"
    "X_OFFSET\020\006\022\025\n\021PV_SET_G92_OFFSET\020\007\022\026\n\022PV_"
    "SET_XY_ROTATION\020\010\022\023\n\017PV_SELECT_PLANE\020\t\022\030"
    "\n\024PV_SET_TRAVERSE_RATE\020\n\022\024\n\020PV_SET_FEED_"
    "RATE\020\013\022\022\n\016PV_CHANGE_TOOL\020\014\022\031\n\025PV_CHANGE_"
    "TOOL_NUMBER\020\r\022\014\n\010PV_DWELL\020\016\022\016\n\nPV_MESSAG"
    "E\020\017\022\016\n\nPV_COMMENT\020\020\022\026\n\022PV_USE_TOOL_OFFSE"
    "T\020\021\022\021\n\rPV_SET_PARAMS\020\022\022\024\n\020PV_SET_FEED_MO"
    "DE\020\023\022\025\n\021PV_SOURCE_CONTEXT\020\024*F\n\nSourceTyp"
    "e\022\017\n\013ST_NGC_FILE\020\001\022\021\n\rST_NGC_STRING\020\002\022\024\n"
    "\020ST_PYTHON_METHOD\020\003", 1299);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "preview.proto", &protobuf_RegisterTypes);
  Position::default_instance_ = new Position();
  Preview::default_instance_ = new Preview();
  Position::default_instance_->InitAsDefaultInstance();
  Preview::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_preview_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_preview_2eproto {
  StaticDescriptorInitializer_preview_2eproto() {
    protobuf_AddDesc_preview_2eproto();
  }
} static_descriptor_initializer_preview_2eproto_;
const ::google::protobuf::EnumDescriptor* KinematicsType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return KinematicsType_descriptor_;
}
bool KinematicsType_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* PreviewOpType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PreviewOpType_descriptor_;
}
bool PreviewOpType_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* SourceType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SourceType_descriptor_;
}
bool SourceType_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
const int Position::kXFieldNumber;
const int Position::kYFieldNumber;
const int Position::kZFieldNumber;
const int Position::kAFieldNumber;
const int Position::kBFieldNumber;
const int Position::kCFieldNumber;
const int Position::kUFieldNumber;
const int Position::kVFieldNumber;
const int Position::kWFieldNumber;
#endif  // !_MSC_VER

Position::Position()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.Position)
}

void Position::InitAsDefaultInstance() {
}

Position::Position(const Position& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.Position)
}

void Position::SharedCtor() {
  _cached_size_ = 0;
  x_ = 0;
  y_ = 0;
  z_ = 0;
  a_ = 0;
  b_ = 0;
  c_ = 0;
  u_ = 0;
  v_ = 0;
  w_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Position::~Position() {
  // @@protoc_insertion_point(destructor:pb.Position)
  SharedDtor();
}

void Position::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Position::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Position::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Position_descriptor_;
}

const Position& Position::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_preview_2eproto();
  return *default_instance_;
}

Position* Position::default_instance_ = NULL;

Position* Position::New() const {
  return new Position;
}

void Position::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<Position*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(x_, v_);
  }
  w_ = 0;

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Position::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.Position)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional double x = 3;
      case 3: {
        if (tag == 25) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &x_)));
          set_has_x();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(33)) goto parse_y;
        break;
      }

      // optional double y = 4;
      case 4: {
        if (tag == 33) {
         parse_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &y_)));
          set_has_y();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(41)) goto parse_z;
        break;
      }

      // optional double z = 5;
      case 5: {
        if (tag == 41) {
         parse_z:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &z_)));
          set_has_z();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(49)) goto parse_a;
        break;
      }

      // optional double a = 6;
      case 6: {
        if (tag == 49) {
         parse_a:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &a_)));
          set_has_a();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(57)) goto parse_b;
        break;
      }

      // optional double b = 7;
      case 7: {
        if (tag == 57) {
         parse_b:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &b_)));
          set_has_b();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(65)) goto parse_c;
        break;
      }

      // optional double c = 8;
      case 8: {
        if (tag == 65) {
         parse_c:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &c_)));
          set_has_c();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(73)) goto parse_u;
        break;
      }

      // optional double u = 9;
      case 9: {
        if (tag == 73) {
         parse_u:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &u_)));
          set_has_u();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(81)) goto parse_v;
        break;
      }

      // optional double v = 10;
      case 10: {
        if (tag == 81) {
         parse_v:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &v_)));
          set_has_v();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(89)) goto parse_w;
        break;
      }

      // optional double w = 11;
      case 11: {
        if (tag == 89) {
         parse_w:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &w_)));
          set_has_w();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.Position)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.Position)
  return false;
#undef DO_
}

void Position::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.Position)
  // optional double x = 3;
  if (has_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->x(), output);
  }

  // optional double y = 4;
  if (has_y()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->y(), output);
  }

  // optional double z = 5;
  if (has_z()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->z(), output);
  }

  // optional double a = 6;
  if (has_a()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(6, this->a(), output);
  }

  // optional double b = 7;
  if (has_b()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(7, this->b(), output);
  }

  // optional double c = 8;
  if (has_c()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(8, this->c(), output);
  }

  // optional double u = 9;
  if (has_u()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(9, this->u(), output);
  }

  // optional double v = 10;
  if (has_v()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(10, this->v(), output);
  }

  // optional double w = 11;
  if (has_w()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(11, this->w(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.Position)
}

::google::protobuf::uint8* Position::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.Position)
  // optional double x = 3;
  if (has_x()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->x(), target);
  }

  // optional double y = 4;
  if (has_y()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->y(), target);
  }

  // optional double z = 5;
  if (has_z()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->z(), target);
  }

  // optional double a = 6;
  if (has_a()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(6, this->a(), target);
  }

  // optional double b = 7;
  if (has_b()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(7, this->b(), target);
  }

  // optional double c = 8;
  if (has_c()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(8, this->c(), target);
  }

  // optional double u = 9;
  if (has_u()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(9, this->u(), target);
  }

  // optional double v = 10;
  if (has_v()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(10, this->v(), target);
  }

  // optional double w = 11;
  if (has_w()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(11, this->w(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.Position)
  return target;
}

int Position::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional double x = 3;
    if (has_x()) {
      total_size += 1 + 8;
    }

    // optional double y = 4;
    if (has_y()) {
      total_size += 1 + 8;
    }

    // optional double z = 5;
    if (has_z()) {
      total_size += 1 + 8;
    }

    // optional double a = 6;
    if (has_a()) {
      total_size += 1 + 8;
    }

    // optional double b = 7;
    if (has_b()) {
      total_size += 1 + 8;
    }

    // optional double c = 8;
    if (has_c()) {
      total_size += 1 + 8;
    }

    // optional double u = 9;
    if (has_u()) {
      total_size += 1 + 8;
    }

    // optional double v = 10;
    if (has_v()) {
      total_size += 1 + 8;
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional double w = 11;
    if (has_w()) {
      total_size += 1 + 8;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Position::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Position* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Position*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Position::MergeFrom(const Position& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_x()) {
      set_x(from.x());
    }
    if (from.has_y()) {
      set_y(from.y());
    }
    if (from.has_z()) {
      set_z(from.z());
    }
    if (from.has_a()) {
      set_a(from.a());
    }
    if (from.has_b()) {
      set_b(from.b());
    }
    if (from.has_c()) {
      set_c(from.c());
    }
    if (from.has_u()) {
      set_u(from.u());
    }
    if (from.has_v()) {
      set_v(from.v());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_w()) {
      set_w(from.w());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Position::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Position::CopyFrom(const Position& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Position::IsInitialized() const {

  return true;
}

void Position::Swap(Position* other) {
  if (other != this) {
    std::swap(x_, other->x_);
    std::swap(y_, other->y_);
    std::swap(z_, other->z_);
    std::swap(a_, other->a_);
    std::swap(b_, other->b_);
    std::swap(c_, other->c_);
    std::swap(u_, other->u_);
    std::swap(v_, other->v_);
    std::swap(w_, other->w_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Position::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Position_descriptor_;
  metadata.reflection = Position_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Preview::kTypeFieldNumber;
const int Preview::kLineNumberFieldNumber;
const int Preview::kPosFieldNumber;
const int Preview::kFirstEndFieldNumber;
const int Preview::kSecondEndFieldNumber;
const int Preview::kFirstAxisFieldNumber;
const int Preview::kSecondAxisFieldNumber;
const int Preview::kRotationFieldNumber;
const int Preview::kAxisEndPointFieldNumber;
const int Preview::kXyRotationFieldNumber;
const int Preview::kPlaneFieldNumber;
const int Preview::kRateFieldNumber;
const int Preview::kFeedModeFieldNumber;
const int Preview::kTimeFieldNumber;
const int Preview::kTextFieldNumber;
const int Preview::kAngularUnitsFieldNumber;
const int Preview::kLengthUnitsFieldNumber;
const int Preview::kProbetypeFieldNumber;
const int Preview::kKinsFieldNumber;
const int Preview::kAxismaskFieldNumber;
const int Preview::kG5IndexFieldNumber;
const int Preview::kPocketFieldNumber;
const int Preview::kStypeFieldNumber;
const int Preview::kFilenameFieldNumber;
const int Preview::kCmdstringFieldNumber;
const int Preview::kCallLevelFieldNumber;
#endif  // !_MSC_VER

Preview::Preview()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.Preview)
}

void Preview::InitAsDefaultInstance() {
  pos_ = const_cast< ::pb::Position*>(&::pb::Position::default_instance());
}

Preview::Preview(const Preview& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.Preview)
}

void Preview::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  type_ = 1;
  line_number_ = 0;
  pos_ = NULL;
  first_end_ = 0;
  second_end_ = 0;
  first_axis_ = 0;
  second_axis_ = 0;
  rotation_ = 0;
  axis_end_point_ = 0;
  xy_rotation_ = 0;
  plane_ = 0;
  rate_ = 0;
  feed_mode_ = 0;
  time_ = 0;
  text_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  angular_units_ = 0;
  length_units_ = 0;
  probetype_ = 0;
  kins_ = 1;
  axismask_ = 0;
  g5_index_ = 0;
  pocket_ = 0;
  stype_ = 1;
  filename_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  cmdstring_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  call_level_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Preview::~Preview() {
  // @@protoc_insertion_point(destructor:pb.Preview)
  SharedDtor();
}

void Preview::SharedDtor() {
  if (text_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete text_;
  }
  if (filename_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete filename_;
  }
  if (cmdstring_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete cmdstring_;
  }
  if (this != default_instance_) {
    delete pos_;
  }
}

void Preview::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Preview::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Preview_descriptor_;
}

const Preview& Preview::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_preview_2eproto();
  return *default_instance_;
}

Preview* Preview::default_instance_ = NULL;

Preview* Preview::New() const {
  return new Preview;
}

void Preview::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<Preview*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(first_end_, second_axis_);
    type_ = 1;
    line_number_ = 0;
    if (has_pos()) {
      if (pos_ != NULL) pos_->::pb::Position::Clear();
    }
    rotation_ = 0;
  }
  if (_has_bits_[8 / 32] & 65280) {
    ZR_(plane_, time_);
    axis_end_point_ = 0;
    feed_mode_ = 0;
    if (has_text()) {
      if (text_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        text_->clear();
      }
    }
    angular_units_ = 0;
  }
  if (_has_bits_[16 / 32] & 16711680) {
    ZR_(axismask_, pocket_);
    length_units_ = 0;
    probetype_ = 0;
    kins_ = 1;
    stype_ = 1;
    if (has_filename()) {
      if (filename_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        filename_->clear();
      }
    }
  }
  if (_has_bits_[24 / 32] & 50331648) {
    if (has_cmdstring()) {
      if (cmdstring_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        cmdstring_->clear();
      }
    }
    call_level_ = 0;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Preview::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.Preview)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .pb.PreviewOpType type = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::pb::PreviewOpType_IsValid(value)) {
            set_type(static_cast< ::pb::PreviewOpType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_line_number;
        break;
      }

      // optional int32 line_number = 2;
      case 2: {
        if (tag == 16) {
         parse_line_number:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &line_number_)));
          set_has_line_number();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_pos;
        break;
      }

      // optional .pb.Position pos = 3;
      case 3: {
        if (tag == 26) {
         parse_pos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_pos()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(33)) goto parse_first_end;
        break;
      }

      // optional double first_end = 4;
      case 4: {
        if (tag == 33) {
         parse_first_end:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &first_end_)));
          set_has_first_end();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(41)) goto parse_second_end;
        break;
      }

      // optional double second_end = 5;
      case 5: {
        if (tag == 41) {
         parse_second_end:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &second_end_)));
          set_has_second_end();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(49)) goto parse_first_axis;
        break;
      }

      // optional double first_axis = 6;
      case 6: {
        if (tag == 49) {
         parse_first_axis:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &first_axis_)));
          set_has_first_axis();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(57)) goto parse_second_axis;
        break;
      }

      // optional double second_axis = 7;
      case 7: {
        if (tag == 57) {
         parse_second_axis:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &second_axis_)));
          set_has_second_axis();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_rotation;
        break;
      }

      // optional int32 rotation = 8;
      case 8: {
        if (tag == 64) {
         parse_rotation:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &rotation_)));
          set_has_rotation();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(73)) goto parse_axis_end_point;
        break;
      }

      // optional double axis_end_point = 9;
      case 9: {
        if (tag == 73) {
         parse_axis_end_point:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &axis_end_point_)));
          set_has_axis_end_point();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(81)) goto parse_xy_rotation;
        break;
      }

      // optional double xy_rotation = 10;
      case 10: {
        if (tag == 81) {
         parse_xy_rotation:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &xy_rotation_)));
          set_has_xy_rotation();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(88)) goto parse_plane;
        break;
      }

      // optional int32 plane = 11;
      case 11: {
        if (tag == 88) {
         parse_plane:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &plane_)));
          set_has_plane();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(97)) goto parse_rate;
        break;
      }

      // optional double rate = 12;
      case 12: {
        if (tag == 97) {
         parse_rate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &rate_)));
          set_has_rate();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(104)) goto parse_feed_mode;
        break;
      }

      // optional int32 feed_mode = 13;
      case 13: {
        if (tag == 104) {
         parse_feed_mode:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &feed_mode_)));
          set_has_feed_mode();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(113)) goto parse_time;
        break;
      }

      // optional double time = 14;
      case 14: {
        if (tag == 113) {
         parse_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &time_)));
          set_has_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(122)) goto parse_text;
        break;
      }

      // optional string text = 15;
      case 15: {
        if (tag == 122) {
         parse_text:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_text()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->text().data(), this->text().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "text");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(809)) goto parse_angular_units;
        break;
      }

      // optional double angular_units = 101;
      case 101: {
        if (tag == 809) {
         parse_angular_units:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &angular_units_)));
          set_has_angular_units();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(817)) goto parse_length_units;
        break;
      }

      // optional double length_units = 102;
      case 102: {
        if (tag == 817) {
         parse_length_units:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &length_units_)));
          set_has_length_units();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(824)) goto parse_probetype;
        break;
      }

      // optional int32 probetype = 103;
      case 103: {
        if (tag == 824) {
         parse_probetype:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &probetype_)));
          set_has_probetype();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(832)) goto parse_kins;
        break;
      }

      // optional .pb.KinematicsType kins = 104 [default = KT_JOINT];
      case 104: {
        if (tag == 832) {
         parse_kins:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::pb::KinematicsType_IsValid(value)) {
            set_kins(static_cast< ::pb::KinematicsType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(104, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(840)) goto parse_axismask;
        break;
      }

      // optional int32 axismask = 105;
      case 105: {
        if (tag == 840) {
         parse_axismask:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &axismask_)));
          set_has_axismask();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(848)) goto parse_g5_index;
        break;
      }

      // optional int32 g5_index = 106;
      case 106: {
        if (tag == 848) {
         parse_g5_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &g5_index_)));
          set_has_g5_index();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(856)) goto parse_pocket;
        break;
      }

      // optional int32 pocket = 107;
      case 107: {
        if (tag == 856) {
         parse_pocket:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &pocket_)));
          set_has_pocket();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(880)) goto parse_stype;
        break;
      }

      // optional .pb.SourceType stype = 110;
      case 110: {
        if (tag == 880) {
         parse_stype:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::pb::SourceType_IsValid(value)) {
            set_stype(static_cast< ::pb::SourceType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(110, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(890)) goto parse_filename;
        break;
      }

      // optional string filename = 111;
      case 111: {
        if (tag == 890) {
         parse_filename:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_filename()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->filename().data(), this->filename().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "filename");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(898)) goto parse_cmdstring;
        break;
      }

      // optional string cmdstring = 112;
      case 112: {
        if (tag == 898) {
         parse_cmdstring:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_cmdstring()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->cmdstring().data(), this->cmdstring().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "cmdstring");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(904)) goto parse_call_level;
        break;
      }

      // optional int32 call_level = 113;
      case 113: {
        if (tag == 904) {
         parse_call_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &call_level_)));
          set_has_call_level();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.Preview)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.Preview)
  return false;
#undef DO_
}

void Preview::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.Preview)
  // required .pb.PreviewOpType type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // optional int32 line_number = 2;
  if (has_line_number()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->line_number(), output);
  }

  // optional .pb.Position pos = 3;
  if (has_pos()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->pos(), output);
  }

  // optional double first_end = 4;
  if (has_first_end()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->first_end(), output);
  }

  // optional double second_end = 5;
  if (has_second_end()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->second_end(), output);
  }

  // optional double first_axis = 6;
  if (has_first_axis()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(6, this->first_axis(), output);
  }

  // optional double second_axis = 7;
  if (has_second_axis()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(7, this->second_axis(), output);
  }

  // optional int32 rotation = 8;
  if (has_rotation()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->rotation(), output);
  }

  // optional double axis_end_point = 9;
  if (has_axis_end_point()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(9, this->axis_end_point(), output);
  }

  // optional double xy_rotation = 10;
  if (has_xy_rotation()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(10, this->xy_rotation(), output);
  }

  // optional int32 plane = 11;
  if (has_plane()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->plane(), output);
  }

  // optional double rate = 12;
  if (has_rate()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(12, this->rate(), output);
  }

  // optional int32 feed_mode = 13;
  if (has_feed_mode()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(13, this->feed_mode(), output);
  }

  // optional double time = 14;
  if (has_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(14, this->time(), output);
  }

  // optional string text = 15;
  if (has_text()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->text().data(), this->text().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "text");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      15, this->text(), output);
  }

  // optional double angular_units = 101;
  if (has_angular_units()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(101, this->angular_units(), output);
  }

  // optional double length_units = 102;
  if (has_length_units()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(102, this->length_units(), output);
  }

  // optional int32 probetype = 103;
  if (has_probetype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(103, this->probetype(), output);
  }

  // optional .pb.KinematicsType kins = 104 [default = KT_JOINT];
  if (has_kins()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      104, this->kins(), output);
  }

  // optional int32 axismask = 105;
  if (has_axismask()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(105, this->axismask(), output);
  }

  // optional int32 g5_index = 106;
  if (has_g5_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(106, this->g5_index(), output);
  }

  // optional int32 pocket = 107;
  if (has_pocket()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(107, this->pocket(), output);
  }

  // optional .pb.SourceType stype = 110;
  if (has_stype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      110, this->stype(), output);
  }

  // optional string filename = 111;
  if (has_filename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->filename().data(), this->filename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "filename");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      111, this->filename(), output);
  }

  // optional string cmdstring = 112;
  if (has_cmdstring()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->cmdstring().data(), this->cmdstring().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "cmdstring");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      112, this->cmdstring(), output);
  }

  // optional int32 call_level = 113;
  if (has_call_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(113, this->call_level(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.Preview)
}

::google::protobuf::uint8* Preview::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.Preview)
  // required .pb.PreviewOpType type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // optional int32 line_number = 2;
  if (has_line_number()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->line_number(), target);
  }

  // optional .pb.Position pos = 3;
  if (has_pos()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->pos(), target);
  }

  // optional double first_end = 4;
  if (has_first_end()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->first_end(), target);
  }

  // optional double second_end = 5;
  if (has_second_end()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->second_end(), target);
  }

  // optional double first_axis = 6;
  if (has_first_axis()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(6, this->first_axis(), target);
  }

  // optional double second_axis = 7;
  if (has_second_axis()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(7, this->second_axis(), target);
  }

  // optional int32 rotation = 8;
  if (has_rotation()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->rotation(), target);
  }

  // optional double axis_end_point = 9;
  if (has_axis_end_point()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(9, this->axis_end_point(), target);
  }

  // optional double xy_rotation = 10;
  if (has_xy_rotation()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(10, this->xy_rotation(), target);
  }

  // optional int32 plane = 11;
  if (has_plane()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->plane(), target);
  }

  // optional double rate = 12;
  if (has_rate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(12, this->rate(), target);
  }

  // optional int32 feed_mode = 13;
  if (has_feed_mode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(13, this->feed_mode(), target);
  }

  // optional double time = 14;
  if (has_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(14, this->time(), target);
  }

  // optional string text = 15;
  if (has_text()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->text().data(), this->text().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "text");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        15, this->text(), target);
  }

  // optional double angular_units = 101;
  if (has_angular_units()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(101, this->angular_units(), target);
  }

  // optional double length_units = 102;
  if (has_length_units()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(102, this->length_units(), target);
  }

  // optional int32 probetype = 103;
  if (has_probetype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(103, this->probetype(), target);
  }

  // optional .pb.KinematicsType kins = 104 [default = KT_JOINT];
  if (has_kins()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      104, this->kins(), target);
  }

  // optional int32 axismask = 105;
  if (has_axismask()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(105, this->axismask(), target);
  }

  // optional int32 g5_index = 106;
  if (has_g5_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(106, this->g5_index(), target);
  }

  // optional int32 pocket = 107;
  if (has_pocket()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(107, this->pocket(), target);
  }

  // optional .pb.SourceType stype = 110;
  if (has_stype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      110, this->stype(), target);
  }

  // optional string filename = 111;
  if (has_filename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->filename().data(), this->filename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "filename");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        111, this->filename(), target);
  }

  // optional string cmdstring = 112;
  if (has_cmdstring()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->cmdstring().data(), this->cmdstring().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "cmdstring");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        112, this->cmdstring(), target);
  }

  // optional int32 call_level = 113;
  if (has_call_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(113, this->call_level(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.Preview)
  return target;
}

int Preview::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .pb.PreviewOpType type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // optional int32 line_number = 2;
    if (has_line_number()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->line_number());
    }

    // optional .pb.Position pos = 3;
    if (has_pos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->pos());
    }

    // optional double first_end = 4;
    if (has_first_end()) {
      total_size += 1 + 8;
    }

    // optional double second_end = 5;
    if (has_second_end()) {
      total_size += 1 + 8;
    }

    // optional double first_axis = 6;
    if (has_first_axis()) {
      total_size += 1 + 8;
    }

    // optional double second_axis = 7;
    if (has_second_axis()) {
      total_size += 1 + 8;
    }

    // optional int32 rotation = 8;
    if (has_rotation()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->rotation());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional double axis_end_point = 9;
    if (has_axis_end_point()) {
      total_size += 1 + 8;
    }

    // optional double xy_rotation = 10;
    if (has_xy_rotation()) {
      total_size += 1 + 8;
    }

    // optional int32 plane = 11;
    if (has_plane()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->plane());
    }

    // optional double rate = 12;
    if (has_rate()) {
      total_size += 1 + 8;
    }

    // optional int32 feed_mode = 13;
    if (has_feed_mode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->feed_mode());
    }

    // optional double time = 14;
    if (has_time()) {
      total_size += 1 + 8;
    }

    // optional string text = 15;
    if (has_text()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->text());
    }

    // optional double angular_units = 101;
    if (has_angular_units()) {
      total_size += 2 + 8;
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional double length_units = 102;
    if (has_length_units()) {
      total_size += 2 + 8;
    }

    // optional int32 probetype = 103;
    if (has_probetype()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->probetype());
    }

    // optional .pb.KinematicsType kins = 104 [default = KT_JOINT];
    if (has_kins()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->kins());
    }

    // optional int32 axismask = 105;
    if (has_axismask()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->axismask());
    }

    // optional int32 g5_index = 106;
    if (has_g5_index()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->g5_index());
    }

    // optional int32 pocket = 107;
    if (has_pocket()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->pocket());
    }

    // optional .pb.SourceType stype = 110;
    if (has_stype()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->stype());
    }

    // optional string filename = 111;
    if (has_filename()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->filename());
    }

  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    // optional string cmdstring = 112;
    if (has_cmdstring()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->cmdstring());
    }

    // optional int32 call_level = 113;
    if (has_call_level()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->call_level());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Preview::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Preview* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Preview*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Preview::MergeFrom(const Preview& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_line_number()) {
      set_line_number(from.line_number());
    }
    if (from.has_pos()) {
      mutable_pos()->::pb::Position::MergeFrom(from.pos());
    }
    if (from.has_first_end()) {
      set_first_end(from.first_end());
    }
    if (from.has_second_end()) {
      set_second_end(from.second_end());
    }
    if (from.has_first_axis()) {
      set_first_axis(from.first_axis());
    }
    if (from.has_second_axis()) {
      set_second_axis(from.second_axis());
    }
    if (from.has_rotation()) {
      set_rotation(from.rotation());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_axis_end_point()) {
      set_axis_end_point(from.axis_end_point());
    }
    if (from.has_xy_rotation()) {
      set_xy_rotation(from.xy_rotation());
    }
    if (from.has_plane()) {
      set_plane(from.plane());
    }
    if (from.has_rate()) {
      set_rate(from.rate());
    }
    if (from.has_feed_mode()) {
      set_feed_mode(from.feed_mode());
    }
    if (from.has_time()) {
      set_time(from.time());
    }
    if (from.has_text()) {
      set_text(from.text());
    }
    if (from.has_angular_units()) {
      set_angular_units(from.angular_units());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_length_units()) {
      set_length_units(from.length_units());
    }
    if (from.has_probetype()) {
      set_probetype(from.probetype());
    }
    if (from.has_kins()) {
      set_kins(from.kins());
    }
    if (from.has_axismask()) {
      set_axismask(from.axismask());
    }
    if (from.has_g5_index()) {
      set_g5_index(from.g5_index());
    }
    if (from.has_pocket()) {
      set_pocket(from.pocket());
    }
    if (from.has_stype()) {
      set_stype(from.stype());
    }
    if (from.has_filename()) {
      set_filename(from.filename());
    }
  }
  if (from._has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    if (from.has_cmdstring()) {
      set_cmdstring(from.cmdstring());
    }
    if (from.has_call_level()) {
      set_call_level(from.call_level());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Preview::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Preview::CopyFrom(const Preview& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Preview::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void Preview::Swap(Preview* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(line_number_, other->line_number_);
    std::swap(pos_, other->pos_);
    std::swap(first_end_, other->first_end_);
    std::swap(second_end_, other->second_end_);
    std::swap(first_axis_, other->first_axis_);
    std::swap(second_axis_, other->second_axis_);
    std::swap(rotation_, other->rotation_);
    std::swap(axis_end_point_, other->axis_end_point_);
    std::swap(xy_rotation_, other->xy_rotation_);
    std::swap(plane_, other->plane_);
    std::swap(rate_, other->rate_);
    std::swap(feed_mode_, other->feed_mode_);
    std::swap(time_, other->time_);
    std::swap(text_, other->text_);
    std::swap(angular_units_, other->angular_units_);
    std::swap(length_units_, other->length_units_);
    std::swap(probetype_, other->probetype_);
    std::swap(kins_, other->kins_);
    std::swap(axismask_, other->axismask_);
    std::swap(g5_index_, other->g5_index_);
    std::swap(pocket_, other->pocket_);
    std::swap(stype_, other->stype_);
    std::swap(filename_, other->filename_);
    std::swap(cmdstring_, other->cmdstring_);
    std::swap(call_level_, other->call_level_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Preview::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Preview_descriptor_;
  metadata.reflection = Preview_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace pb

// @@protoc_insertion_point(global_scope)
