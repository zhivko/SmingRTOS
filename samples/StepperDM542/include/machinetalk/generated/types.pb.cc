// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: types.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "types.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace pb {

namespace {

const ::google::protobuf::EnumDescriptor* ValueType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* HalPinDirection_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* HalParamDirection_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* ObjectType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* RCS_STATUS_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* MsgOrigin_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* MsgLevel_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* OriginDetail_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* OriginType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* Severity_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* StatusType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* ReplyType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* ServiceType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* ServiceAPI_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* ContainerType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* OriginIndex_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* TermConditionType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* CanonDirection_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* InputType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* WaitType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* InterpreterStateType_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_types_2eproto() {
  protobuf_AddDesc_types_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "types.proto");
  GOOGLE_CHECK(file != NULL);
  ValueType_descriptor_ = file->enum_type(0);
  HalPinDirection_descriptor_ = file->enum_type(1);
  HalParamDirection_descriptor_ = file->enum_type(2);
  ObjectType_descriptor_ = file->enum_type(3);
  RCS_STATUS_descriptor_ = file->enum_type(4);
  MsgOrigin_descriptor_ = file->enum_type(5);
  MsgLevel_descriptor_ = file->enum_type(6);
  OriginDetail_descriptor_ = file->enum_type(7);
  OriginType_descriptor_ = file->enum_type(8);
  Severity_descriptor_ = file->enum_type(9);
  StatusType_descriptor_ = file->enum_type(10);
  ReplyType_descriptor_ = file->enum_type(11);
  ServiceType_descriptor_ = file->enum_type(12);
  ServiceAPI_descriptor_ = file->enum_type(13);
  ContainerType_descriptor_ = file->enum_type(14);
  OriginIndex_descriptor_ = file->enum_type(15);
  TermConditionType_descriptor_ = file->enum_type(16);
  CanonDirection_descriptor_ = file->enum_type(17);
  InputType_descriptor_ = file->enum_type(18);
  WaitType_descriptor_ = file->enum_type(19);
  InterpreterStateType_descriptor_ = file->enum_type(20);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_types_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
}

}  // namespace

void protobuf_ShutdownFile_types_2eproto() {
}

void protobuf_AddDesc_types_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::protobuf_AddDesc_nanopb_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\013types.proto\022\002pb\032\014nanopb.proto*\335\001\n\tValu"
    "eType\022\013\n\007HAL_BIT\020\001\022\r\n\tHAL_FLOAT\020\002\022\013\n\007HAL"
    "_S32\020\003\022\013\n\007HAL_U32\020\004\022\n\n\006STRING\020\005\022\t\n\005BYTES"
    "\020\006\022\t\n\005INT32\020\024\022\n\n\006UINT32\020\036\022\t\n\005INT64\020(\022\n\n\006"
    "UINT64\0202\022\n\n\006DOUBLE\020<\022\010\n\004BOOL\020P\022\r\n\tCARTES"
    "IAN\020d\022\024\n\020LEGACY_CARTESIAN\020n\022\010\n\004POSE\020x\022\020\n"
    "\013LEGACY_POSE\020\202\001*6\n\017HalPinDirection\022\n\n\006HA"
    "L_IN\020\020\022\013\n\007HAL_OUT\020 \022\n\n\006HAL_IO\0200*,\n\021HalPa"
    "ramDirection\022\n\n\006HAL_RO\020@\022\013\n\006HAL_RW\020\300\001*\261\003"
    "\n\nObjectType\022\013\n\007HAL_PIN\020\001\022\016\n\nHAL_SIGNAL\020"
    "\002\022\r\n\tHAL_PARAM\020\003\022\016\n\nHAL_THREAD\020\004\022\r\n\tHAL_"
    "FUNCT\020\005\022\r\n\tHAL_ALIAS\020\006\022\017\n\013HAL_COMP_RT\020\007\022"
    "\021\n\rHAL_COMP_USER\020\010\022\023\n\017HAL_COMP_REMOTE\020\t\022"
    "\014\n\010HAL_RING\020\n\022\r\n\tHAL_GROUP\020\013\022\025\n\021HAL_MEMB"
    "ER_SIGNAL\020\014\022\024\n\020HAL_MEMBER_GROUP\020\r\022\022\n\016HAL"
    "_MEMBER_PIN\020\016\022\024\n\020HAL_MEMBER_PARAM\020\017\022\017\n\013R"
    "ING_RECORD\020\020\022\017\n\013RING_STREAM\020\021\022\016\n\nHAL_VTA"
    "BLE\020\022\022\014\n\010HAL_INST\020\023\022\023\n\017RING_MULTIFRAME\020\024"
    "\022\t\n\005VALUE\020x\022\014\n\010INSTANCE\020y\022\016\n\nORIGINATOR\020"
    "z\022\017\n\013NAMED_VALUE\020}\022\r\n\010OT_ERROR\020\202\001*l\n\nRCS"
    "_STATUS\022!\n\024UNINITIALIZED_STATUS\020\377\377\377\377\377\377\377\377"
    "\377\001\022\014\n\010RCS_DONE\020\001\022\014\n\010RCS_EXEC\020\002\022\r\n\tRCS_ER"
    "ROR\020\003\022\020\n\014RCS_RECEIVED\020\004*:\n\tMsgOrigin\022\016\n\n"
    "MSG_KERNEL\020\000\022\016\n\nMSG_RTUSER\020\001\022\r\n\tMSG_ULAP"
    "I\020\002*\177\n\010MsgLevel\022\022\n\016RTAPI_MSG_NONE\020\000\022\021\n\rR"
    "TAPI_MSG_ERR\020\001\022\022\n\016RTAPI_MSG_WARN\020\002\022\022\n\016RT"
    "API_MSG_INFO\020\003\022\021\n\rRTAPI_MSG_DBG\020\004\022\021\n\rRTA"
    "PI_MSG_ALL\020\005*\240\001\n\014OriginDetail\022\017\n\013UNIX_SI"
    "GNAL\020\n\022\025\n\021INSTANCE_SHUTDOWN\020\024\022\016\n\nZMQ_SOC"
    "KET\020F\022\r\n\tNML_LAYER\020P\022\r\n\tRCS_LAYER\020Z\022\r\n\tC"
    "MS_LAYER\020d\022\014\n\010IP_LAYER\020n\022\r\n\tTCP_LAYER\020x\022"
    "\016\n\tPGM_LAYER\020\202\001*\245\001\n\nOriginType\022\013\n\007PROCES"
    "S\020\n\022\017\n\013USER_THREAD\020\024\022\r\n\tRT_THREAD\020\036\022\r\n\tC"
    "OMPONENT\020(\022\023\n\017THREAD_FUNCTION\0202\022\022\n\016COMPO"
    "NENT_INIT\020<\022\022\n\016COMPONENT_EXIT\020F\022\t\n\005GROUP"
    "\020P\022\007\n\003PIN\020Z\022\n\n\006SIGNAL\020d*:\n\010Severity\022\023\n\017S"
    "_INFORMATIONAL\020\001\022\r\n\tS_WARNING\020\002\022\n\n\006S_FAI"
    "L\020\004*D\n\nStatusType\022\014\n\010ENQUEUED\020\001\022\016\n\nPROCE"
    "SSING\020\002\022\014\n\010COMPLETE\020\003\022\n\n\006FAILED\020\004*Y\n\tRep"
    "lyType\022\010\n\004NONE\020\000\022\020\n\014ON_RECEPTION\020\001\022\r\n\tON"
    "_QUEUED\020\002\022\021\n\rON_COMPLETION\020\004\022\016\n\tALL_STEP"
    "S\020\377\001*\326\002\n\013ServiceType\022\016\n\nST_LOGGING\020\001\022\r\n\t"
    "ST_CONFIG\020\002\022\014\n\010ST_REDIS\020\003\022\013\n\007ST_HTTP\020\004\022\014"
    "\n\010ST_HTTPS\020\005\022\020\n\014ST_WEBSOCKET\020\006\022\021\n\rST_WEB"
    "SOCKETS\020\007\022\024\n\020ST_RTAPI_COMMAND\020\010\022\023\n\017ST_ST"
    "P_HALGROUP\020\t\022\023\n\017ST_STP_HALRCOMP\020\n\022\021\n\rST_"
    "STP_INTERP\020\013\022\017\n\013ST_STP_TASK\020\014\022\023\n\017ST_HAL_"
    "RCOMMAND\020\r\022\023\n\017ST_TASK_COMMAND\020\016\022\025\n\021ST_IN"
    "TERP_COMMAND\020\017\022\031\n\025ST_MESSAGEBUS_COMMAND\020"
    "\020\022\032\n\026ST_MESSAGEBUS_RESPONSE\020\021*1\n\nService"
    "API\022\023\n\017SA_ZMQ_PROTOBUF\020\001\022\016\n\nSA_WS_JSON\020\002"
    "*\222E\n\rContainerType\022\020\n\014MT_RTMESSAGE\020\002\022\r\n\t"
    "MT_MOTCMD\020\003\022\020\n\014MT_MOTSTATUS\020\004\022\024\n\020MT_LEGA"
    "CY_MOTCMD\020\005\022\027\n\023MT_LEGACY_MOTSTATUS\020\006\022\n\n\006"
    "MT_WOU\020\007\022\020\n\014MT_HALUPDATE\020\010\022\024\n\020MT_RTAPI_M"
    "ESSAGE\020\t\022\022\n\016MT_LOG_MESSAGE\020\n\022\016\n\nMT_PREVI"
    "EW\020\013\022\017\n\013MT_PROGRESS\020\014\022\022\n\016MT_INTERP_STAT\020"
    "\r\022\r\n\tMT_SYSLOG\020\022\022\021\n\rMT_LEGACY_NML\020\023\022\027\n\023M"
    "T_LEGACY_MOTCONFIG\020\024\022\026\n\022MT_STP_UPDATE_FU"
    "LL\020\032\022\021\n\rMT_STP_UPDATE\020\034\022\022\n\016MT_STP_NOGROU"
    "P\020\033\022\017\n\013MT_SHUTDOWN\020-\022\027\n\023MT_CONFIRM_SHUTD"
    "OWN\0202\022\021\n\rMT_RTMESSAGE0\020\036\022\021\n\rMT_RTMESSAGE"
    "1\020\037\022\021\n\rMT_RTMESSAGE2\020 \022\021\n\rMT_RTMESSAGE3\020"
    "!\022\021\n\rMT_RTMESSAGE4\020\"\022\014\n\010MT_ASCII\020d\022\016\n\nMT"
    "_UNICODE\020e\022\014\n\010MT_GCODE\020f\022\r\n\tMT_PYTHON\020g\022"
    "\r\n\tMT_PICKLE\020h\022\n\n\006MT_TCL\020i\022\n\n\006MT_XML\020j\022\013"
    "\n\007MT_JSON\020k\022\013\n\007MT_JPEG\020l\022\n\n\006MT_PNG\020m\022\013\n\007"
    "MT_TIFF\020n\022\021\n\rMT_POSTSCRIPT\020o\022\n\n\006MT_SVG\020p"
    "\022\025\n\020MT_ZMQ_SUBSCRIBE\020\226\001\022\027\n\022MT_ZMQ_UNSUBS"
    "CRIBE\020\227\001\022\014\n\007MT_PING\020\322\001\022\030\n\023MT_PING_ACKNOW"
    "LEDGE\020\327\001\022\016\n\tMT_REJECT\020\334\001\022\014\n\007MT_DONE\020\360\001\022\027"
    "\n\022MT_SERVICE_REQUEST\020\372\001\022\034\n\027MT_SERVICE_AN"
    "NOUNCEMENT\020\373\001\022\025\n\020MT_SERVICE_PROBE\020\374\001\022!\n\034"
    "MT_MESSAGEBUS_NO_DESTINATION\020\377\001\022\025\n\020MT_HA"
    "LRCOMP_BIND\020\200\002\022\035\n\030MT_HALRCOMP_BIND_CONFI"
    "RM\020\201\002\022\034\n\027MT_HALRCOMP_BIND_REJECT\020\202\002\022\024\n\017M"
    "T_HALRCOMP_SET\020\203\002\022\033\n\026MT_HALRCOMP_SET_REJ"
    "ECT\020\204\002\022\024\n\017MT_HALRCOMP_ACK\020\207\002\022\027\n\022MT_HALRC"
    "OMMAND_SET\020\211\002\022\036\n\031MT_HALRCOMMAND_SET_REJE"
    "CT\020\212\002\022\027\n\022MT_HALRCOMMAND_GET\020\213\002\022\036\n\031MT_HAL"
    "RCOMMAND_GET_REJECT\020\214\002\022\032\n\025MT_HALRCOMMAND"
    "_CREATE\020\215\002\022!\n\034MT_HALRCOMMAND_CREATE_REJE"
    "CT\020\216\002\022\032\n\025MT_HALRCOMMAND_DELETE\020\217\002\022!\n\034MT_"
    "HALRCOMMAND_DELETE_REJECT\020\220\002\022\027\n\022MT_HALRC"
    "OMMAND_ACK\020\221\002\022\031\n\024MT_HALRCOMMAND_ERROR\020\222\002"
    "\022\034\n\027MT_HALRCOMMAND_DESCRIBE\020\224\002\022\037\n\032MT_HAL"
    "RCOMMAND_DESCRIPTION\020\225\002\022\034\n\027MT_HALRCOMP_F"
    "ULL_UPDATE\020\240\002\022#\n\036MT_HALRCOMP_INCREMENTAL"
    "_UPDATE\020\241\002\022\026\n\021MT_HALRCOMP_ERROR\020\242\002\022\025\n\020MT"
    "_HALGROUP_BIND\020\246\002\022\035\n\030MT_HALGROUP_BIND_CO"
    "NFIRM\020\247\002\022\034\n\027MT_HALGROUP_BIND_REJECT\020\250\002\022\034"
    "\n\027MT_HALGROUP_FULL_UPDATE\020\251\002\022#\n\036MT_HALGR"
    "OUP_INCREMENTAL_UPDATE\020\252\002\022\026\n\021MT_HALGROUP"
    "_ERROR\020\253\002\022\026\n\021MT_RTAPI_APP_EXIT\020\254\002\022\026\n\021MT_"
    "RTAPI_APP_PING\020\255\002\022\030\n\023MT_RTAPI_APP_LOADRT"
    "\020\256\002\022\025\n\020MT_RTAPI_APP_LOG\020\257\002\022\032\n\025MT_RTAPI_A"
    "PP_UNLOADRT\020\261\002\022\031\n\024MT_RTAPI_APP_NEWINST\020\262"
    "\002\022\033\n\026MT_RTAPI_APP_NEWTHREAD\020\263\002\022\033\n\026MT_RTA"
    "PI_APP_DELTHREAD\020\264\002\022\032\n\025MT_RTAPI_APP_CALL"
    "FUNC\020\265\002\022\027\n\022MT_RTAPI_APP_REPLY\020\266\002\022\031\n\024MT_R"
    "TAPI_APP_DELINST\020\267\002\022\031\n\024MT_LIST_APPLICATI"
    "ONS\020\336\002\022\034\n\027MT_DESCRIBE_APPLICATION\020\337\002\022\034\n\027"
    "MT_RETRIEVE_APPLICATION\020\340\002\022\032\n\025MT_APPLICA"
    "TION_DETAIL\020\341\002\022\r\n\010MT_ERROR\020\350\002\022\022\n\rMT_TASK"
    "_REPLY\020\220\003\022\025\n\020MT_TICKET_UPDATE\020\221\003\022\025\n\020MT_C"
    "REDIT_UPDATE\020\302\003\022\024\n\017MT_EMCMOT_LOWER\020\350\007\022\024\n"
    "\017MT_EMCMOT_UPPER\020\314\010\022\024\n\017MT_EMCMOT_ABORT\020\351"
    "\007\022\031\n\024MT_EMCMOT_AXIS_ABORT\020\352\007\022\025\n\020MT_EMCMO"
    "T_ENABLE\020\353\007\022\026\n\021MT_EMCMOT_DISABLE\020\354\007\022\037\n\032M"
    "T_EMCMOT_ENABLE_AMPLIFIER\020\355\007\022 \n\033MT_EMCMO"
    "T_DISABLE_AMPLIFIER\020\356\007\022\036\n\031MT_EMCMOT_ENAB"
    "LE_WATCHDOG\020\357\007\022\037\n\032MT_EMCMOT_DISABLE_WATC"
    "HDOG\020\360\007\022\035\n\030MT_EMCMOT_ACTIVATE_JOINT\020\361\007\022\037"
    "\n\032MT_EMCMOT_DEACTIVATE_JOINT\020\362\007\022\024\n\017MT_EM"
    "CMOT_PAUSE\020\363\007\022\025\n\020MT_EMCMOT_RESUME\020\364\007\022\023\n\016"
    "MT_EMCMOT_STEP\020\365\007\022\023\n\016MT_EMCMOT_FREE\020\366\007\022\024"
    "\n\017MT_EMCMOT_COORD\020\367\007\022\025\n\020MT_EMCMOT_TELEOP"
    "\020\370\007\022\034\n\027MT_EMCMOT_SPINDLE_SCALE\020\371\007\022\030\n\023MT_"
    "EMCMOT_SS_ENABLE\020\372\007\022\031\n\024MT_EMCMOT_FEED_SC"
    "ALE\020\373\007\022\030\n\023MT_EMCMOT_FS_ENABLE\020\374\007\022\030\n\023MT_E"
    "MCMOT_FH_ENABLE\020\375\007\022\030\n\023MT_EMCMOT_AF_ENABL"
    "E\020\376\007\022\036\n\031MT_EMCMOT_OVERRIDE_LIMITS\020\377\007\022\023\n\016"
    "MT_EMCMOT_HOME\020\200\010\022\025\n\020MT_EMCMOT_UNHOME\020\201\010"
    "\022\027\n\022MT_EMCMOT_JOG_CONT\020\202\010\022\027\n\022MT_EMCMOT_J"
    "OG_INCR\020\203\010\022\026\n\021MT_EMCMOT_JOG_ABS\020\204\010\022\027\n\022MT"
    "_EMCMOT_SET_LINE\020\205\010\022\031\n\024MT_EMCMOT_SET_CIR"
    "CLE\020\206\010\022 \n\033MT_EMCMOT_SET_TELEOP_VECTOR\020\207\010"
    "\022 \n\033MT_EMCMOT_CLEAR_PROBE_FLAGS\020\210\010\022\024\n\017MT"
    "_EMCMOT_PROBE\020\211\010\022\030\n\023MT_EMCMOT_RIGID_TAP\020"
    "\212\010\022\"\n\035MT_EMCMOT_SET_POSITION_LIMITS\020\213\010\022\033"
    "\n\026MT_EMCMOT_SET_BACKLASH\020\214\010\022\035\n\030MT_EMCMOT"
    "_SET_MIN_FERROR\020\215\010\022\035\n\030MT_EMCMOT_SET_MAX_"
    "FERROR\020\216\010\022\026\n\021MT_EMCMOT_SET_VEL\020\217\010\022\034\n\027MT_"
    "EMCMOT_SET_VEL_LIMIT\020\220\010\022\"\n\035MT_EMCMOT_SET"
    "_JOINT_VEL_LIMIT\020\221\010\022\"\n\035MT_EMCMOT_SET_JOI"
    "NT_ACC_LIMIT\020\222\010\022\026\n\021MT_EMCMOT_SET_ACC\020\223\010\022"
    "\034\n\027MT_EMCMOT_SET_TERM_COND\020\224\010\022\033\n\026MT_EMCM"
    "OT_SET_NUM_AXES\020\225\010\022\035\n\030MT_EMCMOT_SET_WORL"
    "D_HOME\020\226\010\022 \n\033MT_EMCMOT_SET_HOMING_PARAMS"
    "\020\227\010\022\030\n\023MT_EMCMOT_SET_DEBUG\020\230\010\022\027\n\022MT_EMCM"
    "OT_SET_DOUT\020\231\010\022\027\n\022MT_EMCMOT_SET_AOUT\020\232\010\022"
    "\036\n\031MT_EMCMOT_SET_SPINDLESYNC\020\233\010\022\031\n\024MT_EM"
    "CMOT_SPINDLE_ON\020\234\010\022\032\n\025MT_EMCMOT_SPINDLE_"
    "OFF\020\235\010\022\037\n\032MT_EMCMOT_SPINDLE_INCREASE\020\236\010\022"
    "\037\n\032MT_EMCMOT_SPINDLE_DECREASE\020\237\010\022#\n\036MT_E"
    "MCMOT_SPINDLE_BRAKE_ENGAGE\020\240\010\022$\n\037MT_EMCM"
    "OT_SPINDLE_BRAKE_RELEASE\020\241\010\022\037\n\032MT_EMCMOT"
    "_SET_MOTOR_OFFSET\020\242\010\022\035\n\030MT_EMCMOT_SET_JO"
    "INT_COMP\020\243\010\022\031\n\024MT_EMCMOT_SET_OFFSET\020\244\010\022\031"
    "\n\024MT_EMCMOT_COMMAND_OK\020\245\010\022&\n!MT_EMCMOT_C"
    "OMMAND_UNKNOWN_COMMAND\020\246\010\022&\n!MT_EMCMOT_C"
    "OMMAND_INVALID_COMMAND\020\247\010\022%\n MT_EMCMOT_C"
    "OMMAND_INVALID_PARAMS\020\250\010\022\037\n\032MT_EMCMOT_CO"
    "MMAND_BAD_EXEC\020\251\010\022\036\n\031MT_EMCMOT_MOTION_DI"
    "SABLED\020\252\010\022\032\n\025MT_EMCMOT_MOTION_FREE\020\253\010\022\034\n"
    "\027MT_EMCMOT_MOTION_TELEOP\020\254\010\022\033\n\026MT_EMCMOT"
    "_MOTION_COORD\020\255\010\022\031\n\024MT_EMCMOT_JOINT_FLAG"
    "\020\256\010\022\032\n\025MT_EMCMOT_MOTION_FLAG\020\257\010\022\024\n\017MT_PR"
    "U_FIRMWARE\020\200\020\022\032\n\025MT_MESA_5I20_FIRMWARE\020\270"
    "\027\022\014\n\007MT_BLOB\020\240\037\022\r\n\010MT_TEST1\020\211\'\022\r\n\010MT_TES"
    "T2\020\212\'\022\r\n\010MT_TEST3\020\213\'\022\025\n\020MT_EMC_NML_LOWER"
    "\020\220N\022\025\n\020MT_EMC_NML_UPPER\020\310e\022\032\n\025MT_EMC_OPE"
    "RATOR_ERROR\020\233N\022\031\n\024MT_EMC_OPERATOR_TEXT\020\234"
    "N\022\034\n\027MT_EMC_OPERATOR_DISPLAY\020\235N\022\020\n\013MT_EM"
    "C_NULL\020\245N\022\025\n\020MT_EMC_SET_DEBUG\020\246N\022\026\n\021MT_E"
    "MC_SYSTEM_CMD\020\256N\022\031\n\024MT_EMC_AXIS_SET_AXIS"
    "\020\365N\022\032\n\025MT_EMC_AXIS_SET_UNITS\020\366N\022\'\n\"MT_EM"
    "C_AXIS_SET_MIN_POSITION_LIMIT\020\373N\022\'\n\"MT_E"
    "MC_AXIS_SET_MAX_POSITION_LIMIT\020\374N\022\035\n\030MT_"
    "EMC_TOOL_START_CHANGE\020\326\010\022\034\n\027MT_EMC_EXEC_"
    "PLUGIN_CALL\020\330\010\022\032\n\025MT_EMC_IO_PLUGIN_CALL\020"
    "\331\010\022\033\n\026MT_EMC_AXIS_SET_FERROR\020\377N\022\"\n\035MT_EM"
    "C_AXIS_SET_HOMING_PARAMS\020\200O\022\037\n\032MT_EMC_AX"
    "IS_SET_MIN_FERROR\020\203O\022!\n\034MT_EMC_AXIS_SET_"
    "MAX_VELOCITY\020\204O\022\025\n\020MT_EMC_AXIS_INIT\020\206O\022\025"
    "\n\020MT_EMC_AXIS_HALT\020\207O\022\026\n\021MT_EMC_AXIS_ABO"
    "RT\020\210O\022\027\n\022MT_EMC_AXIS_ENABLE\020\211O\022\030\n\023MT_EMC"
    "_AXIS_DISABLE\020\212O\022\025\n\020MT_EMC_AXIS_HOME\020\213O\022"
    "\027\n\022MT_EMC_AXIS_UNHOME\020\227O\022\024\n\017MT_EMC_AXIS_"
    "JOG\020\214O\022\031\n\024MT_EMC_AXIS_INCR_JOG\020\215O\022\030\n\023MT_"
    "EMC_AXIS_ABS_JOG\020\216O\022\031\n\024MT_EMC_AXIS_ACTIV"
    "ATE\020\217O\022\033\n\026MT_EMC_AXIS_DEACTIVATE\020\220O\022 \n\033M"
    "T_EMC_AXIS_OVERRIDE_LIMITS\020\221O\022\032\n\025MT_EMC_"
    "AXIS_LOAD_COMP\020\223O\022\035\n\030MT_EMC_AXIS_SET_BAC"
    "KLASH\020\226O\022\025\n\020MT_EMC_AXIS_STAT\020\327O\022\031\n\024MT_EM"
    "C_TRAJ_SET_AXES\020\331O\022\032\n\025MT_EMC_TRAJ_SET_UN"
    "ITS\020\332O\022\037\n\032MT_EMC_TRAJ_SET_CYCLE_TIME\020\333O\022"
    "\031\n\024MT_EMC_TRAJ_SET_MODE\020\334O\022\035\n\030MT_EMC_TRA"
    "J_SET_VELOCITY\020\335O\022!\n\034MT_EMC_TRAJ_SET_ACC"
    "ELERATION\020\336O\022!\n\034MT_EMC_TRAJ_SET_MAX_VELO"
    "CITY\020\337O\022%\n MT_EMC_TRAJ_SET_MAX_ACCELERAT"
    "ION\020\340O\022\032\n\025MT_EMC_TRAJ_SET_SCALE\020\341O\022\036\n\031MT"
    "_EMC_TRAJ_SET_MOTION_ID\020\342O\022\025\n\020MT_EMC_TRA"
    "J_INIT\020\343O\022\025\n\020MT_EMC_TRAJ_HALT\020\344O\022\027\n\022MT_E"
    "MC_TRAJ_ENABLE\020\345O\022\030\n\023MT_EMC_TRAJ_DISABLE"
    "\020\346O\022\026\n\021MT_EMC_TRAJ_ABORT\020\347O\022\026\n\021MT_EMC_TR"
    "AJ_PAUSE\020\350O\022\025\n\020MT_EMC_TRAJ_STEP\020\351O\022\027\n\022MT"
    "_EMC_TRAJ_RESUME\020\352O\022\026\n\021MT_EMC_TRAJ_DELAY"
    "\020\353O\022\034\n\027MT_EMC_TRAJ_LINEAR_MOVE\020\354O\022\036\n\031MT_"
    "EMC_TRAJ_CIRCULAR_MOVE\020\355O\022\036\n\031MT_EMC_TRAJ"
    "_SET_TERM_COND\020\356O\022\033\n\026MT_EMC_TRAJ_SET_OFF"
    "SET\020\357O\022\030\n\023MT_EMC_TRAJ_SET_G5X\020\360O\022\031\n\024MT_E"
    "MC_TRAJ_SET_HOME\020\361O\022\035\n\030MT_EMC_TRAJ_SET_R"
    "OTATION\020\362O\022\030\n\023MT_EMC_TRAJ_SET_G92\020\363O\022)\n$"
    "MT_EMC_TRAJ_CLEAR_PROBE_TRIPPED_FLAG\020\364O\022"
    "\026\n\021MT_EMC_TRAJ_PROBE\020\365O\022\"\n\035MT_EMC_TRAJ_S"
    "ET_TELEOP_ENABLE\020\366O\022\"\n\035MT_EMC_TRAJ_SET_T"
    "ELEOP_VECTOR\020\367O\022 \n\033MT_EMC_TRAJ_SET_SPIND"
    "LESYNC\020\370O\022\"\n\035MT_EMC_TRAJ_SET_SPINDLE_SCA"
    "LE\020\371O\022\036\n\031MT_EMC_TRAJ_SET_FO_ENABLE\020\372O\022\036\n"
    "\031MT_EMC_TRAJ_SET_SO_ENABLE\020\373O\022\036\n\031MT_EMC_"
    "TRAJ_SET_FH_ENABLE\020\374O\022\032\n\025MT_EMC_TRAJ_RIG"
    "ID_TAP\020\375O\022\025\n\020MT_EMC_TRAJ_STAT\020\273P\022\027\n\022MT_E"
    "MC_MOTION_INIT\020\275P\022\027\n\022MT_EMC_MOTION_HALT\020"
    "\276P\022\030\n\023MT_EMC_MOTION_ABORT\020\277P\022\033\n\026MT_EMC_M"
    "OTION_SET_AOUT\020\300P\022\033\n\026MT_EMC_MOTION_SET_D"
    "OUT\020\301P\022\033\n\026MT_EMC_MOTION_ADAPTIVE\020\302P\022\032\n\025M"
    "T_EMC_SPINDLE_ORIENT\020\315P\022(\n#MT_EMC_SPINDL"
    "E_WAIT_ORIENT_COMPLETE\020\316P\022\027\n\022MT_EMC_MOTI"
    "ON_STAT\020\237Q\022\025\n\020MT_EMC_TASK_INIT\020\205R\022\025\n\020MT_"
    "EMC_TASK_HALT\020\206R\022\026\n\021MT_EMC_TASK_ABORT\020\207R"
    "\022\031\n\024MT_EMC_TASK_SET_MODE\020\210R\022\032\n\025MT_EMC_TA"
    "SK_SET_STATE\020\211R\022\032\n\025MT_EMC_TASK_PLAN_OPEN"
    "\020\212R\022\031\n\024MT_EMC_TASK_PLAN_RUN\020\213R\022\032\n\025MT_EMC"
    "_TASK_PLAN_READ\020\214R\022\035\n\030MT_EMC_TASK_PLAN_E"
    "XECUTE\020\215R\022\033\n\026MT_EMC_TASK_PLAN_PAUSE\020\216R\022\032"
    "\n\025MT_EMC_TASK_PLAN_STEP\020\217R\022\034\n\027MT_EMC_TAS"
    "K_PLAN_RESUME\020\220R\022\031\n\024MT_EMC_TASK_PLAN_END"
    "\020\221R\022\033\n\026MT_EMC_TASK_PLAN_CLOSE\020\222R\022\032\n\025MT_E"
    "MC_TASK_PLAN_INIT\020\223R\022\033\n\026MT_EMC_TASK_PLAN"
    "_SYNCH\020\224R\022\'\n\"MT_EMC_TASK_PLAN_SET_OPTION"
    "AL_STOP\020\225R\022&\n!MT_EMC_TASK_PLAN_SET_BLOCK"
    "_DELETE\020\226R\022#\n\036MT_EMC_TASK_PLAN_OPTIONAL_"
    "STOP\020\227R\022\033\n\026MT_EMC_TASK_PLAN_RESET\020\230R\022\033\n\026"
    "MT_EMC_TASK_PLAN_REPLY\020\242R\022\025\n\020MT_EMC_TASK"
    "_STAT\020\347R\022\025\n\020MT_EMC_TOOL_INIT\020\335V\022\025\n\020MT_EM"
    "C_TOOL_HALT\020\336V\022\026\n\021MT_EMC_TOOL_ABORT\020\337V\022\030"
    "\n\023MT_EMC_TOOL_PREPARE\020\340V\022\025\n\020MT_EMC_TOOL_"
    "LOAD\020\341V\022\027\n\022MT_EMC_TOOL_UNLOAD\020\342V\022 \n\033MT_E"
    "MC_TOOL_LOAD_TOOL_TABLE\020\343V\022\033\n\026MT_EMC_TOO"
    "L_SET_OFFSET\020\344V\022\033\n\026MT_EMC_TOOL_SET_NUMBE"
    "R\020\345V\022\025\n\020MT_EMC_TOOL_STAT\020\277W\022\030\n\023MT_EMC_AU"
    "X_ESTOP_ON\020\306W\022\031\n\024MT_EMC_AUX_ESTOP_OFF\020\307W"
    "\022\033\n\026MT_EMC_AUX_ESTOP_RESET\020\310W\022\032\n\025MT_EMC_"
    "AUX_INPUT_WAIT\020\311W\022\024\n\017MT_EMC_AUX_STAT\020\243X\022"
    "\026\n\021MT_EMC_SPINDLE_ON\020\250X\022\027\n\022MT_EMC_SPINDL"
    "E_OFF\020\251X\022\034\n\027MT_EMC_SPINDLE_INCREASE\020\255X\022\034"
    "\n\027MT_EMC_SPINDLE_DECREASE\020\256X\022\034\n\027MT_EMC_S"
    "PINDLE_CONSTANT\020\257X\022!\n\034MT_EMC_SPINDLE_BRA"
    "KE_RELEASE\020\260X\022 \n\033MT_EMC_SPINDLE_BRAKE_EN"
    "GAGE\020\261X\022\031\n\024MT_EMC_SPINDLE_SPEED\020\264X\022\030\n\023MT"
    "_EMC_SPINDLE_STAT\020\207Y\022\033\n\026MT_EMC_COOLANT_M"
    "IST_ON\020\214Y\022\034\n\027MT_EMC_COOLANT_MIST_OFF\020\215Y\022"
    "\034\n\027MT_EMC_COOLANT_FLOOD_ON\020\216Y\022\035\n\030MT_EMC_"
    "COOLANT_FLOOD_OFF\020\217Y\022\030\n\023MT_EMC_COOLANT_S"
    "TAT\020\353Y\022\023\n\016MT_EMC_LUBE_ON\020\360Y\022\024\n\017MT_EMC_LU"
    "BE_OFF\020\361Y\022\025\n\020MT_EMC_LUBE_STAT\020\317Z\022\023\n\016MT_E"
    "MC_IO_INIT\020\321Z\022\023\n\016MT_EMC_IO_HALT\020\322Z\022\024\n\017MT"
    "_EMC_IO_ABORT\020\323Z\022\035\n\030MT_EMC_IO_SET_CYCLE_"
    "TIME\020\324Z\022\023\n\016MT_EMC_IO_STAT\020\263[\022\020\n\013MT_EMC_I"
    "NIT\020\375\\\022\020\n\013MT_EMC_HALT\020\376\\\022\021\n\014MT_EMC_ABORT"
    "\020\377\\\022\020\n\013MT_EMC_STAT\020\337]\022\033\n\026MT_EMCSTAT_FULL"
    "_UPDATE\020\324a\022\"\n\035MT_EMCSTAT_INCREMENTAL_UPD"
    "ATE\020\325a\022\025\n\020MT_EMC_NML_ERROR\020\336a\022\024\n\017MT_EMC_"
    "NML_TEXT\020\337a\022\027\n\022MT_EMC_NML_DISPLAY\020\340a\022\027\n\022"
    "MT_EMCCMD_EXECUTED\020\350a\022\030\n\023MT_EMCCMD_COMPL"
    "ETED\020\351a\022\034\n\027MT_LAUNCHER_FULL_UPDATE\020\270b\022#\n"
    "\036MT_LAUNCHER_INCREMENTAL_UPDATE\020\271b\022\026\n\021MT"
    "_LAUNCHER_ERROR\020\272b\022\026\n\021MT_LAUNCHER_START\020"
    "\302b\022\032\n\025MT_LAUNCHER_TERMINATE\020\303b\022\025\n\020MT_LAU"
    "NCHER_KILL\020\304b\022\034\n\027MT_LAUNCHER_WRITE_STDIN"
    "\020\305b\022\025\n\020MT_LAUNCHER_CALL\020\306b\022\031\n\024MT_LAUNCHE"
    "R_SHUTDOWN\020\307b*\267\001\n\013OriginIndex\022\022\n\016ORIGIN_"
    "UNKNOWN\020\000\022\016\n\nORIGIN_G54\020\001\022\016\n\nORIGIN_G55\020"
    "\002\022\016\n\nORIGIN_G56\020\003\022\016\n\nORIGIN_G57\020\004\022\016\n\nORI"
    "GIN_G58\020\005\022\016\n\nORIGIN_G59\020\006\022\020\n\014ORIGIN_G59_"
    "1\020\007\022\020\n\014ORIGIN_G59_2\020\010\022\020\n\014ORIGIN_G59_3\020\t*"
    "P\n\021TermConditionType\022\034\n\030_EMC_TRAJ_TERM_C"
    "OND_STOP\020\001\022\035\n\031_EMC_TRAJ_TERM_COND_BLEND\020"
    "\002*W\n\016CanonDirection\022\022\n\016_CANON_STOPPED\020\001\022"
    "\024\n\020_CANON_CLOCKWISE\020\002\022\033\n\027_CANON_COUNTERC"
    "LOCKWISE\020\003*2\n\tInputType\022\021\n\r_ANALOG_INPUT"
    "\020\000\022\022\n\016_DIGITAL_INPUT\020\001*F\n\010WaitType\022\r\n\tIM"
    "MEDIATE\020\000\022\010\n\004RISE\020\001\022\010\n\004FALL\020\002\022\013\n\007BE_HIGH"
    "\020\003\022\n\n\006BE_LOW\020\004*\253\001\n\024InterpreterStateType\022"
    "\017\n\013INTERP_IDLE\020\001\022\022\n\016INTERP_RUNNING\020\002\022\024\n\020"
    "INTERP_SYNC_WAIT\020\003\022\021\n\rINTERP_PAUSED\020\004\022\026\n"
    "\022INTERP_QEUEUE_WAIT\020\005\022\025\n\021INTERP_ABORT_WA"
    "IT\020\006\022\026\n\022INTERP_STATE_UNSET\020c", 11548);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "types.proto", &protobuf_RegisterTypes);
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_types_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_types_2eproto {
  StaticDescriptorInitializer_types_2eproto() {
    protobuf_AddDesc_types_2eproto();
  }
} static_descriptor_initializer_types_2eproto_;
const ::google::protobuf::EnumDescriptor* ValueType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ValueType_descriptor_;
}
bool ValueType_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 20:
    case 30:
    case 40:
    case 50:
    case 60:
    case 80:
    case 100:
    case 110:
    case 120:
    case 130:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* HalPinDirection_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return HalPinDirection_descriptor_;
}
bool HalPinDirection_IsValid(int value) {
  switch(value) {
    case 16:
    case 32:
    case 48:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* HalParamDirection_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return HalParamDirection_descriptor_;
}
bool HalParamDirection_IsValid(int value) {
  switch(value) {
    case 64:
    case 192:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* ObjectType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ObjectType_descriptor_;
}
bool ObjectType_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 120:
    case 121:
    case 122:
    case 125:
    case 130:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* RCS_STATUS_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RCS_STATUS_descriptor_;
}
bool RCS_STATUS_IsValid(int value) {
  switch(value) {
    case -1:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* MsgOrigin_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgOrigin_descriptor_;
}
bool MsgOrigin_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* MsgLevel_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgLevel_descriptor_;
}
bool MsgLevel_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* OriginDetail_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return OriginDetail_descriptor_;
}
bool OriginDetail_IsValid(int value) {
  switch(value) {
    case 10:
    case 20:
    case 70:
    case 80:
    case 90:
    case 100:
    case 110:
    case 120:
    case 130:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* OriginType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return OriginType_descriptor_;
}
bool OriginType_IsValid(int value) {
  switch(value) {
    case 10:
    case 20:
    case 30:
    case 40:
    case 50:
    case 60:
    case 70:
    case 80:
    case 90:
    case 100:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* Severity_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Severity_descriptor_;
}
bool Severity_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* StatusType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return StatusType_descriptor_;
}
bool StatusType_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* ReplyType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReplyType_descriptor_;
}
bool ReplyType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 4:
    case 255:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* ServiceType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ServiceType_descriptor_;
}
bool ServiceType_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* ServiceAPI_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ServiceAPI_descriptor_;
}
bool ServiceAPI_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* ContainerType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ContainerType_descriptor_;
}
bool ContainerType_IsValid(int value) {
  switch(value) {
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 18:
    case 19:
    case 20:
    case 26:
    case 27:
    case 28:
    case 30:
    case 31:
    case 32:
    case 33:
    case 34:
    case 45:
    case 50:
    case 100:
    case 101:
    case 102:
    case 103:
    case 104:
    case 105:
    case 106:
    case 107:
    case 108:
    case 109:
    case 110:
    case 111:
    case 112:
    case 150:
    case 151:
    case 210:
    case 215:
    case 220:
    case 240:
    case 250:
    case 251:
    case 252:
    case 255:
    case 256:
    case 257:
    case 258:
    case 259:
    case 260:
    case 263:
    case 265:
    case 266:
    case 267:
    case 268:
    case 269:
    case 270:
    case 271:
    case 272:
    case 273:
    case 274:
    case 276:
    case 277:
    case 288:
    case 289:
    case 290:
    case 294:
    case 295:
    case 296:
    case 297:
    case 298:
    case 299:
    case 300:
    case 301:
    case 302:
    case 303:
    case 305:
    case 306:
    case 307:
    case 308:
    case 309:
    case 310:
    case 311:
    case 350:
    case 351:
    case 352:
    case 353:
    case 360:
    case 400:
    case 401:
    case 450:
    case 1000:
    case 1001:
    case 1002:
    case 1003:
    case 1004:
    case 1005:
    case 1006:
    case 1007:
    case 1008:
    case 1009:
    case 1010:
    case 1011:
    case 1012:
    case 1013:
    case 1014:
    case 1015:
    case 1016:
    case 1017:
    case 1018:
    case 1019:
    case 1020:
    case 1021:
    case 1022:
    case 1023:
    case 1024:
    case 1025:
    case 1026:
    case 1027:
    case 1028:
    case 1029:
    case 1030:
    case 1031:
    case 1032:
    case 1033:
    case 1034:
    case 1035:
    case 1036:
    case 1037:
    case 1038:
    case 1039:
    case 1040:
    case 1041:
    case 1042:
    case 1043:
    case 1044:
    case 1045:
    case 1046:
    case 1047:
    case 1048:
    case 1049:
    case 1050:
    case 1051:
    case 1052:
    case 1053:
    case 1054:
    case 1055:
    case 1056:
    case 1057:
    case 1058:
    case 1059:
    case 1060:
    case 1061:
    case 1062:
    case 1063:
    case 1064:
    case 1065:
    case 1066:
    case 1067:
    case 1068:
    case 1069:
    case 1070:
    case 1071:
    case 1100:
    case 1110:
    case 1112:
    case 1113:
    case 2048:
    case 3000:
    case 4000:
    case 5001:
    case 5002:
    case 5003:
    case 10000:
    case 10011:
    case 10012:
    case 10013:
    case 10021:
    case 10022:
    case 10030:
    case 10101:
    case 10102:
    case 10107:
    case 10108:
    case 10111:
    case 10112:
    case 10115:
    case 10116:
    case 10118:
    case 10119:
    case 10120:
    case 10121:
    case 10122:
    case 10123:
    case 10124:
    case 10125:
    case 10126:
    case 10127:
    case 10128:
    case 10129:
    case 10131:
    case 10134:
    case 10135:
    case 10199:
    case 10201:
    case 10202:
    case 10203:
    case 10204:
    case 10205:
    case 10206:
    case 10207:
    case 10208:
    case 10209:
    case 10210:
    case 10211:
    case 10212:
    case 10213:
    case 10214:
    case 10215:
    case 10216:
    case 10217:
    case 10218:
    case 10219:
    case 10220:
    case 10221:
    case 10222:
    case 10223:
    case 10224:
    case 10225:
    case 10226:
    case 10227:
    case 10228:
    case 10229:
    case 10230:
    case 10231:
    case 10232:
    case 10233:
    case 10234:
    case 10235:
    case 10236:
    case 10237:
    case 10299:
    case 10301:
    case 10302:
    case 10303:
    case 10304:
    case 10305:
    case 10306:
    case 10317:
    case 10318:
    case 10399:
    case 10501:
    case 10502:
    case 10503:
    case 10504:
    case 10505:
    case 10506:
    case 10507:
    case 10508:
    case 10509:
    case 10510:
    case 10511:
    case 10512:
    case 10513:
    case 10514:
    case 10515:
    case 10516:
    case 10517:
    case 10518:
    case 10519:
    case 10520:
    case 10530:
    case 10599:
    case 11101:
    case 11102:
    case 11103:
    case 11104:
    case 11105:
    case 11106:
    case 11107:
    case 11108:
    case 11109:
    case 11199:
    case 11206:
    case 11207:
    case 11208:
    case 11209:
    case 11299:
    case 11304:
    case 11305:
    case 11309:
    case 11310:
    case 11311:
    case 11312:
    case 11313:
    case 11316:
    case 11399:
    case 11404:
    case 11405:
    case 11406:
    case 11407:
    case 11499:
    case 11504:
    case 11505:
    case 11599:
    case 11601:
    case 11602:
    case 11603:
    case 11604:
    case 11699:
    case 11901:
    case 11902:
    case 11903:
    case 11999:
    case 12500:
    case 12501:
    case 12510:
    case 12511:
    case 12512:
    case 12520:
    case 12521:
    case 12600:
    case 12601:
    case 12602:
    case 12610:
    case 12611:
    case 12612:
    case 12613:
    case 12614:
    case 12615:
    case 13000:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* OriginIndex_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return OriginIndex_descriptor_;
}
bool OriginIndex_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* TermConditionType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TermConditionType_descriptor_;
}
bool TermConditionType_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* CanonDirection_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CanonDirection_descriptor_;
}
bool CanonDirection_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* InputType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return InputType_descriptor_;
}
bool InputType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* WaitType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return WaitType_descriptor_;
}
bool WaitType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* InterpreterStateType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return InterpreterStateType_descriptor_;
}
bool InterpreterStateType_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 99:
      return true;
    default:
      return false;
  }
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace pb

// @@protoc_insertion_point(global_scope)
