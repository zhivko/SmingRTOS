// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: object.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "object.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace pb {

namespace {

const ::google::protobuf::Descriptor* Instance_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Instance_reflection_ = NULL;
const ::google::protobuf::Descriptor* ServiceAnnouncement_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ServiceAnnouncement_reflection_ = NULL;
const ::google::protobuf::Descriptor* Originator_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Originator_reflection_ = NULL;
const ::google::protobuf::Descriptor* AnError_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AnError_reflection_ = NULL;
const ::google::protobuf::Descriptor* Pin_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Pin_reflection_ = NULL;
const ::google::protobuf::Descriptor* Signal_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Signal_reflection_ = NULL;
const ::google::protobuf::Descriptor* Param_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Param_reflection_ = NULL;
const ::google::protobuf::Descriptor* Function_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Function_reflection_ = NULL;
const ::google::protobuf::Descriptor* Thread_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Thread_reflection_ = NULL;
const ::google::protobuf::Descriptor* Component_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Component_reflection_ = NULL;
const ::google::protobuf::Descriptor* Ring_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Ring_reflection_ = NULL;
const ::google::protobuf::Descriptor* Member_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Member_reflection_ = NULL;
const ::google::protobuf::Descriptor* Group_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Group_reflection_ = NULL;
const ::google::protobuf::Descriptor* ProtocolParameters_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ProtocolParameters_reflection_ = NULL;
const ::google::protobuf::Descriptor* Vtable_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Vtable_reflection_ = NULL;
const ::google::protobuf::Descriptor* Inst_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Inst_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_object_2eproto() {
  protobuf_AddDesc_object_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "object.proto");
  GOOGLE_CHECK(file != NULL);
  Instance_descriptor_ = file->message_type(0);
  static const int Instance_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Instance, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Instance, id_),
  };
  Instance_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Instance_descriptor_,
      Instance::default_instance_,
      Instance_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Instance, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Instance, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Instance));
  ServiceAnnouncement_descriptor_ = file->message_type(1);
  static const int ServiceAnnouncement_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServiceAnnouncement, stype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServiceAnnouncement, version_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServiceAnnouncement, instance_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServiceAnnouncement, api_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServiceAnnouncement, uri_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServiceAnnouncement, description_),
  };
  ServiceAnnouncement_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ServiceAnnouncement_descriptor_,
      ServiceAnnouncement::default_instance_,
      ServiceAnnouncement_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServiceAnnouncement, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServiceAnnouncement, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ServiceAnnouncement));
  Originator_descriptor_ = file->message_type(2);
  static const int Originator_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Originator, origin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Originator, detail_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Originator, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Originator, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Originator, instance_),
  };
  Originator_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Originator_descriptor_,
      Originator::default_instance_,
      Originator_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Originator, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Originator, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Originator));
  AnError_descriptor_ = file->message_type(3);
  static const int AnError_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AnError, error_code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AnError, severity_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AnError, error_text_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AnError, origin_),
  };
  AnError_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AnError_descriptor_,
      AnError::default_instance_,
      AnError_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AnError, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AnError, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AnError));
  Pin_descriptor_ = file->message_type(4);
  static const int Pin_offsets_[13] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Pin, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Pin, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Pin, handle_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Pin, dir_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Pin, halbit_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Pin, halfloat_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Pin, hals32_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Pin, halu32_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Pin, owner_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Pin, linked_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Pin, oldname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Pin, epsilon_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Pin, flags_),
  };
  Pin_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Pin_descriptor_,
      Pin::default_instance_,
      Pin_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Pin, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Pin, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Pin));
  Signal_descriptor_ = file->message_type(5);
  static const int Signal_offsets_[12] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Signal, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Signal, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Signal, handle_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Signal, halbit_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Signal, halfloat_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Signal, hals32_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Signal, halu32_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Signal, strval_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Signal, blob_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Signal, readers_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Signal, writers_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Signal, bidirs_),
  };
  Signal_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Signal_descriptor_,
      Signal::default_instance_,
      Signal_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Signal, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Signal, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Signal));
  Param_descriptor_ = file->message_type(6);
  static const int Param_offsets_[14] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Param, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Param, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Param, handle_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Param, halbit_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Param, halfloat_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Param, hals32_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Param, halu32_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Param, strval_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Param, blob_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Param, dir_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Param, oldname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Param, owner_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Param, runtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Param, maytime_),
  };
  Param_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Param_descriptor_,
      Param::default_instance_,
      Param_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Param, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Param, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Param));
  Function_descriptor_ = file->message_type(7);
  static const int Function_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Function, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Function, handle_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Function, owner_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Function, users_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Function, runtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Function, maxtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Function, reentrant_),
  };
  Function_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Function_descriptor_,
      Function::default_instance_,
      Function_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Function, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Function, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Function));
  Thread_descriptor_ = file->message_type(8);
  static const int Thread_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Thread, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Thread, handle_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Thread, uses_fp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Thread, period_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Thread, priority_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Thread, task_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Thread, cpu_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Thread, function_),
  };
  Thread_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Thread_descriptor_,
      Thread::default_instance_,
      Thread_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Thread, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Thread, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Thread));
  Component_descriptor_ = file->message_type(9);
  static const int Component_offsets_[16] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Component, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Component, ninst_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Component, comp_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Component, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Component, state_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Component, last_update_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Component, last_bound_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Component, last_unbound_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Component, pid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Component, args_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Component, timer_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Component, userarg1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Component, userarg2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Component, pin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Component, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Component, no_create_),
  };
  Component_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Component_descriptor_,
      Component::default_instance_,
      Component_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Component, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Component, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Component));
  Ring_descriptor_ = file->message_type(10);
  static const int Ring_offsets_[11] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Ring, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Ring, handle_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Ring, owner_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Ring, stream_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Ring, wmutex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Ring, rmutex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Ring, rtapi_shm_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Ring, reader_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Ring, writer_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Ring, size_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Ring, scratchpad_),
  };
  Ring_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Ring_descriptor_,
      Ring::default_instance_,
      Ring_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Ring, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Ring, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Ring));
  Member_descriptor_ = file->message_type(11);
  static const int Member_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Member, mtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Member, userarg1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Member, epsilon_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Member, signal_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Member, groupname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Member, handle_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Member, pin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Member, param_),
  };
  Member_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Member_descriptor_,
      Member::default_instance_,
      Member_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Member, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Member, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Member));
  Group_descriptor_ = file->message_type(12);
  static const int Group_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Group, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Group, handle_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Group, userarg1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Group, userarg2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Group, refcount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Group, member_),
  };
  Group_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Group_descriptor_,
      Group::default_instance_,
      Group_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Group, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Group, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Group));
  ProtocolParameters_descriptor_ = file->message_type(13);
  static const int ProtocolParameters_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtocolParameters, keepalive_timer_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtocolParameters, group_timer_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtocolParameters, rcomp_timer_),
  };
  ProtocolParameters_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ProtocolParameters_descriptor_,
      ProtocolParameters::default_instance_,
      ProtocolParameters_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtocolParameters, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProtocolParameters, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ProtocolParameters));
  Vtable_descriptor_ = file->message_type(14);
  static const int Vtable_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Vtable, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Vtable, context_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Vtable, comp_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Vtable, instance_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Vtable, handle_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Vtable, refcount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Vtable, version_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Vtable, vtable_),
  };
  Vtable_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Vtable_descriptor_,
      Vtable::default_instance_,
      Vtable_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Vtable, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Vtable, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Vtable));
  Inst_descriptor_ = file->message_type(15);
  static const int Inst_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Inst, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Inst, comp_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Inst, inst_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Inst, inst_size_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Inst, vtable_),
  };
  Inst_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Inst_descriptor_,
      Inst::default_instance_,
      Inst_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Inst, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Inst, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Inst));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_object_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Instance_descriptor_, &Instance::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ServiceAnnouncement_descriptor_, &ServiceAnnouncement::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Originator_descriptor_, &Originator::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AnError_descriptor_, &AnError::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Pin_descriptor_, &Pin::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Signal_descriptor_, &Signal::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Param_descriptor_, &Param::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Function_descriptor_, &Function::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Thread_descriptor_, &Thread::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Component_descriptor_, &Component::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Ring_descriptor_, &Ring::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Member_descriptor_, &Member::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Group_descriptor_, &Group::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ProtocolParameters_descriptor_, &ProtocolParameters::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Vtable_descriptor_, &Vtable::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Inst_descriptor_, &Inst::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_object_2eproto() {
  delete Instance::default_instance_;
  delete Instance_reflection_;
  delete ServiceAnnouncement::default_instance_;
  delete ServiceAnnouncement_reflection_;
  delete Originator::default_instance_;
  delete Originator_reflection_;
  delete AnError::default_instance_;
  delete AnError_reflection_;
  delete Pin::default_instance_;
  delete Pin_reflection_;
  delete Signal::default_instance_;
  delete Signal_reflection_;
  delete Param::default_instance_;
  delete Param_reflection_;
  delete Function::default_instance_;
  delete Function_reflection_;
  delete Thread::default_instance_;
  delete Thread_reflection_;
  delete Component::default_instance_;
  delete Component_reflection_;
  delete Ring::default_instance_;
  delete Ring_reflection_;
  delete Member::default_instance_;
  delete Member_reflection_;
  delete Group::default_instance_;
  delete Group_reflection_;
  delete ProtocolParameters::default_instance_;
  delete ProtocolParameters_reflection_;
  delete Vtable::default_instance_;
  delete Vtable_reflection_;
  delete Inst::default_instance_;
  delete Inst_reflection_;
}

void protobuf_AddDesc_object_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::protobuf_AddDesc_nanopb_2eproto();
  ::pb::protobuf_AddDesc_types_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\014object.proto\022\002pb\032\014nanopb.proto\032\013types."
    "proto\",\n\010Instance\022\014\n\004name\030\001 \001(\t\022\n\n\002id\030\002 "
    "\001(\017:\006\222\?\003H\274\005\"\245\001\n\023ServiceAnnouncement\022\036\n\005s"
    "type\030\001 \002(\0162\017.pb.ServiceType\022\022\n\007version\030\002"
    " \002(\007:\0010\022\023\n\010instance\030\003 \002(\007:\0010\022\033\n\003api\030\010 \002("
    "\0162\016.pb.ServiceAPI\022\013\n\003uri\030\006 \002(\t\022\023\n\013descri"
    "ption\030\007 \001(\t:\006\222\?\003H\275\005\"\220\001\n\nOriginator\022\036\n\006or"
    "igin\030\001 \001(\0162\016.pb.OriginType\022 \n\006detail\030\002 \001"
    "(\0162\020.pb.OriginDetail\022\014\n\004name\030\003 \001(\t\022\n\n\002id"
    "\030\004 \001(\017\022\036\n\010instance\030\005 \001(\0132\014.pb.Instance:\006"
    "\222\?\003H\276\005\"y\n\007AnError\022\022\n\nerror_code\030\001 \002(\017\022\036\n"
    "\010severity\030\002 \001(\0162\014.pb.Severity\022\022\n\nerror_t"
    "ext\030\003 \001(\t\022\036\n\006origin\030\004 \001(\0132\016.pb.Originato"
    "r:\006\222\?\003H\277\005\"\374\001\n\003Pin\022\033\n\004type\030\001 \001(\0162\r.pb.Val"
    "ueType\022\014\n\004name\030\002 \001(\t\022\016\n\006handle\030\003 \001(\007\022 \n\003"
    "dir\030\004 \001(\0162\023.pb.HalPinDirection\022\016\n\006halbit"
    "\030\005 \001(\010\022\020\n\010halfloat\030\006 \001(\001\022\016\n\006hals32\030\007 \001(\017"
    "\022\016\n\006halu32\030\010 \001(\007\022\r\n\005owner\030\t \001(\017\022\016\n\006linke"
    "d\030\n \001(\010\022\017\n\007oldname\030\013 \001(\t\022\017\n\007epsilon\030\014 \001("
    "\001\022\r\n\005flags\030\r \001(\007:\006\222\?\003H\300\005\"\335\001\n\006Signal\022\033\n\004t"
    "ype\030\001 \001(\0162\r.pb.ValueType\022\014\n\004name\030\002 \001(\t\022\016"
    "\n\006handle\030\003 \001(\007\022\016\n\006halbit\030\005 \001(\010\022\020\n\010halflo"
    "at\030\006 \001(\001\022\016\n\006hals32\030\007 \001(\017\022\016\n\006halu32\030\010 \001(\007"
    "\022\016\n\006strval\030\t \001(\t\022\014\n\004blob\030\n \001(\014\022\017\n\007reader"
    "s\030\013 \001(\007\022\017\n\007writers\030\014 \001(\007\022\016\n\006bidirs\030\r \001(\007"
    ":\006\222\?\003H\301\005\"\220\002\n\005Param\022\033\n\004type\030\001 \001(\0162\r.pb.Va"
    "lueType\022\014\n\004name\030\002 \001(\t\022\016\n\006handle\030\003 \001(\007\022\016\n"
    "\006halbit\030\005 \001(\010\022\020\n\010halfloat\030\006 \001(\001\022\016\n\006hals3"
    "2\030\007 \001(\017\022\016\n\006halu32\030\010 \001(\007\022\016\n\006strval\030\t \001(\t\022"
    "\014\n\004blob\030\n \001(\014\022\"\n\003dir\030\013 \001(\0162\025.pb.HalParam"
    "Direction\022\017\n\007oldname\030\014 \001(\t\022\r\n\005owner\030\r \001("
    "\017\022\017\n\007runtime\030\016 \001(\017\022\017\n\007maytime\030\017 \001(\017:\006\222\?\003"
    "H\302\005\"\206\001\n\010Function\022\014\n\004name\030\001 \001(\t\022\016\n\006handle"
    "\030\002 \001(\007\022\020\n\010owner_id\030\003 \001(\007\022\r\n\005users\030\004 \001(\007\022"
    "\017\n\007runtime\030\005 \001(\007\022\017\n\007maxtime\030\006 \001(\007\022\021\n\tree"
    "ntrant\030\007 \001(\010:\006\222\?\003H\303\005\"\224\001\n\006Thread\022\014\n\004name\030"
    "\001 \001(\t\022\016\n\006handle\030\002 \001(\007\022\017\n\007uses_fp\030\003 \001(\010\022\016"
    "\n\006period\030\004 \001(\007\022\020\n\010priority\030\005 \001(\017\022\017\n\007task"
    "_id\030\006 \001(\007\022\016\n\006cpu_id\030\007 \001(\007\022\020\n\010function\030\010 "
    "\003(\t:\006\222\?\003H\304\005\"\256\002\n\tComponent\022\014\n\004name\030\001 \001(\t\022"
    "\r\n\005ninst\030\002 \001(\007\022\017\n\007comp_id\030\004 \001(\017\022\014\n\004type\030"
    "\005 \001(\007\022\r\n\005state\030\006 \001(\007\022\023\n\013last_update\030\007 \001("
    "\007\022\022\n\nlast_bound\030\010 \001(\007\022\024\n\014last_unbound\030\t "
    "\001(\007\022\013\n\003pid\030\n \001(\007\022\014\n\004args\030\013 \001(\t\022\r\n\005timer\030"
    "\014 \001(\017\022\020\n\010userarg1\030\016 \001(\017\022\020\n\010userarg2\030\017 \001("
    "\017\022\024\n\003pin\030\020 \003(\0132\007.pb.Pin\022\030\n\005param\030\021 \003(\0132\t"
    ".pb.Param\022\021\n\tno_create\030\022 \001(\010:\006\222\?\003H\305\005\"\300\001\n"
    "\004Ring\022\014\n\004name\030\001 \001(\t\022\016\n\006handle\030\002 \001(\007\022\r\n\005o"
    "wner\030\003 \001(\017\022\016\n\006stream\030\004 \001(\010\022\016\n\006wmutex\030\005 \001"
    "(\010\022\016\n\006rmutex\030\006 \001(\010\022\021\n\trtapi_shm\030\007 \001(\010\022\016\n"
    "\006reader\030\010 \001(\017\022\016\n\006writer\030\t \001(\017\022\014\n\004size\030\n "
    "\001(\017\022\022\n\nscratchpad\030\013 \001(\017:\006\222\?\003H\306\005\"\301\001\n\006Memb"
    "er\022\035\n\005mtype\030\001 \001(\0162\016.pb.ObjectType\022\020\n\010use"
    "rarg1\030\002 \001(\017\022\017\n\007epsilon\030\003 \001(\001\022\032\n\006signal\030\004"
    " \001(\0132\n.pb.Signal\022\021\n\tgroupname\030\005 \001(\t\022\016\n\006h"
    "andle\030\006 \001(\007\022\024\n\003pin\030\007 \001(\0132\007.pb.Pin\022\030\n\005par"
    "am\030\010 \001(\0132\t.pb.Param:\006\222\?\003H\307\005\"\177\n\005Group\022\014\n\004"
    "name\030\001 \001(\t\022\016\n\006handle\030\002 \001(\007\022\020\n\010userarg1\030\004"
    " \001(\017\022\020\n\010userarg2\030\005 \001(\017\022\020\n\010refcount\030\006 \001(\017"
    "\022\032\n\006member\030\007 \003(\0132\n.pb.Member:\006\222\?\003H\310\005\"_\n\022"
    "ProtocolParameters\022\027\n\017keepalive_timer\030\001 "
    "\001(\017\022\023\n\013group_timer\030\002 \001(\017\022\023\n\013rcomp_timer\030"
    "\003 \001(\017:\006\222\?\003H\311\005\"\230\001\n\006Vtable\022\014\n\004name\030\001 \001(\t\022\017"
    "\n\007context\030\002 \001(\007\022\017\n\007comp_id\030\004 \001(\017\022\023\n\013inst"
    "ance_id\030\005 \001(\017\022\016\n\006handle\030\006 \001(\007\022\020\n\010refcoun"
    "t\030\007 \001(\017\022\017\n\007version\030\010 \001(\017\022\016\n\006vtable\030\t \001(\006"
    ":\006\222\?\003H\312\005\"a\n\004Inst\022\014\n\004name\030\001 \001(\t\022\017\n\007comp_i"
    "d\030\002 \001(\017\022\017\n\007inst_id\030\003 \001(\007\022\021\n\tinst_size\030\004 "
    "\001(\007\022\016\n\006vtable\030\005 \001(\006:\006\222\?\003H\313\005", 2747);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "object.proto", &protobuf_RegisterTypes);
  Instance::default_instance_ = new Instance();
  ServiceAnnouncement::default_instance_ = new ServiceAnnouncement();
  Originator::default_instance_ = new Originator();
  AnError::default_instance_ = new AnError();
  Pin::default_instance_ = new Pin();
  Signal::default_instance_ = new Signal();
  Param::default_instance_ = new Param();
  Function::default_instance_ = new Function();
  Thread::default_instance_ = new Thread();
  Component::default_instance_ = new Component();
  Ring::default_instance_ = new Ring();
  Member::default_instance_ = new Member();
  Group::default_instance_ = new Group();
  ProtocolParameters::default_instance_ = new ProtocolParameters();
  Vtable::default_instance_ = new Vtable();
  Inst::default_instance_ = new Inst();
  Instance::default_instance_->InitAsDefaultInstance();
  ServiceAnnouncement::default_instance_->InitAsDefaultInstance();
  Originator::default_instance_->InitAsDefaultInstance();
  AnError::default_instance_->InitAsDefaultInstance();
  Pin::default_instance_->InitAsDefaultInstance();
  Signal::default_instance_->InitAsDefaultInstance();
  Param::default_instance_->InitAsDefaultInstance();
  Function::default_instance_->InitAsDefaultInstance();
  Thread::default_instance_->InitAsDefaultInstance();
  Component::default_instance_->InitAsDefaultInstance();
  Ring::default_instance_->InitAsDefaultInstance();
  Member::default_instance_->InitAsDefaultInstance();
  Group::default_instance_->InitAsDefaultInstance();
  ProtocolParameters::default_instance_->InitAsDefaultInstance();
  Vtable::default_instance_->InitAsDefaultInstance();
  Inst::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_object_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_object_2eproto {
  StaticDescriptorInitializer_object_2eproto() {
    protobuf_AddDesc_object_2eproto();
  }
} static_descriptor_initializer_object_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int Instance::kNameFieldNumber;
const int Instance::kIdFieldNumber;
#endif  // !_MSC_VER

Instance::Instance()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.Instance)
}

void Instance::InitAsDefaultInstance() {
}

Instance::Instance(const Instance& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.Instance)
}

void Instance::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Instance::~Instance() {
  // @@protoc_insertion_point(destructor:pb.Instance)
  SharedDtor();
}

void Instance::SharedDtor() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void Instance::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Instance::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Instance_descriptor_;
}

const Instance& Instance::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_object_2eproto();
  return *default_instance_;
}

Instance* Instance::default_instance_ = NULL;

Instance* Instance::New() const {
  return new Instance;
}

void Instance::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        name_->clear();
      }
    }
    id_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Instance::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.Instance)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(21)) goto parse_id;
        break;
      }

      // optional sfixed32 id = 2;
      case 2: {
        if (tag == 21) {
         parse_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.Instance)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.Instance)
  return false;
#undef DO_
}

void Instance::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.Instance)
  // optional string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // optional sfixed32 id = 2;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteSFixed32(2, this->id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.Instance)
}

::google::protobuf::uint8* Instance::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.Instance)
  // optional string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // optional sfixed32 id = 2;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSFixed32ToArray(2, this->id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.Instance)
  return target;
}

int Instance::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional sfixed32 id = 2;
    if (has_id()) {
      total_size += 1 + 4;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Instance::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Instance* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Instance*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Instance::MergeFrom(const Instance& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_id()) {
      set_id(from.id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Instance::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Instance::CopyFrom(const Instance& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Instance::IsInitialized() const {

  return true;
}

void Instance::Swap(Instance* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(id_, other->id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Instance::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Instance_descriptor_;
  metadata.reflection = Instance_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ServiceAnnouncement::kStypeFieldNumber;
const int ServiceAnnouncement::kVersionFieldNumber;
const int ServiceAnnouncement::kInstanceFieldNumber;
const int ServiceAnnouncement::kApiFieldNumber;
const int ServiceAnnouncement::kUriFieldNumber;
const int ServiceAnnouncement::kDescriptionFieldNumber;
#endif  // !_MSC_VER

ServiceAnnouncement::ServiceAnnouncement()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.ServiceAnnouncement)
}

void ServiceAnnouncement::InitAsDefaultInstance() {
}

ServiceAnnouncement::ServiceAnnouncement(const ServiceAnnouncement& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.ServiceAnnouncement)
}

void ServiceAnnouncement::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  stype_ = 1;
  version_ = 0u;
  instance_ = 0u;
  api_ = 1;
  uri_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  description_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ServiceAnnouncement::~ServiceAnnouncement() {
  // @@protoc_insertion_point(destructor:pb.ServiceAnnouncement)
  SharedDtor();
}

void ServiceAnnouncement::SharedDtor() {
  if (uri_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete uri_;
  }
  if (description_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete description_;
  }
  if (this != default_instance_) {
  }
}

void ServiceAnnouncement::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ServiceAnnouncement::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ServiceAnnouncement_descriptor_;
}

const ServiceAnnouncement& ServiceAnnouncement::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_object_2eproto();
  return *default_instance_;
}

ServiceAnnouncement* ServiceAnnouncement::default_instance_ = NULL;

ServiceAnnouncement* ServiceAnnouncement::New() const {
  return new ServiceAnnouncement;
}

void ServiceAnnouncement::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<ServiceAnnouncement*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 63) {
    ZR_(version_, instance_);
    stype_ = 1;
    api_ = 1;
    if (has_uri()) {
      if (uri_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        uri_->clear();
      }
    }
    if (has_description()) {
      if (description_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        description_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ServiceAnnouncement::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.ServiceAnnouncement)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .pb.ServiceType stype = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::pb::ServiceType_IsValid(value)) {
            set_stype(static_cast< ::pb::ServiceType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(21)) goto parse_version;
        break;
      }

      // required fixed32 version = 2 [default = 0];
      case 2: {
        if (tag == 21) {
         parse_version:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &version_)));
          set_has_version();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(29)) goto parse_instance;
        break;
      }

      // required fixed32 instance = 3 [default = 0];
      case 3: {
        if (tag == 29) {
         parse_instance:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &instance_)));
          set_has_instance();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_uri;
        break;
      }

      // required string uri = 6;
      case 6: {
        if (tag == 50) {
         parse_uri:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_uri()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->uri().data(), this->uri().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "uri");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_description;
        break;
      }

      // optional string description = 7;
      case 7: {
        if (tag == 58) {
         parse_description:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_description()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->description().data(), this->description().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "description");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_api;
        break;
      }

      // required .pb.ServiceAPI api = 8;
      case 8: {
        if (tag == 64) {
         parse_api:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::pb::ServiceAPI_IsValid(value)) {
            set_api(static_cast< ::pb::ServiceAPI >(value));
          } else {
            mutable_unknown_fields()->AddVarint(8, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.ServiceAnnouncement)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.ServiceAnnouncement)
  return false;
#undef DO_
}

void ServiceAnnouncement::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.ServiceAnnouncement)
  // required .pb.ServiceType stype = 1;
  if (has_stype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->stype(), output);
  }

  // required fixed32 version = 2 [default = 0];
  if (has_version()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(2, this->version(), output);
  }

  // required fixed32 instance = 3 [default = 0];
  if (has_instance()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(3, this->instance(), output);
  }

  // required string uri = 6;
  if (has_uri()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->uri().data(), this->uri().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "uri");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->uri(), output);
  }

  // optional string description = 7;
  if (has_description()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->description().data(), this->description().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "description");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->description(), output);
  }

  // required .pb.ServiceAPI api = 8;
  if (has_api()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      8, this->api(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.ServiceAnnouncement)
}

::google::protobuf::uint8* ServiceAnnouncement::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.ServiceAnnouncement)
  // required .pb.ServiceType stype = 1;
  if (has_stype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->stype(), target);
  }

  // required fixed32 version = 2 [default = 0];
  if (has_version()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(2, this->version(), target);
  }

  // required fixed32 instance = 3 [default = 0];
  if (has_instance()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(3, this->instance(), target);
  }

  // required string uri = 6;
  if (has_uri()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->uri().data(), this->uri().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "uri");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->uri(), target);
  }

  // optional string description = 7;
  if (has_description()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->description().data(), this->description().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "description");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->description(), target);
  }

  // required .pb.ServiceAPI api = 8;
  if (has_api()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      8, this->api(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.ServiceAnnouncement)
  return target;
}

int ServiceAnnouncement::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .pb.ServiceType stype = 1;
    if (has_stype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->stype());
    }

    // required fixed32 version = 2 [default = 0];
    if (has_version()) {
      total_size += 1 + 4;
    }

    // required fixed32 instance = 3 [default = 0];
    if (has_instance()) {
      total_size += 1 + 4;
    }

    // required .pb.ServiceAPI api = 8;
    if (has_api()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->api());
    }

    // required string uri = 6;
    if (has_uri()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->uri());
    }

    // optional string description = 7;
    if (has_description()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->description());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ServiceAnnouncement::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ServiceAnnouncement* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ServiceAnnouncement*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ServiceAnnouncement::MergeFrom(const ServiceAnnouncement& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_stype()) {
      set_stype(from.stype());
    }
    if (from.has_version()) {
      set_version(from.version());
    }
    if (from.has_instance()) {
      set_instance(from.instance());
    }
    if (from.has_api()) {
      set_api(from.api());
    }
    if (from.has_uri()) {
      set_uri(from.uri());
    }
    if (from.has_description()) {
      set_description(from.description());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ServiceAnnouncement::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ServiceAnnouncement::CopyFrom(const ServiceAnnouncement& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ServiceAnnouncement::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;

  return true;
}

void ServiceAnnouncement::Swap(ServiceAnnouncement* other) {
  if (other != this) {
    std::swap(stype_, other->stype_);
    std::swap(version_, other->version_);
    std::swap(instance_, other->instance_);
    std::swap(api_, other->api_);
    std::swap(uri_, other->uri_);
    std::swap(description_, other->description_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ServiceAnnouncement::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ServiceAnnouncement_descriptor_;
  metadata.reflection = ServiceAnnouncement_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Originator::kOriginFieldNumber;
const int Originator::kDetailFieldNumber;
const int Originator::kNameFieldNumber;
const int Originator::kIdFieldNumber;
const int Originator::kInstanceFieldNumber;
#endif  // !_MSC_VER

Originator::Originator()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.Originator)
}

void Originator::InitAsDefaultInstance() {
  instance_ = const_cast< ::pb::Instance*>(&::pb::Instance::default_instance());
}

Originator::Originator(const Originator& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.Originator)
}

void Originator::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  origin_ = 10;
  detail_ = 10;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  id_ = 0;
  instance_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Originator::~Originator() {
  // @@protoc_insertion_point(destructor:pb.Originator)
  SharedDtor();
}

void Originator::SharedDtor() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (this != default_instance_) {
    delete instance_;
  }
}

void Originator::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Originator::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Originator_descriptor_;
}

const Originator& Originator::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_object_2eproto();
  return *default_instance_;
}

Originator* Originator::default_instance_ = NULL;

Originator* Originator::New() const {
  return new Originator;
}

void Originator::Clear() {
  if (_has_bits_[0 / 32] & 31) {
    origin_ = 10;
    detail_ = 10;
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        name_->clear();
      }
    }
    id_ = 0;
    if (has_instance()) {
      if (instance_ != NULL) instance_->::pb::Instance::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Originator::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.Originator)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .pb.OriginType origin = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::pb::OriginType_IsValid(value)) {
            set_origin(static_cast< ::pb::OriginType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_detail;
        break;
      }

      // optional .pb.OriginDetail detail = 2;
      case 2: {
        if (tag == 16) {
         parse_detail:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::pb::OriginDetail_IsValid(value)) {
            set_detail(static_cast< ::pb::OriginDetail >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_name;
        break;
      }

      // optional string name = 3;
      case 3: {
        if (tag == 26) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(37)) goto parse_id;
        break;
      }

      // optional sfixed32 id = 4;
      case 4: {
        if (tag == 37) {
         parse_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_instance;
        break;
      }

      // optional .pb.Instance instance = 5;
      case 5: {
        if (tag == 42) {
         parse_instance:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_instance()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.Originator)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.Originator)
  return false;
#undef DO_
}

void Originator::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.Originator)
  // optional .pb.OriginType origin = 1;
  if (has_origin()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->origin(), output);
  }

  // optional .pb.OriginDetail detail = 2;
  if (has_detail()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->detail(), output);
  }

  // optional string name = 3;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->name(), output);
  }

  // optional sfixed32 id = 4;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteSFixed32(4, this->id(), output);
  }

  // optional .pb.Instance instance = 5;
  if (has_instance()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->instance(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.Originator)
}

::google::protobuf::uint8* Originator::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.Originator)
  // optional .pb.OriginType origin = 1;
  if (has_origin()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->origin(), target);
  }

  // optional .pb.OriginDetail detail = 2;
  if (has_detail()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->detail(), target);
  }

  // optional string name = 3;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->name(), target);
  }

  // optional sfixed32 id = 4;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSFixed32ToArray(4, this->id(), target);
  }

  // optional .pb.Instance instance = 5;
  if (has_instance()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->instance(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.Originator)
  return target;
}

int Originator::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .pb.OriginType origin = 1;
    if (has_origin()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->origin());
    }

    // optional .pb.OriginDetail detail = 2;
    if (has_detail()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->detail());
    }

    // optional string name = 3;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional sfixed32 id = 4;
    if (has_id()) {
      total_size += 1 + 4;
    }

    // optional .pb.Instance instance = 5;
    if (has_instance()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->instance());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Originator::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Originator* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Originator*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Originator::MergeFrom(const Originator& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_origin()) {
      set_origin(from.origin());
    }
    if (from.has_detail()) {
      set_detail(from.detail());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_instance()) {
      mutable_instance()->::pb::Instance::MergeFrom(from.instance());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Originator::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Originator::CopyFrom(const Originator& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Originator::IsInitialized() const {

  return true;
}

void Originator::Swap(Originator* other) {
  if (other != this) {
    std::swap(origin_, other->origin_);
    std::swap(detail_, other->detail_);
    std::swap(name_, other->name_);
    std::swap(id_, other->id_);
    std::swap(instance_, other->instance_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Originator::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Originator_descriptor_;
  metadata.reflection = Originator_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AnError::kErrorCodeFieldNumber;
const int AnError::kSeverityFieldNumber;
const int AnError::kErrorTextFieldNumber;
const int AnError::kOriginFieldNumber;
#endif  // !_MSC_VER

AnError::AnError()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.AnError)
}

void AnError::InitAsDefaultInstance() {
  origin_ = const_cast< ::pb::Originator*>(&::pb::Originator::default_instance());
}

AnError::AnError(const AnError& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.AnError)
}

void AnError::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  error_code_ = 0;
  severity_ = 1;
  error_text_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  origin_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AnError::~AnError() {
  // @@protoc_insertion_point(destructor:pb.AnError)
  SharedDtor();
}

void AnError::SharedDtor() {
  if (error_text_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete error_text_;
  }
  if (this != default_instance_) {
    delete origin_;
  }
}

void AnError::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AnError::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AnError_descriptor_;
}

const AnError& AnError::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_object_2eproto();
  return *default_instance_;
}

AnError* AnError::default_instance_ = NULL;

AnError* AnError::New() const {
  return new AnError;
}

void AnError::Clear() {
  if (_has_bits_[0 / 32] & 15) {
    error_code_ = 0;
    severity_ = 1;
    if (has_error_text()) {
      if (error_text_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        error_text_->clear();
      }
    }
    if (has_origin()) {
      if (origin_ != NULL) origin_->::pb::Originator::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AnError::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.AnError)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required sfixed32 error_code = 1;
      case 1: {
        if (tag == 13) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED32>(
                 input, &error_code_)));
          set_has_error_code();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_severity;
        break;
      }

      // optional .pb.Severity severity = 2;
      case 2: {
        if (tag == 16) {
         parse_severity:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::pb::Severity_IsValid(value)) {
            set_severity(static_cast< ::pb::Severity >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_error_text;
        break;
      }

      // optional string error_text = 3;
      case 3: {
        if (tag == 26) {
         parse_error_text:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_error_text()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->error_text().data(), this->error_text().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "error_text");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_origin;
        break;
      }

      // optional .pb.Originator origin = 4;
      case 4: {
        if (tag == 34) {
         parse_origin:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_origin()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.AnError)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.AnError)
  return false;
#undef DO_
}

void AnError::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.AnError)
  // required sfixed32 error_code = 1;
  if (has_error_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteSFixed32(1, this->error_code(), output);
  }

  // optional .pb.Severity severity = 2;
  if (has_severity()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->severity(), output);
  }

  // optional string error_text = 3;
  if (has_error_text()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->error_text().data(), this->error_text().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "error_text");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->error_text(), output);
  }

  // optional .pb.Originator origin = 4;
  if (has_origin()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->origin(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.AnError)
}

::google::protobuf::uint8* AnError::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.AnError)
  // required sfixed32 error_code = 1;
  if (has_error_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSFixed32ToArray(1, this->error_code(), target);
  }

  // optional .pb.Severity severity = 2;
  if (has_severity()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->severity(), target);
  }

  // optional string error_text = 3;
  if (has_error_text()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->error_text().data(), this->error_text().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "error_text");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->error_text(), target);
  }

  // optional .pb.Originator origin = 4;
  if (has_origin()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->origin(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.AnError)
  return target;
}

int AnError::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required sfixed32 error_code = 1;
    if (has_error_code()) {
      total_size += 1 + 4;
    }

    // optional .pb.Severity severity = 2;
    if (has_severity()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->severity());
    }

    // optional string error_text = 3;
    if (has_error_text()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->error_text());
    }

    // optional .pb.Originator origin = 4;
    if (has_origin()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->origin());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AnError::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AnError* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AnError*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AnError::MergeFrom(const AnError& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_error_code()) {
      set_error_code(from.error_code());
    }
    if (from.has_severity()) {
      set_severity(from.severity());
    }
    if (from.has_error_text()) {
      set_error_text(from.error_text());
    }
    if (from.has_origin()) {
      mutable_origin()->::pb::Originator::MergeFrom(from.origin());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AnError::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AnError::CopyFrom(const AnError& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AnError::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void AnError::Swap(AnError* other) {
  if (other != this) {
    std::swap(error_code_, other->error_code_);
    std::swap(severity_, other->severity_);
    std::swap(error_text_, other->error_text_);
    std::swap(origin_, other->origin_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AnError::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AnError_descriptor_;
  metadata.reflection = AnError_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Pin::kTypeFieldNumber;
const int Pin::kNameFieldNumber;
const int Pin::kHandleFieldNumber;
const int Pin::kDirFieldNumber;
const int Pin::kHalbitFieldNumber;
const int Pin::kHalfloatFieldNumber;
const int Pin::kHals32FieldNumber;
const int Pin::kHalu32FieldNumber;
const int Pin::kOwnerFieldNumber;
const int Pin::kLinkedFieldNumber;
const int Pin::kOldnameFieldNumber;
const int Pin::kEpsilonFieldNumber;
const int Pin::kFlagsFieldNumber;
#endif  // !_MSC_VER

Pin::Pin()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.Pin)
}

void Pin::InitAsDefaultInstance() {
}

Pin::Pin(const Pin& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.Pin)
}

void Pin::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  type_ = 1;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  handle_ = 0u;
  dir_ = 16;
  halbit_ = false;
  halfloat_ = 0;
  hals32_ = 0;
  halu32_ = 0u;
  owner_ = 0;
  linked_ = false;
  oldname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  epsilon_ = 0;
  flags_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Pin::~Pin() {
  // @@protoc_insertion_point(destructor:pb.Pin)
  SharedDtor();
}

void Pin::SharedDtor() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (oldname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete oldname_;
  }
  if (this != default_instance_) {
  }
}

void Pin::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Pin::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Pin_descriptor_;
}

const Pin& Pin::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_object_2eproto();
  return *default_instance_;
}

Pin* Pin::default_instance_ = NULL;

Pin* Pin::New() const {
  return new Pin;
}

void Pin::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<Pin*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(hals32_, halbit_);
    type_ = 1;
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        name_->clear();
      }
    }
    handle_ = 0u;
    dir_ = 16;
    halu32_ = 0u;
  }
  if (_has_bits_[8 / 32] & 7936) {
    ZR_(owner_, epsilon_);
    linked_ = false;
    if (has_oldname()) {
      if (oldname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        oldname_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Pin::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.Pin)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .pb.ValueType type = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::pb::ValueType_IsValid(value)) {
            set_type(static_cast< ::pb::ValueType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }

      // optional string name = 2;
      case 2: {
        if (tag == 18) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(29)) goto parse_handle;
        break;
      }

      // optional fixed32 handle = 3;
      case 3: {
        if (tag == 29) {
         parse_handle:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &handle_)));
          set_has_handle();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_dir;
        break;
      }

      // optional .pb.HalPinDirection dir = 4;
      case 4: {
        if (tag == 32) {
         parse_dir:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::pb::HalPinDirection_IsValid(value)) {
            set_dir(static_cast< ::pb::HalPinDirection >(value));
          } else {
            mutable_unknown_fields()->AddVarint(4, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_halbit;
        break;
      }

      // optional bool halbit = 5;
      case 5: {
        if (tag == 40) {
         parse_halbit:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &halbit_)));
          set_has_halbit();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(49)) goto parse_halfloat;
        break;
      }

      // optional double halfloat = 6;
      case 6: {
        if (tag == 49) {
         parse_halfloat:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &halfloat_)));
          set_has_halfloat();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(61)) goto parse_hals32;
        break;
      }

      // optional sfixed32 hals32 = 7;
      case 7: {
        if (tag == 61) {
         parse_hals32:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED32>(
                 input, &hals32_)));
          set_has_hals32();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(69)) goto parse_halu32;
        break;
      }

      // optional fixed32 halu32 = 8;
      case 8: {
        if (tag == 69) {
         parse_halu32:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &halu32_)));
          set_has_halu32();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(77)) goto parse_owner;
        break;
      }

      // optional sfixed32 owner = 9;
      case 9: {
        if (tag == 77) {
         parse_owner:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED32>(
                 input, &owner_)));
          set_has_owner();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_linked;
        break;
      }

      // optional bool linked = 10;
      case 10: {
        if (tag == 80) {
         parse_linked:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &linked_)));
          set_has_linked();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(90)) goto parse_oldname;
        break;
      }

      // optional string oldname = 11;
      case 11: {
        if (tag == 90) {
         parse_oldname:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_oldname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->oldname().data(), this->oldname().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "oldname");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(97)) goto parse_epsilon;
        break;
      }

      // optional double epsilon = 12;
      case 12: {
        if (tag == 97) {
         parse_epsilon:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &epsilon_)));
          set_has_epsilon();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(109)) goto parse_flags;
        break;
      }

      // optional fixed32 flags = 13;
      case 13: {
        if (tag == 109) {
         parse_flags:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &flags_)));
          set_has_flags();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.Pin)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.Pin)
  return false;
#undef DO_
}

void Pin::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.Pin)
  // optional .pb.ValueType type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->name(), output);
  }

  // optional fixed32 handle = 3;
  if (has_handle()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(3, this->handle(), output);
  }

  // optional .pb.HalPinDirection dir = 4;
  if (has_dir()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->dir(), output);
  }

  // optional bool halbit = 5;
  if (has_halbit()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->halbit(), output);
  }

  // optional double halfloat = 6;
  if (has_halfloat()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(6, this->halfloat(), output);
  }

  // optional sfixed32 hals32 = 7;
  if (has_hals32()) {
    ::google::protobuf::internal::WireFormatLite::WriteSFixed32(7, this->hals32(), output);
  }

  // optional fixed32 halu32 = 8;
  if (has_halu32()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(8, this->halu32(), output);
  }

  // optional sfixed32 owner = 9;
  if (has_owner()) {
    ::google::protobuf::internal::WireFormatLite::WriteSFixed32(9, this->owner(), output);
  }

  // optional bool linked = 10;
  if (has_linked()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(10, this->linked(), output);
  }

  // optional string oldname = 11;
  if (has_oldname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->oldname().data(), this->oldname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "oldname");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      11, this->oldname(), output);
  }

  // optional double epsilon = 12;
  if (has_epsilon()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(12, this->epsilon(), output);
  }

  // optional fixed32 flags = 13;
  if (has_flags()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(13, this->flags(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.Pin)
}

::google::protobuf::uint8* Pin::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.Pin)
  // optional .pb.ValueType type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }

  // optional fixed32 handle = 3;
  if (has_handle()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(3, this->handle(), target);
  }

  // optional .pb.HalPinDirection dir = 4;
  if (has_dir()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->dir(), target);
  }

  // optional bool halbit = 5;
  if (has_halbit()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->halbit(), target);
  }

  // optional double halfloat = 6;
  if (has_halfloat()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(6, this->halfloat(), target);
  }

  // optional sfixed32 hals32 = 7;
  if (has_hals32()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSFixed32ToArray(7, this->hals32(), target);
  }

  // optional fixed32 halu32 = 8;
  if (has_halu32()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(8, this->halu32(), target);
  }

  // optional sfixed32 owner = 9;
  if (has_owner()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSFixed32ToArray(9, this->owner(), target);
  }

  // optional bool linked = 10;
  if (has_linked()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(10, this->linked(), target);
  }

  // optional string oldname = 11;
  if (has_oldname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->oldname().data(), this->oldname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "oldname");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        11, this->oldname(), target);
  }

  // optional double epsilon = 12;
  if (has_epsilon()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(12, this->epsilon(), target);
  }

  // optional fixed32 flags = 13;
  if (has_flags()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(13, this->flags(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.Pin)
  return target;
}

int Pin::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .pb.ValueType type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // optional string name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional fixed32 handle = 3;
    if (has_handle()) {
      total_size += 1 + 4;
    }

    // optional .pb.HalPinDirection dir = 4;
    if (has_dir()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->dir());
    }

    // optional bool halbit = 5;
    if (has_halbit()) {
      total_size += 1 + 1;
    }

    // optional double halfloat = 6;
    if (has_halfloat()) {
      total_size += 1 + 8;
    }

    // optional sfixed32 hals32 = 7;
    if (has_hals32()) {
      total_size += 1 + 4;
    }

    // optional fixed32 halu32 = 8;
    if (has_halu32()) {
      total_size += 1 + 4;
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional sfixed32 owner = 9;
    if (has_owner()) {
      total_size += 1 + 4;
    }

    // optional bool linked = 10;
    if (has_linked()) {
      total_size += 1 + 1;
    }

    // optional string oldname = 11;
    if (has_oldname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->oldname());
    }

    // optional double epsilon = 12;
    if (has_epsilon()) {
      total_size += 1 + 8;
    }

    // optional fixed32 flags = 13;
    if (has_flags()) {
      total_size += 1 + 4;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Pin::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Pin* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Pin*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Pin::MergeFrom(const Pin& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_handle()) {
      set_handle(from.handle());
    }
    if (from.has_dir()) {
      set_dir(from.dir());
    }
    if (from.has_halbit()) {
      set_halbit(from.halbit());
    }
    if (from.has_halfloat()) {
      set_halfloat(from.halfloat());
    }
    if (from.has_hals32()) {
      set_hals32(from.hals32());
    }
    if (from.has_halu32()) {
      set_halu32(from.halu32());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_owner()) {
      set_owner(from.owner());
    }
    if (from.has_linked()) {
      set_linked(from.linked());
    }
    if (from.has_oldname()) {
      set_oldname(from.oldname());
    }
    if (from.has_epsilon()) {
      set_epsilon(from.epsilon());
    }
    if (from.has_flags()) {
      set_flags(from.flags());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Pin::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Pin::CopyFrom(const Pin& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Pin::IsInitialized() const {

  return true;
}

void Pin::Swap(Pin* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(name_, other->name_);
    std::swap(handle_, other->handle_);
    std::swap(dir_, other->dir_);
    std::swap(halbit_, other->halbit_);
    std::swap(halfloat_, other->halfloat_);
    std::swap(hals32_, other->hals32_);
    std::swap(halu32_, other->halu32_);
    std::swap(owner_, other->owner_);
    std::swap(linked_, other->linked_);
    std::swap(oldname_, other->oldname_);
    std::swap(epsilon_, other->epsilon_);
    std::swap(flags_, other->flags_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Pin::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Pin_descriptor_;
  metadata.reflection = Pin_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Signal::kTypeFieldNumber;
const int Signal::kNameFieldNumber;
const int Signal::kHandleFieldNumber;
const int Signal::kHalbitFieldNumber;
const int Signal::kHalfloatFieldNumber;
const int Signal::kHals32FieldNumber;
const int Signal::kHalu32FieldNumber;
const int Signal::kStrvalFieldNumber;
const int Signal::kBlobFieldNumber;
const int Signal::kReadersFieldNumber;
const int Signal::kWritersFieldNumber;
const int Signal::kBidirsFieldNumber;
#endif  // !_MSC_VER

Signal::Signal()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.Signal)
}

void Signal::InitAsDefaultInstance() {
}

Signal::Signal(const Signal& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.Signal)
}

void Signal::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  type_ = 1;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  handle_ = 0u;
  halbit_ = false;
  halfloat_ = 0;
  hals32_ = 0;
  halu32_ = 0u;
  strval_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  blob_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  readers_ = 0u;
  writers_ = 0u;
  bidirs_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Signal::~Signal() {
  // @@protoc_insertion_point(destructor:pb.Signal)
  SharedDtor();
}

void Signal::SharedDtor() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (strval_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete strval_;
  }
  if (blob_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete blob_;
  }
  if (this != default_instance_) {
  }
}

void Signal::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Signal::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Signal_descriptor_;
}

const Signal& Signal::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_object_2eproto();
  return *default_instance_;
}

Signal* Signal::default_instance_ = NULL;

Signal* Signal::New() const {
  return new Signal;
}

void Signal::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<Signal*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(handle_, hals32_);
    type_ = 1;
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        name_->clear();
      }
    }
    halu32_ = 0u;
    if (has_strval()) {
      if (strval_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        strval_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & 3840) {
    ZR_(writers_, bidirs_);
    if (has_blob()) {
      if (blob_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        blob_->clear();
      }
    }
    readers_ = 0u;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Signal::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.Signal)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .pb.ValueType type = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::pb::ValueType_IsValid(value)) {
            set_type(static_cast< ::pb::ValueType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }

      // optional string name = 2;
      case 2: {
        if (tag == 18) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(29)) goto parse_handle;
        break;
      }

      // optional fixed32 handle = 3;
      case 3: {
        if (tag == 29) {
         parse_handle:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &handle_)));
          set_has_handle();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_halbit;
        break;
      }

      // optional bool halbit = 5;
      case 5: {
        if (tag == 40) {
         parse_halbit:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &halbit_)));
          set_has_halbit();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(49)) goto parse_halfloat;
        break;
      }

      // optional double halfloat = 6;
      case 6: {
        if (tag == 49) {
         parse_halfloat:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &halfloat_)));
          set_has_halfloat();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(61)) goto parse_hals32;
        break;
      }

      // optional sfixed32 hals32 = 7;
      case 7: {
        if (tag == 61) {
         parse_hals32:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED32>(
                 input, &hals32_)));
          set_has_hals32();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(69)) goto parse_halu32;
        break;
      }

      // optional fixed32 halu32 = 8;
      case 8: {
        if (tag == 69) {
         parse_halu32:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &halu32_)));
          set_has_halu32();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_strval;
        break;
      }

      // optional string strval = 9;
      case 9: {
        if (tag == 74) {
         parse_strval:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_strval()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->strval().data(), this->strval().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "strval");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(82)) goto parse_blob;
        break;
      }

      // optional bytes blob = 10;
      case 10: {
        if (tag == 82) {
         parse_blob:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_blob()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(93)) goto parse_readers;
        break;
      }

      // optional fixed32 readers = 11;
      case 11: {
        if (tag == 93) {
         parse_readers:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &readers_)));
          set_has_readers();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(101)) goto parse_writers;
        break;
      }

      // optional fixed32 writers = 12;
      case 12: {
        if (tag == 101) {
         parse_writers:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &writers_)));
          set_has_writers();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(109)) goto parse_bidirs;
        break;
      }

      // optional fixed32 bidirs = 13;
      case 13: {
        if (tag == 109) {
         parse_bidirs:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &bidirs_)));
          set_has_bidirs();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.Signal)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.Signal)
  return false;
#undef DO_
}

void Signal::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.Signal)
  // optional .pb.ValueType type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->name(), output);
  }

  // optional fixed32 handle = 3;
  if (has_handle()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(3, this->handle(), output);
  }

  // optional bool halbit = 5;
  if (has_halbit()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->halbit(), output);
  }

  // optional double halfloat = 6;
  if (has_halfloat()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(6, this->halfloat(), output);
  }

  // optional sfixed32 hals32 = 7;
  if (has_hals32()) {
    ::google::protobuf::internal::WireFormatLite::WriteSFixed32(7, this->hals32(), output);
  }

  // optional fixed32 halu32 = 8;
  if (has_halu32()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(8, this->halu32(), output);
  }

  // optional string strval = 9;
  if (has_strval()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->strval().data(), this->strval().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "strval");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      9, this->strval(), output);
  }

  // optional bytes blob = 10;
  if (has_blob()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      10, this->blob(), output);
  }

  // optional fixed32 readers = 11;
  if (has_readers()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(11, this->readers(), output);
  }

  // optional fixed32 writers = 12;
  if (has_writers()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(12, this->writers(), output);
  }

  // optional fixed32 bidirs = 13;
  if (has_bidirs()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(13, this->bidirs(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.Signal)
}

::google::protobuf::uint8* Signal::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.Signal)
  // optional .pb.ValueType type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }

  // optional fixed32 handle = 3;
  if (has_handle()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(3, this->handle(), target);
  }

  // optional bool halbit = 5;
  if (has_halbit()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->halbit(), target);
  }

  // optional double halfloat = 6;
  if (has_halfloat()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(6, this->halfloat(), target);
  }

  // optional sfixed32 hals32 = 7;
  if (has_hals32()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSFixed32ToArray(7, this->hals32(), target);
  }

  // optional fixed32 halu32 = 8;
  if (has_halu32()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(8, this->halu32(), target);
  }

  // optional string strval = 9;
  if (has_strval()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->strval().data(), this->strval().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "strval");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->strval(), target);
  }

  // optional bytes blob = 10;
  if (has_blob()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        10, this->blob(), target);
  }

  // optional fixed32 readers = 11;
  if (has_readers()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(11, this->readers(), target);
  }

  // optional fixed32 writers = 12;
  if (has_writers()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(12, this->writers(), target);
  }

  // optional fixed32 bidirs = 13;
  if (has_bidirs()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(13, this->bidirs(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.Signal)
  return target;
}

int Signal::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .pb.ValueType type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // optional string name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional fixed32 handle = 3;
    if (has_handle()) {
      total_size += 1 + 4;
    }

    // optional bool halbit = 5;
    if (has_halbit()) {
      total_size += 1 + 1;
    }

    // optional double halfloat = 6;
    if (has_halfloat()) {
      total_size += 1 + 8;
    }

    // optional sfixed32 hals32 = 7;
    if (has_hals32()) {
      total_size += 1 + 4;
    }

    // optional fixed32 halu32 = 8;
    if (has_halu32()) {
      total_size += 1 + 4;
    }

    // optional string strval = 9;
    if (has_strval()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->strval());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional bytes blob = 10;
    if (has_blob()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->blob());
    }

    // optional fixed32 readers = 11;
    if (has_readers()) {
      total_size += 1 + 4;
    }

    // optional fixed32 writers = 12;
    if (has_writers()) {
      total_size += 1 + 4;
    }

    // optional fixed32 bidirs = 13;
    if (has_bidirs()) {
      total_size += 1 + 4;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Signal::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Signal* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Signal*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Signal::MergeFrom(const Signal& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_handle()) {
      set_handle(from.handle());
    }
    if (from.has_halbit()) {
      set_halbit(from.halbit());
    }
    if (from.has_halfloat()) {
      set_halfloat(from.halfloat());
    }
    if (from.has_hals32()) {
      set_hals32(from.hals32());
    }
    if (from.has_halu32()) {
      set_halu32(from.halu32());
    }
    if (from.has_strval()) {
      set_strval(from.strval());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_blob()) {
      set_blob(from.blob());
    }
    if (from.has_readers()) {
      set_readers(from.readers());
    }
    if (from.has_writers()) {
      set_writers(from.writers());
    }
    if (from.has_bidirs()) {
      set_bidirs(from.bidirs());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Signal::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Signal::CopyFrom(const Signal& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Signal::IsInitialized() const {

  return true;
}

void Signal::Swap(Signal* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(name_, other->name_);
    std::swap(handle_, other->handle_);
    std::swap(halbit_, other->halbit_);
    std::swap(halfloat_, other->halfloat_);
    std::swap(hals32_, other->hals32_);
    std::swap(halu32_, other->halu32_);
    std::swap(strval_, other->strval_);
    std::swap(blob_, other->blob_);
    std::swap(readers_, other->readers_);
    std::swap(writers_, other->writers_);
    std::swap(bidirs_, other->bidirs_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Signal::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Signal_descriptor_;
  metadata.reflection = Signal_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Param::kTypeFieldNumber;
const int Param::kNameFieldNumber;
const int Param::kHandleFieldNumber;
const int Param::kHalbitFieldNumber;
const int Param::kHalfloatFieldNumber;
const int Param::kHals32FieldNumber;
const int Param::kHalu32FieldNumber;
const int Param::kStrvalFieldNumber;
const int Param::kBlobFieldNumber;
const int Param::kDirFieldNumber;
const int Param::kOldnameFieldNumber;
const int Param::kOwnerFieldNumber;
const int Param::kRuntimeFieldNumber;
const int Param::kMaytimeFieldNumber;
#endif  // !_MSC_VER

Param::Param()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.Param)
}

void Param::InitAsDefaultInstance() {
}

Param::Param(const Param& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.Param)
}

void Param::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  type_ = 1;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  handle_ = 0u;
  halbit_ = false;
  halfloat_ = 0;
  hals32_ = 0;
  halu32_ = 0u;
  strval_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  blob_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  dir_ = 64;
  oldname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  owner_ = 0;
  runtime_ = 0;
  maytime_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Param::~Param() {
  // @@protoc_insertion_point(destructor:pb.Param)
  SharedDtor();
}

void Param::SharedDtor() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (strval_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete strval_;
  }
  if (blob_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete blob_;
  }
  if (oldname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete oldname_;
  }
  if (this != default_instance_) {
  }
}

void Param::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Param::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Param_descriptor_;
}

const Param& Param::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_object_2eproto();
  return *default_instance_;
}

Param* Param::default_instance_ = NULL;

Param* Param::New() const {
  return new Param;
}

void Param::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<Param*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(handle_, hals32_);
    type_ = 1;
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        name_->clear();
      }
    }
    halu32_ = 0u;
    if (has_strval()) {
      if (strval_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        strval_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & 16128) {
    ZR_(owner_, maytime_);
    if (has_blob()) {
      if (blob_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        blob_->clear();
      }
    }
    dir_ = 64;
    if (has_oldname()) {
      if (oldname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        oldname_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Param::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.Param)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .pb.ValueType type = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::pb::ValueType_IsValid(value)) {
            set_type(static_cast< ::pb::ValueType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }

      // optional string name = 2;
      case 2: {
        if (tag == 18) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(29)) goto parse_handle;
        break;
      }

      // optional fixed32 handle = 3;
      case 3: {
        if (tag == 29) {
         parse_handle:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &handle_)));
          set_has_handle();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_halbit;
        break;
      }

      // optional bool halbit = 5;
      case 5: {
        if (tag == 40) {
         parse_halbit:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &halbit_)));
          set_has_halbit();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(49)) goto parse_halfloat;
        break;
      }

      // optional double halfloat = 6;
      case 6: {
        if (tag == 49) {
         parse_halfloat:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &halfloat_)));
          set_has_halfloat();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(61)) goto parse_hals32;
        break;
      }

      // optional sfixed32 hals32 = 7;
      case 7: {
        if (tag == 61) {
         parse_hals32:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED32>(
                 input, &hals32_)));
          set_has_hals32();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(69)) goto parse_halu32;
        break;
      }

      // optional fixed32 halu32 = 8;
      case 8: {
        if (tag == 69) {
         parse_halu32:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &halu32_)));
          set_has_halu32();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_strval;
        break;
      }

      // optional string strval = 9;
      case 9: {
        if (tag == 74) {
         parse_strval:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_strval()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->strval().data(), this->strval().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "strval");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(82)) goto parse_blob;
        break;
      }

      // optional bytes blob = 10;
      case 10: {
        if (tag == 82) {
         parse_blob:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_blob()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(88)) goto parse_dir;
        break;
      }

      // optional .pb.HalParamDirection dir = 11;
      case 11: {
        if (tag == 88) {
         parse_dir:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::pb::HalParamDirection_IsValid(value)) {
            set_dir(static_cast< ::pb::HalParamDirection >(value));
          } else {
            mutable_unknown_fields()->AddVarint(11, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(98)) goto parse_oldname;
        break;
      }

      // optional string oldname = 12;
      case 12: {
        if (tag == 98) {
         parse_oldname:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_oldname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->oldname().data(), this->oldname().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "oldname");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(109)) goto parse_owner;
        break;
      }

      // optional sfixed32 owner = 13;
      case 13: {
        if (tag == 109) {
         parse_owner:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED32>(
                 input, &owner_)));
          set_has_owner();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(117)) goto parse_runtime;
        break;
      }

      // optional sfixed32 runtime = 14;
      case 14: {
        if (tag == 117) {
         parse_runtime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED32>(
                 input, &runtime_)));
          set_has_runtime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(125)) goto parse_maytime;
        break;
      }

      // optional sfixed32 maytime = 15;
      case 15: {
        if (tag == 125) {
         parse_maytime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED32>(
                 input, &maytime_)));
          set_has_maytime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.Param)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.Param)
  return false;
#undef DO_
}

void Param::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.Param)
  // optional .pb.ValueType type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->name(), output);
  }

  // optional fixed32 handle = 3;
  if (has_handle()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(3, this->handle(), output);
  }

  // optional bool halbit = 5;
  if (has_halbit()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->halbit(), output);
  }

  // optional double halfloat = 6;
  if (has_halfloat()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(6, this->halfloat(), output);
  }

  // optional sfixed32 hals32 = 7;
  if (has_hals32()) {
    ::google::protobuf::internal::WireFormatLite::WriteSFixed32(7, this->hals32(), output);
  }

  // optional fixed32 halu32 = 8;
  if (has_halu32()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(8, this->halu32(), output);
  }

  // optional string strval = 9;
  if (has_strval()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->strval().data(), this->strval().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "strval");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      9, this->strval(), output);
  }

  // optional bytes blob = 10;
  if (has_blob()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      10, this->blob(), output);
  }

  // optional .pb.HalParamDirection dir = 11;
  if (has_dir()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      11, this->dir(), output);
  }

  // optional string oldname = 12;
  if (has_oldname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->oldname().data(), this->oldname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "oldname");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      12, this->oldname(), output);
  }

  // optional sfixed32 owner = 13;
  if (has_owner()) {
    ::google::protobuf::internal::WireFormatLite::WriteSFixed32(13, this->owner(), output);
  }

  // optional sfixed32 runtime = 14;
  if (has_runtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteSFixed32(14, this->runtime(), output);
  }

  // optional sfixed32 maytime = 15;
  if (has_maytime()) {
    ::google::protobuf::internal::WireFormatLite::WriteSFixed32(15, this->maytime(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.Param)
}

::google::protobuf::uint8* Param::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.Param)
  // optional .pb.ValueType type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }

  // optional fixed32 handle = 3;
  if (has_handle()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(3, this->handle(), target);
  }

  // optional bool halbit = 5;
  if (has_halbit()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->halbit(), target);
  }

  // optional double halfloat = 6;
  if (has_halfloat()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(6, this->halfloat(), target);
  }

  // optional sfixed32 hals32 = 7;
  if (has_hals32()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSFixed32ToArray(7, this->hals32(), target);
  }

  // optional fixed32 halu32 = 8;
  if (has_halu32()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(8, this->halu32(), target);
  }

  // optional string strval = 9;
  if (has_strval()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->strval().data(), this->strval().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "strval");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->strval(), target);
  }

  // optional bytes blob = 10;
  if (has_blob()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        10, this->blob(), target);
  }

  // optional .pb.HalParamDirection dir = 11;
  if (has_dir()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      11, this->dir(), target);
  }

  // optional string oldname = 12;
  if (has_oldname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->oldname().data(), this->oldname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "oldname");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        12, this->oldname(), target);
  }

  // optional sfixed32 owner = 13;
  if (has_owner()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSFixed32ToArray(13, this->owner(), target);
  }

  // optional sfixed32 runtime = 14;
  if (has_runtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSFixed32ToArray(14, this->runtime(), target);
  }

  // optional sfixed32 maytime = 15;
  if (has_maytime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSFixed32ToArray(15, this->maytime(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.Param)
  return target;
}

int Param::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .pb.ValueType type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // optional string name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional fixed32 handle = 3;
    if (has_handle()) {
      total_size += 1 + 4;
    }

    // optional bool halbit = 5;
    if (has_halbit()) {
      total_size += 1 + 1;
    }

    // optional double halfloat = 6;
    if (has_halfloat()) {
      total_size += 1 + 8;
    }

    // optional sfixed32 hals32 = 7;
    if (has_hals32()) {
      total_size += 1 + 4;
    }

    // optional fixed32 halu32 = 8;
    if (has_halu32()) {
      total_size += 1 + 4;
    }

    // optional string strval = 9;
    if (has_strval()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->strval());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional bytes blob = 10;
    if (has_blob()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->blob());
    }

    // optional .pb.HalParamDirection dir = 11;
    if (has_dir()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->dir());
    }

    // optional string oldname = 12;
    if (has_oldname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->oldname());
    }

    // optional sfixed32 owner = 13;
    if (has_owner()) {
      total_size += 1 + 4;
    }

    // optional sfixed32 runtime = 14;
    if (has_runtime()) {
      total_size += 1 + 4;
    }

    // optional sfixed32 maytime = 15;
    if (has_maytime()) {
      total_size += 1 + 4;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Param::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Param* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Param*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Param::MergeFrom(const Param& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_handle()) {
      set_handle(from.handle());
    }
    if (from.has_halbit()) {
      set_halbit(from.halbit());
    }
    if (from.has_halfloat()) {
      set_halfloat(from.halfloat());
    }
    if (from.has_hals32()) {
      set_hals32(from.hals32());
    }
    if (from.has_halu32()) {
      set_halu32(from.halu32());
    }
    if (from.has_strval()) {
      set_strval(from.strval());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_blob()) {
      set_blob(from.blob());
    }
    if (from.has_dir()) {
      set_dir(from.dir());
    }
    if (from.has_oldname()) {
      set_oldname(from.oldname());
    }
    if (from.has_owner()) {
      set_owner(from.owner());
    }
    if (from.has_runtime()) {
      set_runtime(from.runtime());
    }
    if (from.has_maytime()) {
      set_maytime(from.maytime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Param::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Param::CopyFrom(const Param& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Param::IsInitialized() const {

  return true;
}

void Param::Swap(Param* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(name_, other->name_);
    std::swap(handle_, other->handle_);
    std::swap(halbit_, other->halbit_);
    std::swap(halfloat_, other->halfloat_);
    std::swap(hals32_, other->hals32_);
    std::swap(halu32_, other->halu32_);
    std::swap(strval_, other->strval_);
    std::swap(blob_, other->blob_);
    std::swap(dir_, other->dir_);
    std::swap(oldname_, other->oldname_);
    std::swap(owner_, other->owner_);
    std::swap(runtime_, other->runtime_);
    std::swap(maytime_, other->maytime_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Param::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Param_descriptor_;
  metadata.reflection = Param_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Function::kNameFieldNumber;
const int Function::kHandleFieldNumber;
const int Function::kOwnerIdFieldNumber;
const int Function::kUsersFieldNumber;
const int Function::kRuntimeFieldNumber;
const int Function::kMaxtimeFieldNumber;
const int Function::kReentrantFieldNumber;
#endif  // !_MSC_VER

Function::Function()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.Function)
}

void Function::InitAsDefaultInstance() {
}

Function::Function(const Function& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.Function)
}

void Function::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  handle_ = 0u;
  owner_id_ = 0u;
  users_ = 0u;
  runtime_ = 0u;
  maxtime_ = 0u;
  reentrant_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Function::~Function() {
  // @@protoc_insertion_point(destructor:pb.Function)
  SharedDtor();
}

void Function::SharedDtor() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void Function::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Function::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Function_descriptor_;
}

const Function& Function::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_object_2eproto();
  return *default_instance_;
}

Function* Function::default_instance_ = NULL;

Function* Function::New() const {
  return new Function;
}

void Function::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<Function*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 127) {
    ZR_(handle_, reentrant_);
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        name_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Function::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.Function)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(21)) goto parse_handle;
        break;
      }

      // optional fixed32 handle = 2;
      case 2: {
        if (tag == 21) {
         parse_handle:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &handle_)));
          set_has_handle();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(29)) goto parse_owner_id;
        break;
      }

      // optional fixed32 owner_id = 3;
      case 3: {
        if (tag == 29) {
         parse_owner_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &owner_id_)));
          set_has_owner_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(37)) goto parse_users;
        break;
      }

      // optional fixed32 users = 4;
      case 4: {
        if (tag == 37) {
         parse_users:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &users_)));
          set_has_users();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(45)) goto parse_runtime;
        break;
      }

      // optional fixed32 runtime = 5;
      case 5: {
        if (tag == 45) {
         parse_runtime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &runtime_)));
          set_has_runtime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(53)) goto parse_maxtime;
        break;
      }

      // optional fixed32 maxtime = 6;
      case 6: {
        if (tag == 53) {
         parse_maxtime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &maxtime_)));
          set_has_maxtime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_reentrant;
        break;
      }

      // optional bool reentrant = 7;
      case 7: {
        if (tag == 56) {
         parse_reentrant:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &reentrant_)));
          set_has_reentrant();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.Function)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.Function)
  return false;
#undef DO_
}

void Function::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.Function)
  // optional string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // optional fixed32 handle = 2;
  if (has_handle()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(2, this->handle(), output);
  }

  // optional fixed32 owner_id = 3;
  if (has_owner_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(3, this->owner_id(), output);
  }

  // optional fixed32 users = 4;
  if (has_users()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(4, this->users(), output);
  }

  // optional fixed32 runtime = 5;
  if (has_runtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(5, this->runtime(), output);
  }

  // optional fixed32 maxtime = 6;
  if (has_maxtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(6, this->maxtime(), output);
  }

  // optional bool reentrant = 7;
  if (has_reentrant()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->reentrant(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.Function)
}

::google::protobuf::uint8* Function::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.Function)
  // optional string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // optional fixed32 handle = 2;
  if (has_handle()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(2, this->handle(), target);
  }

  // optional fixed32 owner_id = 3;
  if (has_owner_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(3, this->owner_id(), target);
  }

  // optional fixed32 users = 4;
  if (has_users()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(4, this->users(), target);
  }

  // optional fixed32 runtime = 5;
  if (has_runtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(5, this->runtime(), target);
  }

  // optional fixed32 maxtime = 6;
  if (has_maxtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(6, this->maxtime(), target);
  }

  // optional bool reentrant = 7;
  if (has_reentrant()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(7, this->reentrant(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.Function)
  return target;
}

int Function::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional fixed32 handle = 2;
    if (has_handle()) {
      total_size += 1 + 4;
    }

    // optional fixed32 owner_id = 3;
    if (has_owner_id()) {
      total_size += 1 + 4;
    }

    // optional fixed32 users = 4;
    if (has_users()) {
      total_size += 1 + 4;
    }

    // optional fixed32 runtime = 5;
    if (has_runtime()) {
      total_size += 1 + 4;
    }

    // optional fixed32 maxtime = 6;
    if (has_maxtime()) {
      total_size += 1 + 4;
    }

    // optional bool reentrant = 7;
    if (has_reentrant()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Function::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Function* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Function*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Function::MergeFrom(const Function& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_handle()) {
      set_handle(from.handle());
    }
    if (from.has_owner_id()) {
      set_owner_id(from.owner_id());
    }
    if (from.has_users()) {
      set_users(from.users());
    }
    if (from.has_runtime()) {
      set_runtime(from.runtime());
    }
    if (from.has_maxtime()) {
      set_maxtime(from.maxtime());
    }
    if (from.has_reentrant()) {
      set_reentrant(from.reentrant());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Function::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Function::CopyFrom(const Function& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Function::IsInitialized() const {

  return true;
}

void Function::Swap(Function* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(handle_, other->handle_);
    std::swap(owner_id_, other->owner_id_);
    std::swap(users_, other->users_);
    std::swap(runtime_, other->runtime_);
    std::swap(maxtime_, other->maxtime_);
    std::swap(reentrant_, other->reentrant_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Function::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Function_descriptor_;
  metadata.reflection = Function_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Thread::kNameFieldNumber;
const int Thread::kHandleFieldNumber;
const int Thread::kUsesFpFieldNumber;
const int Thread::kPeriodFieldNumber;
const int Thread::kPriorityFieldNumber;
const int Thread::kTaskIdFieldNumber;
const int Thread::kCpuIdFieldNumber;
const int Thread::kFunctionFieldNumber;
#endif  // !_MSC_VER

Thread::Thread()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.Thread)
}

void Thread::InitAsDefaultInstance() {
}

Thread::Thread(const Thread& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.Thread)
}

void Thread::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  handle_ = 0u;
  uses_fp_ = false;
  period_ = 0u;
  priority_ = 0;
  task_id_ = 0u;
  cpu_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Thread::~Thread() {
  // @@protoc_insertion_point(destructor:pb.Thread)
  SharedDtor();
}

void Thread::SharedDtor() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void Thread::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Thread::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Thread_descriptor_;
}

const Thread& Thread::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_object_2eproto();
  return *default_instance_;
}

Thread* Thread::default_instance_ = NULL;

Thread* Thread::New() const {
  return new Thread;
}

void Thread::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<Thread*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 127) {
    ZR_(handle_, cpu_id_);
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        name_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  function_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Thread::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.Thread)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(21)) goto parse_handle;
        break;
      }

      // optional fixed32 handle = 2;
      case 2: {
        if (tag == 21) {
         parse_handle:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &handle_)));
          set_has_handle();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_uses_fp;
        break;
      }

      // optional bool uses_fp = 3;
      case 3: {
        if (tag == 24) {
         parse_uses_fp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &uses_fp_)));
          set_has_uses_fp();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(37)) goto parse_period;
        break;
      }

      // optional fixed32 period = 4;
      case 4: {
        if (tag == 37) {
         parse_period:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &period_)));
          set_has_period();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(45)) goto parse_priority;
        break;
      }

      // optional sfixed32 priority = 5;
      case 5: {
        if (tag == 45) {
         parse_priority:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED32>(
                 input, &priority_)));
          set_has_priority();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(53)) goto parse_task_id;
        break;
      }

      // optional fixed32 task_id = 6;
      case 6: {
        if (tag == 53) {
         parse_task_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &task_id_)));
          set_has_task_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(61)) goto parse_cpu_id;
        break;
      }

      // optional fixed32 cpu_id = 7;
      case 7: {
        if (tag == 61) {
         parse_cpu_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &cpu_id_)));
          set_has_cpu_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_function;
        break;
      }

      // repeated string function = 8;
      case 8: {
        if (tag == 66) {
         parse_function:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_function()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->function(this->function_size() - 1).data(),
            this->function(this->function_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "function");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_function;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.Thread)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.Thread)
  return false;
#undef DO_
}

void Thread::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.Thread)
  // optional string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // optional fixed32 handle = 2;
  if (has_handle()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(2, this->handle(), output);
  }

  // optional bool uses_fp = 3;
  if (has_uses_fp()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->uses_fp(), output);
  }

  // optional fixed32 period = 4;
  if (has_period()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(4, this->period(), output);
  }

  // optional sfixed32 priority = 5;
  if (has_priority()) {
    ::google::protobuf::internal::WireFormatLite::WriteSFixed32(5, this->priority(), output);
  }

  // optional fixed32 task_id = 6;
  if (has_task_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(6, this->task_id(), output);
  }

  // optional fixed32 cpu_id = 7;
  if (has_cpu_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(7, this->cpu_id(), output);
  }

  // repeated string function = 8;
  for (int i = 0; i < this->function_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
    this->function(i).data(), this->function(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE,
    "function");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      8, this->function(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.Thread)
}

::google::protobuf::uint8* Thread::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.Thread)
  // optional string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // optional fixed32 handle = 2;
  if (has_handle()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(2, this->handle(), target);
  }

  // optional bool uses_fp = 3;
  if (has_uses_fp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->uses_fp(), target);
  }

  // optional fixed32 period = 4;
  if (has_period()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(4, this->period(), target);
  }

  // optional sfixed32 priority = 5;
  if (has_priority()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSFixed32ToArray(5, this->priority(), target);
  }

  // optional fixed32 task_id = 6;
  if (has_task_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(6, this->task_id(), target);
  }

  // optional fixed32 cpu_id = 7;
  if (has_cpu_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(7, this->cpu_id(), target);
  }

  // repeated string function = 8;
  for (int i = 0; i < this->function_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->function(i).data(), this->function(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "function");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(8, this->function(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.Thread)
  return target;
}

int Thread::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional fixed32 handle = 2;
    if (has_handle()) {
      total_size += 1 + 4;
    }

    // optional bool uses_fp = 3;
    if (has_uses_fp()) {
      total_size += 1 + 1;
    }

    // optional fixed32 period = 4;
    if (has_period()) {
      total_size += 1 + 4;
    }

    // optional sfixed32 priority = 5;
    if (has_priority()) {
      total_size += 1 + 4;
    }

    // optional fixed32 task_id = 6;
    if (has_task_id()) {
      total_size += 1 + 4;
    }

    // optional fixed32 cpu_id = 7;
    if (has_cpu_id()) {
      total_size += 1 + 4;
    }

  }
  // repeated string function = 8;
  total_size += 1 * this->function_size();
  for (int i = 0; i < this->function_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->function(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Thread::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Thread* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Thread*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Thread::MergeFrom(const Thread& from) {
  GOOGLE_CHECK_NE(&from, this);
  function_.MergeFrom(from.function_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_handle()) {
      set_handle(from.handle());
    }
    if (from.has_uses_fp()) {
      set_uses_fp(from.uses_fp());
    }
    if (from.has_period()) {
      set_period(from.period());
    }
    if (from.has_priority()) {
      set_priority(from.priority());
    }
    if (from.has_task_id()) {
      set_task_id(from.task_id());
    }
    if (from.has_cpu_id()) {
      set_cpu_id(from.cpu_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Thread::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Thread::CopyFrom(const Thread& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Thread::IsInitialized() const {

  return true;
}

void Thread::Swap(Thread* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(handle_, other->handle_);
    std::swap(uses_fp_, other->uses_fp_);
    std::swap(period_, other->period_);
    std::swap(priority_, other->priority_);
    std::swap(task_id_, other->task_id_);
    std::swap(cpu_id_, other->cpu_id_);
    function_.Swap(&other->function_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Thread::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Thread_descriptor_;
  metadata.reflection = Thread_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Component::kNameFieldNumber;
const int Component::kNinstFieldNumber;
const int Component::kCompIdFieldNumber;
const int Component::kTypeFieldNumber;
const int Component::kStateFieldNumber;
const int Component::kLastUpdateFieldNumber;
const int Component::kLastBoundFieldNumber;
const int Component::kLastUnboundFieldNumber;
const int Component::kPidFieldNumber;
const int Component::kArgsFieldNumber;
const int Component::kTimerFieldNumber;
const int Component::kUserarg1FieldNumber;
const int Component::kUserarg2FieldNumber;
const int Component::kPinFieldNumber;
const int Component::kParamFieldNumber;
const int Component::kNoCreateFieldNumber;
#endif  // !_MSC_VER

Component::Component()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.Component)
}

void Component::InitAsDefaultInstance() {
}

Component::Component(const Component& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.Component)
}

void Component::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ninst_ = 0u;
  comp_id_ = 0;
  type_ = 0u;
  state_ = 0u;
  last_update_ = 0u;
  last_bound_ = 0u;
  last_unbound_ = 0u;
  pid_ = 0u;
  args_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  timer_ = 0;
  userarg1_ = 0;
  userarg2_ = 0;
  no_create_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Component::~Component() {
  // @@protoc_insertion_point(destructor:pb.Component)
  SharedDtor();
}

void Component::SharedDtor() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (args_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete args_;
  }
  if (this != default_instance_) {
  }
}

void Component::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Component::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Component_descriptor_;
}

const Component& Component::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_object_2eproto();
  return *default_instance_;
}

Component* Component::default_instance_ = NULL;

Component* Component::New() const {
  return new Component;
}

void Component::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<Component*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(ninst_, last_unbound_);
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        name_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & 40704) {
    ZR_(timer_, userarg1_);
    ZR_(userarg2_, no_create_);
    pid_ = 0u;
    if (has_args()) {
      if (args_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        args_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  pin_.Clear();
  param_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Component::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.Component)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(21)) goto parse_ninst;
        break;
      }

      // optional fixed32 ninst = 2;
      case 2: {
        if (tag == 21) {
         parse_ninst:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &ninst_)));
          set_has_ninst();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(37)) goto parse_comp_id;
        break;
      }

      // optional sfixed32 comp_id = 4;
      case 4: {
        if (tag == 37) {
         parse_comp_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED32>(
                 input, &comp_id_)));
          set_has_comp_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(45)) goto parse_type;
        break;
      }

      // optional fixed32 type = 5;
      case 5: {
        if (tag == 45) {
         parse_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(53)) goto parse_state;
        break;
      }

      // optional fixed32 state = 6;
      case 6: {
        if (tag == 53) {
         parse_state:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &state_)));
          set_has_state();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(61)) goto parse_last_update;
        break;
      }

      // optional fixed32 last_update = 7;
      case 7: {
        if (tag == 61) {
         parse_last_update:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &last_update_)));
          set_has_last_update();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(69)) goto parse_last_bound;
        break;
      }

      // optional fixed32 last_bound = 8;
      case 8: {
        if (tag == 69) {
         parse_last_bound:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &last_bound_)));
          set_has_last_bound();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(77)) goto parse_last_unbound;
        break;
      }

      // optional fixed32 last_unbound = 9;
      case 9: {
        if (tag == 77) {
         parse_last_unbound:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &last_unbound_)));
          set_has_last_unbound();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(85)) goto parse_pid;
        break;
      }

      // optional fixed32 pid = 10;
      case 10: {
        if (tag == 85) {
         parse_pid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &pid_)));
          set_has_pid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(90)) goto parse_args;
        break;
      }

      // optional string args = 11;
      case 11: {
        if (tag == 90) {
         parse_args:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_args()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->args().data(), this->args().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "args");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(101)) goto parse_timer;
        break;
      }

      // optional sfixed32 timer = 12;
      case 12: {
        if (tag == 101) {
         parse_timer:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED32>(
                 input, &timer_)));
          set_has_timer();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(117)) goto parse_userarg1;
        break;
      }

      // optional sfixed32 userarg1 = 14;
      case 14: {
        if (tag == 117) {
         parse_userarg1:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED32>(
                 input, &userarg1_)));
          set_has_userarg1();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(125)) goto parse_userarg2;
        break;
      }

      // optional sfixed32 userarg2 = 15;
      case 15: {
        if (tag == 125) {
         parse_userarg2:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED32>(
                 input, &userarg2_)));
          set_has_userarg2();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(130)) goto parse_pin;
        break;
      }

      // repeated .pb.Pin pin = 16;
      case 16: {
        if (tag == 130) {
         parse_pin:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_pin()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(130)) goto parse_pin;
        if (input->ExpectTag(138)) goto parse_param;
        break;
      }

      // repeated .pb.Param param = 17;
      case 17: {
        if (tag == 138) {
         parse_param:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_param()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(138)) goto parse_param;
        if (input->ExpectTag(144)) goto parse_no_create;
        break;
      }

      // optional bool no_create = 18;
      case 18: {
        if (tag == 144) {
         parse_no_create:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &no_create_)));
          set_has_no_create();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.Component)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.Component)
  return false;
#undef DO_
}

void Component::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.Component)
  // optional string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // optional fixed32 ninst = 2;
  if (has_ninst()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(2, this->ninst(), output);
  }

  // optional sfixed32 comp_id = 4;
  if (has_comp_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteSFixed32(4, this->comp_id(), output);
  }

  // optional fixed32 type = 5;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(5, this->type(), output);
  }

  // optional fixed32 state = 6;
  if (has_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(6, this->state(), output);
  }

  // optional fixed32 last_update = 7;
  if (has_last_update()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(7, this->last_update(), output);
  }

  // optional fixed32 last_bound = 8;
  if (has_last_bound()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(8, this->last_bound(), output);
  }

  // optional fixed32 last_unbound = 9;
  if (has_last_unbound()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(9, this->last_unbound(), output);
  }

  // optional fixed32 pid = 10;
  if (has_pid()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(10, this->pid(), output);
  }

  // optional string args = 11;
  if (has_args()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->args().data(), this->args().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "args");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      11, this->args(), output);
  }

  // optional sfixed32 timer = 12;
  if (has_timer()) {
    ::google::protobuf::internal::WireFormatLite::WriteSFixed32(12, this->timer(), output);
  }

  // optional sfixed32 userarg1 = 14;
  if (has_userarg1()) {
    ::google::protobuf::internal::WireFormatLite::WriteSFixed32(14, this->userarg1(), output);
  }

  // optional sfixed32 userarg2 = 15;
  if (has_userarg2()) {
    ::google::protobuf::internal::WireFormatLite::WriteSFixed32(15, this->userarg2(), output);
  }

  // repeated .pb.Pin pin = 16;
  for (int i = 0; i < this->pin_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      16, this->pin(i), output);
  }

  // repeated .pb.Param param = 17;
  for (int i = 0; i < this->param_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      17, this->param(i), output);
  }

  // optional bool no_create = 18;
  if (has_no_create()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(18, this->no_create(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.Component)
}

::google::protobuf::uint8* Component::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.Component)
  // optional string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // optional fixed32 ninst = 2;
  if (has_ninst()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(2, this->ninst(), target);
  }

  // optional sfixed32 comp_id = 4;
  if (has_comp_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSFixed32ToArray(4, this->comp_id(), target);
  }

  // optional fixed32 type = 5;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(5, this->type(), target);
  }

  // optional fixed32 state = 6;
  if (has_state()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(6, this->state(), target);
  }

  // optional fixed32 last_update = 7;
  if (has_last_update()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(7, this->last_update(), target);
  }

  // optional fixed32 last_bound = 8;
  if (has_last_bound()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(8, this->last_bound(), target);
  }

  // optional fixed32 last_unbound = 9;
  if (has_last_unbound()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(9, this->last_unbound(), target);
  }

  // optional fixed32 pid = 10;
  if (has_pid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(10, this->pid(), target);
  }

  // optional string args = 11;
  if (has_args()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->args().data(), this->args().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "args");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        11, this->args(), target);
  }

  // optional sfixed32 timer = 12;
  if (has_timer()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSFixed32ToArray(12, this->timer(), target);
  }

  // optional sfixed32 userarg1 = 14;
  if (has_userarg1()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSFixed32ToArray(14, this->userarg1(), target);
  }

  // optional sfixed32 userarg2 = 15;
  if (has_userarg2()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSFixed32ToArray(15, this->userarg2(), target);
  }

  // repeated .pb.Pin pin = 16;
  for (int i = 0; i < this->pin_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        16, this->pin(i), target);
  }

  // repeated .pb.Param param = 17;
  for (int i = 0; i < this->param_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        17, this->param(i), target);
  }

  // optional bool no_create = 18;
  if (has_no_create()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(18, this->no_create(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.Component)
  return target;
}

int Component::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional fixed32 ninst = 2;
    if (has_ninst()) {
      total_size += 1 + 4;
    }

    // optional sfixed32 comp_id = 4;
    if (has_comp_id()) {
      total_size += 1 + 4;
    }

    // optional fixed32 type = 5;
    if (has_type()) {
      total_size += 1 + 4;
    }

    // optional fixed32 state = 6;
    if (has_state()) {
      total_size += 1 + 4;
    }

    // optional fixed32 last_update = 7;
    if (has_last_update()) {
      total_size += 1 + 4;
    }

    // optional fixed32 last_bound = 8;
    if (has_last_bound()) {
      total_size += 1 + 4;
    }

    // optional fixed32 last_unbound = 9;
    if (has_last_unbound()) {
      total_size += 1 + 4;
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional fixed32 pid = 10;
    if (has_pid()) {
      total_size += 1 + 4;
    }

    // optional string args = 11;
    if (has_args()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->args());
    }

    // optional sfixed32 timer = 12;
    if (has_timer()) {
      total_size += 1 + 4;
    }

    // optional sfixed32 userarg1 = 14;
    if (has_userarg1()) {
      total_size += 1 + 4;
    }

    // optional sfixed32 userarg2 = 15;
    if (has_userarg2()) {
      total_size += 1 + 4;
    }

    // optional bool no_create = 18;
    if (has_no_create()) {
      total_size += 2 + 1;
    }

  }
  // repeated .pb.Pin pin = 16;
  total_size += 2 * this->pin_size();
  for (int i = 0; i < this->pin_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->pin(i));
  }

  // repeated .pb.Param param = 17;
  total_size += 2 * this->param_size();
  for (int i = 0; i < this->param_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->param(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Component::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Component* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Component*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Component::MergeFrom(const Component& from) {
  GOOGLE_CHECK_NE(&from, this);
  pin_.MergeFrom(from.pin_);
  param_.MergeFrom(from.param_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_ninst()) {
      set_ninst(from.ninst());
    }
    if (from.has_comp_id()) {
      set_comp_id(from.comp_id());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_state()) {
      set_state(from.state());
    }
    if (from.has_last_update()) {
      set_last_update(from.last_update());
    }
    if (from.has_last_bound()) {
      set_last_bound(from.last_bound());
    }
    if (from.has_last_unbound()) {
      set_last_unbound(from.last_unbound());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_pid()) {
      set_pid(from.pid());
    }
    if (from.has_args()) {
      set_args(from.args());
    }
    if (from.has_timer()) {
      set_timer(from.timer());
    }
    if (from.has_userarg1()) {
      set_userarg1(from.userarg1());
    }
    if (from.has_userarg2()) {
      set_userarg2(from.userarg2());
    }
    if (from.has_no_create()) {
      set_no_create(from.no_create());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Component::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Component::CopyFrom(const Component& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Component::IsInitialized() const {

  return true;
}

void Component::Swap(Component* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(ninst_, other->ninst_);
    std::swap(comp_id_, other->comp_id_);
    std::swap(type_, other->type_);
    std::swap(state_, other->state_);
    std::swap(last_update_, other->last_update_);
    std::swap(last_bound_, other->last_bound_);
    std::swap(last_unbound_, other->last_unbound_);
    std::swap(pid_, other->pid_);
    std::swap(args_, other->args_);
    std::swap(timer_, other->timer_);
    std::swap(userarg1_, other->userarg1_);
    std::swap(userarg2_, other->userarg2_);
    pin_.Swap(&other->pin_);
    param_.Swap(&other->param_);
    std::swap(no_create_, other->no_create_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Component::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Component_descriptor_;
  metadata.reflection = Component_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Ring::kNameFieldNumber;
const int Ring::kHandleFieldNumber;
const int Ring::kOwnerFieldNumber;
const int Ring::kStreamFieldNumber;
const int Ring::kWmutexFieldNumber;
const int Ring::kRmutexFieldNumber;
const int Ring::kRtapiShmFieldNumber;
const int Ring::kReaderFieldNumber;
const int Ring::kWriterFieldNumber;
const int Ring::kSizeFieldNumber;
const int Ring::kScratchpadFieldNumber;
#endif  // !_MSC_VER

Ring::Ring()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.Ring)
}

void Ring::InitAsDefaultInstance() {
}

Ring::Ring(const Ring& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.Ring)
}

void Ring::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  handle_ = 0u;
  owner_ = 0;
  stream_ = false;
  wmutex_ = false;
  rmutex_ = false;
  rtapi_shm_ = false;
  reader_ = 0;
  writer_ = 0;
  size_ = 0;
  scratchpad_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Ring::~Ring() {
  // @@protoc_insertion_point(destructor:pb.Ring)
  SharedDtor();
}

void Ring::SharedDtor() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void Ring::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Ring::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Ring_descriptor_;
}

const Ring& Ring::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_object_2eproto();
  return *default_instance_;
}

Ring* Ring::default_instance_ = NULL;

Ring* Ring::New() const {
  return new Ring;
}

void Ring::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<Ring*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(handle_, reader_);
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        name_->clear();
      }
    }
  }
  ZR_(writer_, scratchpad_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Ring::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.Ring)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(21)) goto parse_handle;
        break;
      }

      // optional fixed32 handle = 2;
      case 2: {
        if (tag == 21) {
         parse_handle:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &handle_)));
          set_has_handle();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(29)) goto parse_owner;
        break;
      }

      // optional sfixed32 owner = 3;
      case 3: {
        if (tag == 29) {
         parse_owner:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED32>(
                 input, &owner_)));
          set_has_owner();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_stream;
        break;
      }

      // optional bool stream = 4;
      case 4: {
        if (tag == 32) {
         parse_stream:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &stream_)));
          set_has_stream();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_wmutex;
        break;
      }

      // optional bool wmutex = 5;
      case 5: {
        if (tag == 40) {
         parse_wmutex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &wmutex_)));
          set_has_wmutex();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_rmutex;
        break;
      }

      // optional bool rmutex = 6;
      case 6: {
        if (tag == 48) {
         parse_rmutex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &rmutex_)));
          set_has_rmutex();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_rtapi_shm;
        break;
      }

      // optional bool rtapi_shm = 7;
      case 7: {
        if (tag == 56) {
         parse_rtapi_shm:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &rtapi_shm_)));
          set_has_rtapi_shm();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(69)) goto parse_reader;
        break;
      }

      // optional sfixed32 reader = 8;
      case 8: {
        if (tag == 69) {
         parse_reader:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED32>(
                 input, &reader_)));
          set_has_reader();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(77)) goto parse_writer;
        break;
      }

      // optional sfixed32 writer = 9;
      case 9: {
        if (tag == 77) {
         parse_writer:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED32>(
                 input, &writer_)));
          set_has_writer();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(85)) goto parse_size;
        break;
      }

      // optional sfixed32 size = 10;
      case 10: {
        if (tag == 85) {
         parse_size:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED32>(
                 input, &size_)));
          set_has_size();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(93)) goto parse_scratchpad;
        break;
      }

      // optional sfixed32 scratchpad = 11;
      case 11: {
        if (tag == 93) {
         parse_scratchpad:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED32>(
                 input, &scratchpad_)));
          set_has_scratchpad();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.Ring)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.Ring)
  return false;
#undef DO_
}

void Ring::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.Ring)
  // optional string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // optional fixed32 handle = 2;
  if (has_handle()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(2, this->handle(), output);
  }

  // optional sfixed32 owner = 3;
  if (has_owner()) {
    ::google::protobuf::internal::WireFormatLite::WriteSFixed32(3, this->owner(), output);
  }

  // optional bool stream = 4;
  if (has_stream()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->stream(), output);
  }

  // optional bool wmutex = 5;
  if (has_wmutex()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->wmutex(), output);
  }

  // optional bool rmutex = 6;
  if (has_rmutex()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->rmutex(), output);
  }

  // optional bool rtapi_shm = 7;
  if (has_rtapi_shm()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->rtapi_shm(), output);
  }

  // optional sfixed32 reader = 8;
  if (has_reader()) {
    ::google::protobuf::internal::WireFormatLite::WriteSFixed32(8, this->reader(), output);
  }

  // optional sfixed32 writer = 9;
  if (has_writer()) {
    ::google::protobuf::internal::WireFormatLite::WriteSFixed32(9, this->writer(), output);
  }

  // optional sfixed32 size = 10;
  if (has_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteSFixed32(10, this->size(), output);
  }

  // optional sfixed32 scratchpad = 11;
  if (has_scratchpad()) {
    ::google::protobuf::internal::WireFormatLite::WriteSFixed32(11, this->scratchpad(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.Ring)
}

::google::protobuf::uint8* Ring::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.Ring)
  // optional string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // optional fixed32 handle = 2;
  if (has_handle()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(2, this->handle(), target);
  }

  // optional sfixed32 owner = 3;
  if (has_owner()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSFixed32ToArray(3, this->owner(), target);
  }

  // optional bool stream = 4;
  if (has_stream()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->stream(), target);
  }

  // optional bool wmutex = 5;
  if (has_wmutex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->wmutex(), target);
  }

  // optional bool rmutex = 6;
  if (has_rmutex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->rmutex(), target);
  }

  // optional bool rtapi_shm = 7;
  if (has_rtapi_shm()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(7, this->rtapi_shm(), target);
  }

  // optional sfixed32 reader = 8;
  if (has_reader()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSFixed32ToArray(8, this->reader(), target);
  }

  // optional sfixed32 writer = 9;
  if (has_writer()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSFixed32ToArray(9, this->writer(), target);
  }

  // optional sfixed32 size = 10;
  if (has_size()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSFixed32ToArray(10, this->size(), target);
  }

  // optional sfixed32 scratchpad = 11;
  if (has_scratchpad()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSFixed32ToArray(11, this->scratchpad(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.Ring)
  return target;
}

int Ring::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional fixed32 handle = 2;
    if (has_handle()) {
      total_size += 1 + 4;
    }

    // optional sfixed32 owner = 3;
    if (has_owner()) {
      total_size += 1 + 4;
    }

    // optional bool stream = 4;
    if (has_stream()) {
      total_size += 1 + 1;
    }

    // optional bool wmutex = 5;
    if (has_wmutex()) {
      total_size += 1 + 1;
    }

    // optional bool rmutex = 6;
    if (has_rmutex()) {
      total_size += 1 + 1;
    }

    // optional bool rtapi_shm = 7;
    if (has_rtapi_shm()) {
      total_size += 1 + 1;
    }

    // optional sfixed32 reader = 8;
    if (has_reader()) {
      total_size += 1 + 4;
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional sfixed32 writer = 9;
    if (has_writer()) {
      total_size += 1 + 4;
    }

    // optional sfixed32 size = 10;
    if (has_size()) {
      total_size += 1 + 4;
    }

    // optional sfixed32 scratchpad = 11;
    if (has_scratchpad()) {
      total_size += 1 + 4;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Ring::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Ring* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Ring*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Ring::MergeFrom(const Ring& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_handle()) {
      set_handle(from.handle());
    }
    if (from.has_owner()) {
      set_owner(from.owner());
    }
    if (from.has_stream()) {
      set_stream(from.stream());
    }
    if (from.has_wmutex()) {
      set_wmutex(from.wmutex());
    }
    if (from.has_rmutex()) {
      set_rmutex(from.rmutex());
    }
    if (from.has_rtapi_shm()) {
      set_rtapi_shm(from.rtapi_shm());
    }
    if (from.has_reader()) {
      set_reader(from.reader());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_writer()) {
      set_writer(from.writer());
    }
    if (from.has_size()) {
      set_size(from.size());
    }
    if (from.has_scratchpad()) {
      set_scratchpad(from.scratchpad());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Ring::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Ring::CopyFrom(const Ring& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Ring::IsInitialized() const {

  return true;
}

void Ring::Swap(Ring* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(handle_, other->handle_);
    std::swap(owner_, other->owner_);
    std::swap(stream_, other->stream_);
    std::swap(wmutex_, other->wmutex_);
    std::swap(rmutex_, other->rmutex_);
    std::swap(rtapi_shm_, other->rtapi_shm_);
    std::swap(reader_, other->reader_);
    std::swap(writer_, other->writer_);
    std::swap(size_, other->size_);
    std::swap(scratchpad_, other->scratchpad_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Ring::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Ring_descriptor_;
  metadata.reflection = Ring_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Member::kMtypeFieldNumber;
const int Member::kUserarg1FieldNumber;
const int Member::kEpsilonFieldNumber;
const int Member::kSignalFieldNumber;
const int Member::kGroupnameFieldNumber;
const int Member::kHandleFieldNumber;
const int Member::kPinFieldNumber;
const int Member::kParamFieldNumber;
#endif  // !_MSC_VER

Member::Member()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.Member)
}

void Member::InitAsDefaultInstance() {
  signal_ = const_cast< ::pb::Signal*>(&::pb::Signal::default_instance());
  pin_ = const_cast< ::pb::Pin*>(&::pb::Pin::default_instance());
  param_ = const_cast< ::pb::Param*>(&::pb::Param::default_instance());
}

Member::Member(const Member& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.Member)
}

void Member::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  mtype_ = 1;
  userarg1_ = 0;
  epsilon_ = 0;
  signal_ = NULL;
  groupname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  handle_ = 0u;
  pin_ = NULL;
  param_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Member::~Member() {
  // @@protoc_insertion_point(destructor:pb.Member)
  SharedDtor();
}

void Member::SharedDtor() {
  if (groupname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete groupname_;
  }
  if (this != default_instance_) {
    delete signal_;
    delete pin_;
    delete param_;
  }
}

void Member::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Member::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Member_descriptor_;
}

const Member& Member::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_object_2eproto();
  return *default_instance_;
}

Member* Member::default_instance_ = NULL;

Member* Member::New() const {
  return new Member;
}

void Member::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<Member*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(userarg1_, epsilon_);
    mtype_ = 1;
    if (has_signal()) {
      if (signal_ != NULL) signal_->::pb::Signal::Clear();
    }
    if (has_groupname()) {
      if (groupname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        groupname_->clear();
      }
    }
    handle_ = 0u;
    if (has_pin()) {
      if (pin_ != NULL) pin_->::pb::Pin::Clear();
    }
    if (has_param()) {
      if (param_ != NULL) param_->::pb::Param::Clear();
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Member::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.Member)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .pb.ObjectType mtype = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::pb::ObjectType_IsValid(value)) {
            set_mtype(static_cast< ::pb::ObjectType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(21)) goto parse_userarg1;
        break;
      }

      // optional sfixed32 userarg1 = 2;
      case 2: {
        if (tag == 21) {
         parse_userarg1:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED32>(
                 input, &userarg1_)));
          set_has_userarg1();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(25)) goto parse_epsilon;
        break;
      }

      // optional double epsilon = 3;
      case 3: {
        if (tag == 25) {
         parse_epsilon:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &epsilon_)));
          set_has_epsilon();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_signal;
        break;
      }

      // optional .pb.Signal signal = 4;
      case 4: {
        if (tag == 34) {
         parse_signal:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_signal()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_groupname;
        break;
      }

      // optional string groupname = 5;
      case 5: {
        if (tag == 42) {
         parse_groupname:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_groupname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->groupname().data(), this->groupname().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "groupname");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(53)) goto parse_handle;
        break;
      }

      // optional fixed32 handle = 6;
      case 6: {
        if (tag == 53) {
         parse_handle:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &handle_)));
          set_has_handle();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_pin;
        break;
      }

      // optional .pb.Pin pin = 7;
      case 7: {
        if (tag == 58) {
         parse_pin:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_pin()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_param;
        break;
      }

      // optional .pb.Param param = 8;
      case 8: {
        if (tag == 66) {
         parse_param:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_param()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.Member)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.Member)
  return false;
#undef DO_
}

void Member::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.Member)
  // optional .pb.ObjectType mtype = 1;
  if (has_mtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->mtype(), output);
  }

  // optional sfixed32 userarg1 = 2;
  if (has_userarg1()) {
    ::google::protobuf::internal::WireFormatLite::WriteSFixed32(2, this->userarg1(), output);
  }

  // optional double epsilon = 3;
  if (has_epsilon()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->epsilon(), output);
  }

  // optional .pb.Signal signal = 4;
  if (has_signal()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->signal(), output);
  }

  // optional string groupname = 5;
  if (has_groupname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->groupname().data(), this->groupname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "groupname");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->groupname(), output);
  }

  // optional fixed32 handle = 6;
  if (has_handle()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(6, this->handle(), output);
  }

  // optional .pb.Pin pin = 7;
  if (has_pin()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->pin(), output);
  }

  // optional .pb.Param param = 8;
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->param(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.Member)
}

::google::protobuf::uint8* Member::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.Member)
  // optional .pb.ObjectType mtype = 1;
  if (has_mtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->mtype(), target);
  }

  // optional sfixed32 userarg1 = 2;
  if (has_userarg1()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSFixed32ToArray(2, this->userarg1(), target);
  }

  // optional double epsilon = 3;
  if (has_epsilon()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->epsilon(), target);
  }

  // optional .pb.Signal signal = 4;
  if (has_signal()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->signal(), target);
  }

  // optional string groupname = 5;
  if (has_groupname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->groupname().data(), this->groupname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "groupname");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->groupname(), target);
  }

  // optional fixed32 handle = 6;
  if (has_handle()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(6, this->handle(), target);
  }

  // optional .pb.Pin pin = 7;
  if (has_pin()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->pin(), target);
  }

  // optional .pb.Param param = 8;
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->param(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.Member)
  return target;
}

int Member::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .pb.ObjectType mtype = 1;
    if (has_mtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->mtype());
    }

    // optional sfixed32 userarg1 = 2;
    if (has_userarg1()) {
      total_size += 1 + 4;
    }

    // optional double epsilon = 3;
    if (has_epsilon()) {
      total_size += 1 + 8;
    }

    // optional .pb.Signal signal = 4;
    if (has_signal()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->signal());
    }

    // optional string groupname = 5;
    if (has_groupname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->groupname());
    }

    // optional fixed32 handle = 6;
    if (has_handle()) {
      total_size += 1 + 4;
    }

    // optional .pb.Pin pin = 7;
    if (has_pin()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->pin());
    }

    // optional .pb.Param param = 8;
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->param());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Member::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Member* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Member*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Member::MergeFrom(const Member& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_mtype()) {
      set_mtype(from.mtype());
    }
    if (from.has_userarg1()) {
      set_userarg1(from.userarg1());
    }
    if (from.has_epsilon()) {
      set_epsilon(from.epsilon());
    }
    if (from.has_signal()) {
      mutable_signal()->::pb::Signal::MergeFrom(from.signal());
    }
    if (from.has_groupname()) {
      set_groupname(from.groupname());
    }
    if (from.has_handle()) {
      set_handle(from.handle());
    }
    if (from.has_pin()) {
      mutable_pin()->::pb::Pin::MergeFrom(from.pin());
    }
    if (from.has_param()) {
      mutable_param()->::pb::Param::MergeFrom(from.param());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Member::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Member::CopyFrom(const Member& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Member::IsInitialized() const {

  return true;
}

void Member::Swap(Member* other) {
  if (other != this) {
    std::swap(mtype_, other->mtype_);
    std::swap(userarg1_, other->userarg1_);
    std::swap(epsilon_, other->epsilon_);
    std::swap(signal_, other->signal_);
    std::swap(groupname_, other->groupname_);
    std::swap(handle_, other->handle_);
    std::swap(pin_, other->pin_);
    std::swap(param_, other->param_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Member::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Member_descriptor_;
  metadata.reflection = Member_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Group::kNameFieldNumber;
const int Group::kHandleFieldNumber;
const int Group::kUserarg1FieldNumber;
const int Group::kUserarg2FieldNumber;
const int Group::kRefcountFieldNumber;
const int Group::kMemberFieldNumber;
#endif  // !_MSC_VER

Group::Group()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.Group)
}

void Group::InitAsDefaultInstance() {
}

Group::Group(const Group& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.Group)
}

void Group::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  handle_ = 0u;
  userarg1_ = 0;
  userarg2_ = 0;
  refcount_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Group::~Group() {
  // @@protoc_insertion_point(destructor:pb.Group)
  SharedDtor();
}

void Group::SharedDtor() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void Group::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Group::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Group_descriptor_;
}

const Group& Group::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_object_2eproto();
  return *default_instance_;
}

Group* Group::default_instance_ = NULL;

Group* Group::New() const {
  return new Group;
}

void Group::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<Group*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 31) {
    ZR_(handle_, refcount_);
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        name_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  member_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Group::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.Group)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(21)) goto parse_handle;
        break;
      }

      // optional fixed32 handle = 2;
      case 2: {
        if (tag == 21) {
         parse_handle:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &handle_)));
          set_has_handle();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(37)) goto parse_userarg1;
        break;
      }

      // optional sfixed32 userarg1 = 4;
      case 4: {
        if (tag == 37) {
         parse_userarg1:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED32>(
                 input, &userarg1_)));
          set_has_userarg1();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(45)) goto parse_userarg2;
        break;
      }

      // optional sfixed32 userarg2 = 5;
      case 5: {
        if (tag == 45) {
         parse_userarg2:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED32>(
                 input, &userarg2_)));
          set_has_userarg2();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(53)) goto parse_refcount;
        break;
      }

      // optional sfixed32 refcount = 6;
      case 6: {
        if (tag == 53) {
         parse_refcount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED32>(
                 input, &refcount_)));
          set_has_refcount();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_member;
        break;
      }

      // repeated .pb.Member member = 7;
      case 7: {
        if (tag == 58) {
         parse_member:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_member()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_member;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.Group)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.Group)
  return false;
#undef DO_
}

void Group::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.Group)
  // optional string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // optional fixed32 handle = 2;
  if (has_handle()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(2, this->handle(), output);
  }

  // optional sfixed32 userarg1 = 4;
  if (has_userarg1()) {
    ::google::protobuf::internal::WireFormatLite::WriteSFixed32(4, this->userarg1(), output);
  }

  // optional sfixed32 userarg2 = 5;
  if (has_userarg2()) {
    ::google::protobuf::internal::WireFormatLite::WriteSFixed32(5, this->userarg2(), output);
  }

  // optional sfixed32 refcount = 6;
  if (has_refcount()) {
    ::google::protobuf::internal::WireFormatLite::WriteSFixed32(6, this->refcount(), output);
  }

  // repeated .pb.Member member = 7;
  for (int i = 0; i < this->member_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->member(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.Group)
}

::google::protobuf::uint8* Group::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.Group)
  // optional string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // optional fixed32 handle = 2;
  if (has_handle()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(2, this->handle(), target);
  }

  // optional sfixed32 userarg1 = 4;
  if (has_userarg1()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSFixed32ToArray(4, this->userarg1(), target);
  }

  // optional sfixed32 userarg2 = 5;
  if (has_userarg2()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSFixed32ToArray(5, this->userarg2(), target);
  }

  // optional sfixed32 refcount = 6;
  if (has_refcount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSFixed32ToArray(6, this->refcount(), target);
  }

  // repeated .pb.Member member = 7;
  for (int i = 0; i < this->member_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->member(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.Group)
  return target;
}

int Group::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional fixed32 handle = 2;
    if (has_handle()) {
      total_size += 1 + 4;
    }

    // optional sfixed32 userarg1 = 4;
    if (has_userarg1()) {
      total_size += 1 + 4;
    }

    // optional sfixed32 userarg2 = 5;
    if (has_userarg2()) {
      total_size += 1 + 4;
    }

    // optional sfixed32 refcount = 6;
    if (has_refcount()) {
      total_size += 1 + 4;
    }

  }
  // repeated .pb.Member member = 7;
  total_size += 1 * this->member_size();
  for (int i = 0; i < this->member_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->member(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Group::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Group* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Group*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Group::MergeFrom(const Group& from) {
  GOOGLE_CHECK_NE(&from, this);
  member_.MergeFrom(from.member_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_handle()) {
      set_handle(from.handle());
    }
    if (from.has_userarg1()) {
      set_userarg1(from.userarg1());
    }
    if (from.has_userarg2()) {
      set_userarg2(from.userarg2());
    }
    if (from.has_refcount()) {
      set_refcount(from.refcount());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Group::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Group::CopyFrom(const Group& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Group::IsInitialized() const {

  return true;
}

void Group::Swap(Group* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(handle_, other->handle_);
    std::swap(userarg1_, other->userarg1_);
    std::swap(userarg2_, other->userarg2_);
    std::swap(refcount_, other->refcount_);
    member_.Swap(&other->member_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Group::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Group_descriptor_;
  metadata.reflection = Group_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ProtocolParameters::kKeepaliveTimerFieldNumber;
const int ProtocolParameters::kGroupTimerFieldNumber;
const int ProtocolParameters::kRcompTimerFieldNumber;
#endif  // !_MSC_VER

ProtocolParameters::ProtocolParameters()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.ProtocolParameters)
}

void ProtocolParameters::InitAsDefaultInstance() {
}

ProtocolParameters::ProtocolParameters(const ProtocolParameters& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.ProtocolParameters)
}

void ProtocolParameters::SharedCtor() {
  _cached_size_ = 0;
  keepalive_timer_ = 0;
  group_timer_ = 0;
  rcomp_timer_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ProtocolParameters::~ProtocolParameters() {
  // @@protoc_insertion_point(destructor:pb.ProtocolParameters)
  SharedDtor();
}

void ProtocolParameters::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ProtocolParameters::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProtocolParameters::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProtocolParameters_descriptor_;
}

const ProtocolParameters& ProtocolParameters::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_object_2eproto();
  return *default_instance_;
}

ProtocolParameters* ProtocolParameters::default_instance_ = NULL;

ProtocolParameters* ProtocolParameters::New() const {
  return new ProtocolParameters;
}

void ProtocolParameters::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<ProtocolParameters*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(keepalive_timer_, rcomp_timer_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ProtocolParameters::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.ProtocolParameters)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional sfixed32 keepalive_timer = 1;
      case 1: {
        if (tag == 13) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED32>(
                 input, &keepalive_timer_)));
          set_has_keepalive_timer();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(21)) goto parse_group_timer;
        break;
      }

      // optional sfixed32 group_timer = 2;
      case 2: {
        if (tag == 21) {
         parse_group_timer:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED32>(
                 input, &group_timer_)));
          set_has_group_timer();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(29)) goto parse_rcomp_timer;
        break;
      }

      // optional sfixed32 rcomp_timer = 3;
      case 3: {
        if (tag == 29) {
         parse_rcomp_timer:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED32>(
                 input, &rcomp_timer_)));
          set_has_rcomp_timer();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.ProtocolParameters)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.ProtocolParameters)
  return false;
#undef DO_
}

void ProtocolParameters::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.ProtocolParameters)
  // optional sfixed32 keepalive_timer = 1;
  if (has_keepalive_timer()) {
    ::google::protobuf::internal::WireFormatLite::WriteSFixed32(1, this->keepalive_timer(), output);
  }

  // optional sfixed32 group_timer = 2;
  if (has_group_timer()) {
    ::google::protobuf::internal::WireFormatLite::WriteSFixed32(2, this->group_timer(), output);
  }

  // optional sfixed32 rcomp_timer = 3;
  if (has_rcomp_timer()) {
    ::google::protobuf::internal::WireFormatLite::WriteSFixed32(3, this->rcomp_timer(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.ProtocolParameters)
}

::google::protobuf::uint8* ProtocolParameters::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.ProtocolParameters)
  // optional sfixed32 keepalive_timer = 1;
  if (has_keepalive_timer()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSFixed32ToArray(1, this->keepalive_timer(), target);
  }

  // optional sfixed32 group_timer = 2;
  if (has_group_timer()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSFixed32ToArray(2, this->group_timer(), target);
  }

  // optional sfixed32 rcomp_timer = 3;
  if (has_rcomp_timer()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSFixed32ToArray(3, this->rcomp_timer(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.ProtocolParameters)
  return target;
}

int ProtocolParameters::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional sfixed32 keepalive_timer = 1;
    if (has_keepalive_timer()) {
      total_size += 1 + 4;
    }

    // optional sfixed32 group_timer = 2;
    if (has_group_timer()) {
      total_size += 1 + 4;
    }

    // optional sfixed32 rcomp_timer = 3;
    if (has_rcomp_timer()) {
      total_size += 1 + 4;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProtocolParameters::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ProtocolParameters* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ProtocolParameters*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ProtocolParameters::MergeFrom(const ProtocolParameters& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_keepalive_timer()) {
      set_keepalive_timer(from.keepalive_timer());
    }
    if (from.has_group_timer()) {
      set_group_timer(from.group_timer());
    }
    if (from.has_rcomp_timer()) {
      set_rcomp_timer(from.rcomp_timer());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ProtocolParameters::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProtocolParameters::CopyFrom(const ProtocolParameters& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProtocolParameters::IsInitialized() const {

  return true;
}

void ProtocolParameters::Swap(ProtocolParameters* other) {
  if (other != this) {
    std::swap(keepalive_timer_, other->keepalive_timer_);
    std::swap(group_timer_, other->group_timer_);
    std::swap(rcomp_timer_, other->rcomp_timer_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ProtocolParameters::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ProtocolParameters_descriptor_;
  metadata.reflection = ProtocolParameters_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Vtable::kNameFieldNumber;
const int Vtable::kContextFieldNumber;
const int Vtable::kCompIdFieldNumber;
const int Vtable::kInstanceIdFieldNumber;
const int Vtable::kHandleFieldNumber;
const int Vtable::kRefcountFieldNumber;
const int Vtable::kVersionFieldNumber;
const int Vtable::kVtableFieldNumber;
#endif  // !_MSC_VER

Vtable::Vtable()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.Vtable)
}

void Vtable::InitAsDefaultInstance() {
}

Vtable::Vtable(const Vtable& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.Vtable)
}

void Vtable::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  context_ = 0u;
  comp_id_ = 0;
  instance_id_ = 0;
  handle_ = 0u;
  refcount_ = 0;
  version_ = 0;
  vtable_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Vtable::~Vtable() {
  // @@protoc_insertion_point(destructor:pb.Vtable)
  SharedDtor();
}

void Vtable::SharedDtor() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void Vtable::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Vtable::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Vtable_descriptor_;
}

const Vtable& Vtable::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_object_2eproto();
  return *default_instance_;
}

Vtable* Vtable::default_instance_ = NULL;

Vtable* Vtable::New() const {
  return new Vtable;
}

void Vtable::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<Vtable*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(context_, vtable_);
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        name_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Vtable::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.Vtable)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(21)) goto parse_context;
        break;
      }

      // optional fixed32 context = 2;
      case 2: {
        if (tag == 21) {
         parse_context:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &context_)));
          set_has_context();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(37)) goto parse_comp_id;
        break;
      }

      // optional sfixed32 comp_id = 4;
      case 4: {
        if (tag == 37) {
         parse_comp_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED32>(
                 input, &comp_id_)));
          set_has_comp_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(45)) goto parse_instance_id;
        break;
      }

      // optional sfixed32 instance_id = 5;
      case 5: {
        if (tag == 45) {
         parse_instance_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED32>(
                 input, &instance_id_)));
          set_has_instance_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(53)) goto parse_handle;
        break;
      }

      // optional fixed32 handle = 6;
      case 6: {
        if (tag == 53) {
         parse_handle:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &handle_)));
          set_has_handle();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(61)) goto parse_refcount;
        break;
      }

      // optional sfixed32 refcount = 7;
      case 7: {
        if (tag == 61) {
         parse_refcount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED32>(
                 input, &refcount_)));
          set_has_refcount();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(69)) goto parse_version;
        break;
      }

      // optional sfixed32 version = 8;
      case 8: {
        if (tag == 69) {
         parse_version:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED32>(
                 input, &version_)));
          set_has_version();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(73)) goto parse_vtable;
        break;
      }

      // optional fixed64 vtable = 9;
      case 9: {
        if (tag == 73) {
         parse_vtable:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &vtable_)));
          set_has_vtable();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.Vtable)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.Vtable)
  return false;
#undef DO_
}

void Vtable::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.Vtable)
  // optional string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // optional fixed32 context = 2;
  if (has_context()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(2, this->context(), output);
  }

  // optional sfixed32 comp_id = 4;
  if (has_comp_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteSFixed32(4, this->comp_id(), output);
  }

  // optional sfixed32 instance_id = 5;
  if (has_instance_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteSFixed32(5, this->instance_id(), output);
  }

  // optional fixed32 handle = 6;
  if (has_handle()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(6, this->handle(), output);
  }

  // optional sfixed32 refcount = 7;
  if (has_refcount()) {
    ::google::protobuf::internal::WireFormatLite::WriteSFixed32(7, this->refcount(), output);
  }

  // optional sfixed32 version = 8;
  if (has_version()) {
    ::google::protobuf::internal::WireFormatLite::WriteSFixed32(8, this->version(), output);
  }

  // optional fixed64 vtable = 9;
  if (has_vtable()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(9, this->vtable(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.Vtable)
}

::google::protobuf::uint8* Vtable::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.Vtable)
  // optional string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // optional fixed32 context = 2;
  if (has_context()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(2, this->context(), target);
  }

  // optional sfixed32 comp_id = 4;
  if (has_comp_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSFixed32ToArray(4, this->comp_id(), target);
  }

  // optional sfixed32 instance_id = 5;
  if (has_instance_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSFixed32ToArray(5, this->instance_id(), target);
  }

  // optional fixed32 handle = 6;
  if (has_handle()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(6, this->handle(), target);
  }

  // optional sfixed32 refcount = 7;
  if (has_refcount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSFixed32ToArray(7, this->refcount(), target);
  }

  // optional sfixed32 version = 8;
  if (has_version()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSFixed32ToArray(8, this->version(), target);
  }

  // optional fixed64 vtable = 9;
  if (has_vtable()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(9, this->vtable(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.Vtable)
  return target;
}

int Vtable::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional fixed32 context = 2;
    if (has_context()) {
      total_size += 1 + 4;
    }

    // optional sfixed32 comp_id = 4;
    if (has_comp_id()) {
      total_size += 1 + 4;
    }

    // optional sfixed32 instance_id = 5;
    if (has_instance_id()) {
      total_size += 1 + 4;
    }

    // optional fixed32 handle = 6;
    if (has_handle()) {
      total_size += 1 + 4;
    }

    // optional sfixed32 refcount = 7;
    if (has_refcount()) {
      total_size += 1 + 4;
    }

    // optional sfixed32 version = 8;
    if (has_version()) {
      total_size += 1 + 4;
    }

    // optional fixed64 vtable = 9;
    if (has_vtable()) {
      total_size += 1 + 8;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Vtable::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Vtable* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Vtable*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Vtable::MergeFrom(const Vtable& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_context()) {
      set_context(from.context());
    }
    if (from.has_comp_id()) {
      set_comp_id(from.comp_id());
    }
    if (from.has_instance_id()) {
      set_instance_id(from.instance_id());
    }
    if (from.has_handle()) {
      set_handle(from.handle());
    }
    if (from.has_refcount()) {
      set_refcount(from.refcount());
    }
    if (from.has_version()) {
      set_version(from.version());
    }
    if (from.has_vtable()) {
      set_vtable(from.vtable());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Vtable::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Vtable::CopyFrom(const Vtable& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Vtable::IsInitialized() const {

  return true;
}

void Vtable::Swap(Vtable* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(context_, other->context_);
    std::swap(comp_id_, other->comp_id_);
    std::swap(instance_id_, other->instance_id_);
    std::swap(handle_, other->handle_);
    std::swap(refcount_, other->refcount_);
    std::swap(version_, other->version_);
    std::swap(vtable_, other->vtable_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Vtable::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Vtable_descriptor_;
  metadata.reflection = Vtable_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Inst::kNameFieldNumber;
const int Inst::kCompIdFieldNumber;
const int Inst::kInstIdFieldNumber;
const int Inst::kInstSizeFieldNumber;
const int Inst::kVtableFieldNumber;
#endif  // !_MSC_VER

Inst::Inst()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.Inst)
}

void Inst::InitAsDefaultInstance() {
}

Inst::Inst(const Inst& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.Inst)
}

void Inst::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  comp_id_ = 0;
  inst_id_ = 0u;
  inst_size_ = 0u;
  vtable_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Inst::~Inst() {
  // @@protoc_insertion_point(destructor:pb.Inst)
  SharedDtor();
}

void Inst::SharedDtor() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void Inst::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Inst::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Inst_descriptor_;
}

const Inst& Inst::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_object_2eproto();
  return *default_instance_;
}

Inst* Inst::default_instance_ = NULL;

Inst* Inst::New() const {
  return new Inst;
}

void Inst::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<Inst*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 31) {
    ZR_(comp_id_, inst_size_);
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        name_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Inst::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.Inst)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(21)) goto parse_comp_id;
        break;
      }

      // optional sfixed32 comp_id = 2;
      case 2: {
        if (tag == 21) {
         parse_comp_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED32>(
                 input, &comp_id_)));
          set_has_comp_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(29)) goto parse_inst_id;
        break;
      }

      // optional fixed32 inst_id = 3;
      case 3: {
        if (tag == 29) {
         parse_inst_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &inst_id_)));
          set_has_inst_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(37)) goto parse_inst_size;
        break;
      }

      // optional fixed32 inst_size = 4;
      case 4: {
        if (tag == 37) {
         parse_inst_size:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &inst_size_)));
          set_has_inst_size();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(41)) goto parse_vtable;
        break;
      }

      // optional fixed64 vtable = 5;
      case 5: {
        if (tag == 41) {
         parse_vtable:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &vtable_)));
          set_has_vtable();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.Inst)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.Inst)
  return false;
#undef DO_
}

void Inst::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.Inst)
  // optional string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // optional sfixed32 comp_id = 2;
  if (has_comp_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteSFixed32(2, this->comp_id(), output);
  }

  // optional fixed32 inst_id = 3;
  if (has_inst_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(3, this->inst_id(), output);
  }

  // optional fixed32 inst_size = 4;
  if (has_inst_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(4, this->inst_size(), output);
  }

  // optional fixed64 vtable = 5;
  if (has_vtable()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(5, this->vtable(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.Inst)
}

::google::protobuf::uint8* Inst::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.Inst)
  // optional string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // optional sfixed32 comp_id = 2;
  if (has_comp_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSFixed32ToArray(2, this->comp_id(), target);
  }

  // optional fixed32 inst_id = 3;
  if (has_inst_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(3, this->inst_id(), target);
  }

  // optional fixed32 inst_size = 4;
  if (has_inst_size()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(4, this->inst_size(), target);
  }

  // optional fixed64 vtable = 5;
  if (has_vtable()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(5, this->vtable(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.Inst)
  return target;
}

int Inst::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional sfixed32 comp_id = 2;
    if (has_comp_id()) {
      total_size += 1 + 4;
    }

    // optional fixed32 inst_id = 3;
    if (has_inst_id()) {
      total_size += 1 + 4;
    }

    // optional fixed32 inst_size = 4;
    if (has_inst_size()) {
      total_size += 1 + 4;
    }

    // optional fixed64 vtable = 5;
    if (has_vtable()) {
      total_size += 1 + 8;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Inst::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Inst* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Inst*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Inst::MergeFrom(const Inst& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_comp_id()) {
      set_comp_id(from.comp_id());
    }
    if (from.has_inst_id()) {
      set_inst_id(from.inst_id());
    }
    if (from.has_inst_size()) {
      set_inst_size(from.inst_size());
    }
    if (from.has_vtable()) {
      set_vtable(from.vtable());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Inst::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Inst::CopyFrom(const Inst& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Inst::IsInitialized() const {

  return true;
}

void Inst::Swap(Inst* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(comp_id_, other->comp_id_);
    std::swap(inst_id_, other->inst_id_);
    std::swap(inst_size_, other->inst_size_);
    std::swap(vtable_, other->vtable_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Inst::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Inst_descriptor_;
  metadata.reflection = Inst_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace pb

// @@protoc_insertion_point(global_scope)
