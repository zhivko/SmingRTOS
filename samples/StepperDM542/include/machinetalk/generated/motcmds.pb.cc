// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: motcmds.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "motcmds.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace pb {

namespace {

const ::google::protobuf::Descriptor* MotionCommand_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MotionCommand_reflection_ = NULL;
const ::google::protobuf::Descriptor* MotionStatus_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MotionStatus_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* MotionType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* cmd_code_t_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* cmd_status_t_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_motcmds_2eproto() {
  protobuf_AddDesc_motcmds_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "motcmds.proto");
  GOOGLE_CHECK(file != NULL);
  MotionCommand_descriptor_ = file->message_type(0);
  static const int MotionCommand_offsets_[42] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MotionCommand, command_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MotionCommand, commandnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MotionCommand, motor_offset_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MotionCommand, maxlimit_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MotionCommand, minlimit_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MotionCommand, pos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MotionCommand, center_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MotionCommand, normal_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MotionCommand, turn_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MotionCommand, vel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MotionCommand, ini_maxvel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MotionCommand, motion_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MotionCommand, spindlesync_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MotionCommand, acc_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MotionCommand, backlash_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MotionCommand, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MotionCommand, termcond_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MotionCommand, tolerance_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MotionCommand, axis_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MotionCommand, scale_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MotionCommand, offset_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MotionCommand, home_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MotionCommand, home_final_vel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MotionCommand, search_vel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MotionCommand, latch_vel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MotionCommand, flags_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MotionCommand, home_sequence_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MotionCommand, volatile_home_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MotionCommand, minferror_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MotionCommand, maxferror_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MotionCommand, wdwait_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MotionCommand, debug_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MotionCommand, now_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MotionCommand, out_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MotionCommand, start_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MotionCommand, end_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MotionCommand, mode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MotionCommand, comp_nominal_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MotionCommand, comp_forward_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MotionCommand, comp_reverse_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MotionCommand, probe_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MotionCommand, tool_offset_),
  };
  MotionCommand_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MotionCommand_descriptor_,
      MotionCommand::default_instance_,
      MotionCommand_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MotionCommand, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MotionCommand, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MotionCommand));
  MotionStatus_descriptor_ = file->message_type(1);
  static const int MotionStatus_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MotionStatus, commandecho_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MotionStatus, commandnumecho_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MotionStatus, commandstatus_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MotionStatus, carte_pos_fb_),
  };
  MotionStatus_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MotionStatus_descriptor_,
      MotionStatus::default_instance_,
      MotionStatus_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MotionStatus, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MotionStatus, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MotionStatus));
  MotionType_descriptor_ = file->enum_type(0);
  cmd_code_t_descriptor_ = file->enum_type(1);
  cmd_status_t_descriptor_ = file->enum_type(2);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_motcmds_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MotionCommand_descriptor_, &MotionCommand::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MotionStatus_descriptor_, &MotionStatus::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_motcmds_2eproto() {
  delete MotionCommand::default_instance_;
  delete MotionCommand_reflection_;
  delete MotionStatus::default_instance_;
  delete MotionStatus_reflection_;
}

void protobuf_AddDesc_motcmds_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::pb::protobuf_AddDesc_emcclass_2eproto();
  ::protobuf_AddDesc_nanopb_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\rmotcmds.proto\022\002pb\032\016emcclass.proto\032\014nan"
    "opb.proto\"\361\006\n\rMotionCommand\022\037\n\007command\030\n"
    " \002(\0162\016.pb.cmd_code_t\022\022\n\ncommandNum\030\024 \002(\007"
    "\022\024\n\014motor_offset\030\036 \001(\001\022\020\n\010maxLimit\030( \001(\001"
    "\022\020\n\010minLimit\0302 \001(\001\022\030\n\003pos\030< \001(\0132\013.pb.Emc"
    "Pose\022\037\n\006center\030F \001(\0132\017.pb.PmCartesian\022\037\n"
    "\006normal\030P \001(\0132\017.pb.PmCartesian\022\014\n\004turn\030Z"
    " \001(\007\022\013\n\003vel\030d \001(\001\022\022\n\nini_maxvel\030n \001(\001\022#\n"
    "\013motion_type\030x \001(\0162\016.pb.MotionType\022\024\n\013sp"
    "indlesync\030\202\001 \001(\001\022\014\n\003acc\030\214\001 \001(\001\022\021\n\010backla"
    "sh\030\226\001 \001(\001\022\013\n\002id\030\240\001 \001(\007\022\021\n\010termCond\030\252\001 \001("
    "\007\022\022\n\ttolerance\030\264\001 \001(\001\022\r\n\004axis\030\276\001 \001(\007\022\016\n\005"
    "scale\030\310\001 \001(\001\022\017\n\006offset\030\322\001 \001(\001\022\r\n\004home\030\334\001"
    " \001(\001\022\027\n\016home_final_vel\030\346\001 \001(\001\022\023\n\nsearch_"
    "vel\030\360\001 \001(\001\022\022\n\tlatch_vel\030\372\001 \001(\001\022\016\n\005flags\030"
    "\204\002 \001(\007\022\026\n\rhome_sequence\030\216\002 \001(\007\022\026\n\rvolati"
    "le_home\030\230\002 \001(\007\022\022\n\tminFerror\030\242\002 \001(\001\022\022\n\tma"
    "xFerror\030\254\002 \001(\001\022\017\n\006wdWait\030\266\002 \001(\007\022\016\n\005debug"
    "\030\300\002 \001(\007\022\014\n\003now\030\312\002 \001(\005\022\014\n\003out\030\324\002 \001(\005\022\016\n\005s"
    "tart\030\336\002 \001(\005\022\014\n\003end\030\350\002 \001(\005\022\r\n\004mode\030\362\002 \001(\005"
    "\022\025\n\014comp_nominal\030\374\002 \001(\001\022\025\n\014comp_forward\030"
    "\206\003 \001(\001\022\025\n\014comp_reverse\030\220\003 \001(\001\022\023\n\nprobe_t"
    "ype\030\232\003 \001(\005\022!\n\013tool_offset\030\244\003 \001(\0132\013.pb.Em"
    "cPose:\006\222\?\003H\330\004\"\237\001\n\014MotionStatus\022#\n\013comman"
    "dEcho\030\n \002(\0162\016.pb.cmd_code_t\022\026\n\016commandNu"
    "mEcho\030\024 \002(\007\022\'\n\rcommandStatus\030\036 \002(\0162\020.pb."
    "cmd_status_t\022!\n\014carte_pos_fb\030( \001(\0132\013.pb."
    "EmcPose:\006\222\?\003H\331\004*\334\001\n\nMotionType\022\031\n\025_EMC_M"
    "OTION_TYPE_NONE\020\000\022\035\n\031_EMC_MOTION_TYPE_TR"
    "AVERSE\020\001\022\031\n\025_EMC_MOTION_TYPE_FEED\020\002\022\030\n\024_"
    "EMC_MOTION_TYPE_ARC\020\003\022\037\n\033_EMC_MOTION_TYP"
    "E_TOOLCHANGE\020\004\022\034\n\030_EMC_MOTION_TYPE_PROBI"
    "NG\020\005\022 \n\034_EMC_MOTION_TYPE_INDEXROTARY\020\006*\373"
    "\013\n\ncmd_code_t\022\021\n\014EMCMOT_ABORT\020\240\037\022\026\n\021EMCM"
    "OT_AXIS_ABORT\020\241\037\022\022\n\rEMCMOT_ENABLE\020\242\037\022\023\n\016"
    "EMCMOT_DISABLE\020\243\037\022\034\n\027EMCMOT_ENABLE_AMPLI"
    "FIER\020\244\037\022\035\n\030EMCMOT_DISABLE_AMPLIFIER\020\245\037\022\033"
    "\n\026EMCMOT_ENABLE_WATCHDOG\020\246\037\022\034\n\027EMCMOT_DI"
    "SABLE_WATCHDOG\020\247\037\022\032\n\025EMCMOT_ACTIVATE_JOI"
    "NT\020\250\037\022\034\n\027EMCMOT_DEACTIVATE_JOINT\020\251\037\022\021\n\014E"
    "MCMOT_PAUSE\020\252\037\022\022\n\rEMCMOT_RESUME\020\253\037\022\020\n\013EM"
    "CMOT_STEP\020\254\037\022\020\n\013EMCMOT_FREE\020\255\037\022\021\n\014EMCMOT"
    "_COORD\020\256\037\022\022\n\rEMCMOT_TELEOP\020\257\037\022\031\n\024EMCMOT_"
    "SPINDLE_SCALE\020\260\037\022\025\n\020EMCMOT_SS_ENABLE\020\261\037\022"
    "\026\n\021EMCMOT_FEED_SCALE\020\262\037\022\025\n\020EMCMOT_FS_ENA"
    "BLE\020\263\037\022\025\n\020EMCMOT_FH_ENABLE\020\264\037\022\025\n\020EMCMOT_"
    "AF_ENABLE\020\265\037\022\033\n\026EMCMOT_OVERRIDE_LIMITS\020\266"
    "\037\022\020\n\013EMCMOT_HOME\020\267\037\022\022\n\rEMCMOT_UNHOME\020\270\037\022"
    "\024\n\017EMCMOT_JOG_CONT\020\271\037\022\024\n\017EMCMOT_JOG_INCR"
    "\020\272\037\022\023\n\016EMCMOT_JOG_ABS\020\273\037\022\024\n\017EMCMOT_SET_L"
    "INE\020\274\037\022\026\n\021EMCMOT_SET_CIRCLE\020\275\037\022\035\n\030EMCMOT"
    "_SET_TELEOP_VECTOR\020\276\037\022\035\n\030EMCMOT_CLEAR_PR"
    "OBE_FLAGS\020\277\037\022\021\n\014EMCMOT_PROBE\020\300\037\022\025\n\020EMCMO"
    "T_RIGID_TAP\020\301\037\022\037\n\032EMCMOT_SET_POSITION_LI"
    "MITS\020\302\037\022\030\n\023EMCMOT_SET_BACKLASH\020\303\037\022\032\n\025EMC"
    "MOT_SET_MIN_FERROR\020\304\037\022\032\n\025EMCMOT_SET_MAX_"
    "FERROR\020\305\037\022\023\n\016EMCMOT_SET_VEL\020\306\037\022\031\n\024EMCMOT"
    "_SET_VEL_LIMIT\020\307\037\022\037\n\032EMCMOT_SET_JOINT_VE"
    "L_LIMIT\020\310\037\022\037\n\032EMCMOT_SET_JOINT_ACC_LIMIT"
    "\020\311\037\022\023\n\016EMCMOT_SET_ACC\020\312\037\022\031\n\024EMCMOT_SET_T"
    "ERM_COND\020\313\037\022\030\n\023EMCMOT_SET_NUM_AXES\020\314\037\022\032\n"
    "\025EMCMOT_SET_WORLD_HOME\020\315\037\022\035\n\030EMCMOT_SET_"
    "HOMING_PARAMS\020\316\037\022\025\n\020EMCMOT_SET_DEBUG\020\317\037\022"
    "\024\n\017EMCMOT_SET_DOUT\020\320\037\022\024\n\017EMCMOT_SET_AOUT"
    "\020\321\037\022\033\n\026EMCMOT_SET_SPINDLESYNC\020\322\037\022\026\n\021EMCM"
    "OT_SPINDLE_ON\020\323\037\022\027\n\022EMCMOT_SPINDLE_OFF\020\324"
    "\037\022\034\n\027EMCMOT_SPINDLE_INCREASE\020\325\037\022\034\n\027EMCMO"
    "T_SPINDLE_DECREASE\020\326\037\022 \n\033EMCMOT_SPINDLE_"
    "BRAKE_ENGAGE\020\327\037\022!\n\034EMCMOT_SPINDLE_BRAKE_"
    "RELEASE\020\330\037\022\034\n\027EMCMOT_SET_MOTOR_OFFSET\020\331\037"
    "\022\032\n\025EMCMOT_SET_JOINT_COMP\020\332\037\022\026\n\021EMCMOT_S"
    "ET_OFFSET\020\333\037*\255\001\n\014cmd_status_t\022\025\n\021EMCMOT_"
    "COMMAND_OK\020\000\022\"\n\036EMCMOT_COMMAND_UNKNOWN_C"
    "OMMAND\020\001\022\"\n\036EMCMOT_COMMAND_INVALID_COMMA"
    "ND\020\002\022!\n\035EMCMOT_COMMAND_INVALID_PARAMS\020\003\022"
    "\033\n\027EMCMOT_COMMAND_BAD_EXEC\020\004", 3028);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "motcmds.proto", &protobuf_RegisterTypes);
  MotionCommand::default_instance_ = new MotionCommand();
  MotionStatus::default_instance_ = new MotionStatus();
  MotionCommand::default_instance_->InitAsDefaultInstance();
  MotionStatus::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_motcmds_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_motcmds_2eproto {
  StaticDescriptorInitializer_motcmds_2eproto() {
    protobuf_AddDesc_motcmds_2eproto();
  }
} static_descriptor_initializer_motcmds_2eproto_;
const ::google::protobuf::EnumDescriptor* MotionType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MotionType_descriptor_;
}
bool MotionType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* cmd_code_t_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return cmd_code_t_descriptor_;
}
bool cmd_code_t_IsValid(int value) {
  switch(value) {
    case 4000:
    case 4001:
    case 4002:
    case 4003:
    case 4004:
    case 4005:
    case 4006:
    case 4007:
    case 4008:
    case 4009:
    case 4010:
    case 4011:
    case 4012:
    case 4013:
    case 4014:
    case 4015:
    case 4016:
    case 4017:
    case 4018:
    case 4019:
    case 4020:
    case 4021:
    case 4022:
    case 4023:
    case 4024:
    case 4025:
    case 4026:
    case 4027:
    case 4028:
    case 4029:
    case 4030:
    case 4031:
    case 4032:
    case 4033:
    case 4034:
    case 4035:
    case 4036:
    case 4037:
    case 4038:
    case 4039:
    case 4040:
    case 4041:
    case 4042:
    case 4043:
    case 4044:
    case 4045:
    case 4046:
    case 4047:
    case 4048:
    case 4049:
    case 4050:
    case 4051:
    case 4052:
    case 4053:
    case 4054:
    case 4055:
    case 4056:
    case 4057:
    case 4058:
    case 4059:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* cmd_status_t_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return cmd_status_t_descriptor_;
}
bool cmd_status_t_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
const int MotionCommand::kCommandFieldNumber;
const int MotionCommand::kCommandNumFieldNumber;
const int MotionCommand::kMotorOffsetFieldNumber;
const int MotionCommand::kMaxLimitFieldNumber;
const int MotionCommand::kMinLimitFieldNumber;
const int MotionCommand::kPosFieldNumber;
const int MotionCommand::kCenterFieldNumber;
const int MotionCommand::kNormalFieldNumber;
const int MotionCommand::kTurnFieldNumber;
const int MotionCommand::kVelFieldNumber;
const int MotionCommand::kIniMaxvelFieldNumber;
const int MotionCommand::kMotionTypeFieldNumber;
const int MotionCommand::kSpindlesyncFieldNumber;
const int MotionCommand::kAccFieldNumber;
const int MotionCommand::kBacklashFieldNumber;
const int MotionCommand::kIdFieldNumber;
const int MotionCommand::kTermCondFieldNumber;
const int MotionCommand::kToleranceFieldNumber;
const int MotionCommand::kAxisFieldNumber;
const int MotionCommand::kScaleFieldNumber;
const int MotionCommand::kOffsetFieldNumber;
const int MotionCommand::kHomeFieldNumber;
const int MotionCommand::kHomeFinalVelFieldNumber;
const int MotionCommand::kSearchVelFieldNumber;
const int MotionCommand::kLatchVelFieldNumber;
const int MotionCommand::kFlagsFieldNumber;
const int MotionCommand::kHomeSequenceFieldNumber;
const int MotionCommand::kVolatileHomeFieldNumber;
const int MotionCommand::kMinFerrorFieldNumber;
const int MotionCommand::kMaxFerrorFieldNumber;
const int MotionCommand::kWdWaitFieldNumber;
const int MotionCommand::kDebugFieldNumber;
const int MotionCommand::kNowFieldNumber;
const int MotionCommand::kOutFieldNumber;
const int MotionCommand::kStartFieldNumber;
const int MotionCommand::kEndFieldNumber;
const int MotionCommand::kModeFieldNumber;
const int MotionCommand::kCompNominalFieldNumber;
const int MotionCommand::kCompForwardFieldNumber;
const int MotionCommand::kCompReverseFieldNumber;
const int MotionCommand::kProbeTypeFieldNumber;
const int MotionCommand::kToolOffsetFieldNumber;
#endif  // !_MSC_VER

MotionCommand::MotionCommand()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.MotionCommand)
}

void MotionCommand::InitAsDefaultInstance() {
  pos_ = const_cast< ::pb::EmcPose*>(&::pb::EmcPose::default_instance());
  center_ = const_cast< ::pb::PmCartesian*>(&::pb::PmCartesian::default_instance());
  normal_ = const_cast< ::pb::PmCartesian*>(&::pb::PmCartesian::default_instance());
  tool_offset_ = const_cast< ::pb::EmcPose*>(&::pb::EmcPose::default_instance());
}

MotionCommand::MotionCommand(const MotionCommand& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.MotionCommand)
}

void MotionCommand::SharedCtor() {
  _cached_size_ = 0;
  command_ = 4000;
  commandnum_ = 0u;
  motor_offset_ = 0;
  maxlimit_ = 0;
  minlimit_ = 0;
  pos_ = NULL;
  center_ = NULL;
  normal_ = NULL;
  turn_ = 0u;
  vel_ = 0;
  ini_maxvel_ = 0;
  motion_type_ = 0;
  spindlesync_ = 0;
  acc_ = 0;
  backlash_ = 0;
  id_ = 0u;
  termcond_ = 0u;
  tolerance_ = 0;
  axis_ = 0u;
  scale_ = 0;
  offset_ = 0;
  home_ = 0;
  home_final_vel_ = 0;
  search_vel_ = 0;
  latch_vel_ = 0;
  flags_ = 0u;
  home_sequence_ = 0u;
  volatile_home_ = 0u;
  minferror_ = 0;
  maxferror_ = 0;
  wdwait_ = 0u;
  debug_ = 0u;
  now_ = 0;
  out_ = 0;
  start_ = 0;
  end_ = 0;
  mode_ = 0;
  comp_nominal_ = 0;
  comp_forward_ = 0;
  comp_reverse_ = 0;
  probe_type_ = 0;
  tool_offset_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MotionCommand::~MotionCommand() {
  // @@protoc_insertion_point(destructor:pb.MotionCommand)
  SharedDtor();
}

void MotionCommand::SharedDtor() {
  if (this != default_instance_) {
    delete pos_;
    delete center_;
    delete normal_;
    delete tool_offset_;
  }
}

void MotionCommand::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MotionCommand::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MotionCommand_descriptor_;
}

const MotionCommand& MotionCommand::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_motcmds_2eproto();
  return *default_instance_;
}

MotionCommand* MotionCommand::default_instance_ = NULL;

MotionCommand* MotionCommand::New() const {
  return new MotionCommand;
}

void MotionCommand::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<MotionCommand*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(commandnum_, minlimit_);
    command_ = 4000;
    if (has_pos()) {
      if (pos_ != NULL) pos_->::pb::EmcPose::Clear();
    }
    if (has_center()) {
      if (center_ != NULL) center_->::pb::PmCartesian::Clear();
    }
    if (has_normal()) {
      if (normal_ != NULL) normal_->::pb::PmCartesian::Clear();
    }
  }
  if (_has_bits_[8 / 32] & 65280) {
    ZR_(vel_, id_);
  }
  if (_has_bits_[16 / 32] & 16711680) {
    ZR_(termcond_, axis_);
    ZR_(home_final_vel_, search_vel_);
  }
  if (_has_bits_[24 / 32] & 4278190080) {
    ZR_(latch_vel_, debug_);
    flags_ = 0u;
  }
  if (_has_bits_[32 / 32] & 255) {
    ZR_(now_, mode_);
    comp_reverse_ = 0;
  }
  if (_has_bits_[40 / 32] & 768) {
    probe_type_ = 0;
    if (has_tool_offset()) {
      if (tool_offset_ != NULL) tool_offset_->::pb::EmcPose::Clear();
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MotionCommand::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.MotionCommand)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .pb.cmd_code_t command = 10;
      case 10: {
        if (tag == 80) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::pb::cmd_code_t_IsValid(value)) {
            set_command(static_cast< ::pb::cmd_code_t >(value));
          } else {
            mutable_unknown_fields()->AddVarint(10, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(165)) goto parse_commandNum;
        break;
      }

      // required fixed32 commandNum = 20;
      case 20: {
        if (tag == 165) {
         parse_commandNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &commandnum_)));
          set_has_commandnum();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(241)) goto parse_motor_offset;
        break;
      }

      // optional double motor_offset = 30;
      case 30: {
        if (tag == 241) {
         parse_motor_offset:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &motor_offset_)));
          set_has_motor_offset();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(321)) goto parse_maxLimit;
        break;
      }

      // optional double maxLimit = 40;
      case 40: {
        if (tag == 321) {
         parse_maxLimit:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &maxlimit_)));
          set_has_maxlimit();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(401)) goto parse_minLimit;
        break;
      }

      // optional double minLimit = 50;
      case 50: {
        if (tag == 401) {
         parse_minLimit:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &minlimit_)));
          set_has_minlimit();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(482)) goto parse_pos;
        break;
      }

      // optional .pb.EmcPose pos = 60;
      case 60: {
        if (tag == 482) {
         parse_pos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_pos()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(562)) goto parse_center;
        break;
      }

      // optional .pb.PmCartesian center = 70;
      case 70: {
        if (tag == 562) {
         parse_center:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_center()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(642)) goto parse_normal;
        break;
      }

      // optional .pb.PmCartesian normal = 80;
      case 80: {
        if (tag == 642) {
         parse_normal:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_normal()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(725)) goto parse_turn;
        break;
      }

      // optional fixed32 turn = 90;
      case 90: {
        if (tag == 725) {
         parse_turn:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &turn_)));
          set_has_turn();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(801)) goto parse_vel;
        break;
      }

      // optional double vel = 100;
      case 100: {
        if (tag == 801) {
         parse_vel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &vel_)));
          set_has_vel();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(881)) goto parse_ini_maxvel;
        break;
      }

      // optional double ini_maxvel = 110;
      case 110: {
        if (tag == 881) {
         parse_ini_maxvel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &ini_maxvel_)));
          set_has_ini_maxvel();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(960)) goto parse_motion_type;
        break;
      }

      // optional .pb.MotionType motion_type = 120;
      case 120: {
        if (tag == 960) {
         parse_motion_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::pb::MotionType_IsValid(value)) {
            set_motion_type(static_cast< ::pb::MotionType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(120, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(1041)) goto parse_spindlesync;
        break;
      }

      // optional double spindlesync = 130;
      case 130: {
        if (tag == 1041) {
         parse_spindlesync:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &spindlesync_)));
          set_has_spindlesync();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(1121)) goto parse_acc;
        break;
      }

      // optional double acc = 140;
      case 140: {
        if (tag == 1121) {
         parse_acc:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &acc_)));
          set_has_acc();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(1201)) goto parse_backlash;
        break;
      }

      // optional double backlash = 150;
      case 150: {
        if (tag == 1201) {
         parse_backlash:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &backlash_)));
          set_has_backlash();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(1285)) goto parse_id;
        break;
      }

      // optional fixed32 id = 160;
      case 160: {
        if (tag == 1285) {
         parse_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(1365)) goto parse_termCond;
        break;
      }

      // optional fixed32 termCond = 170;
      case 170: {
        if (tag == 1365) {
         parse_termCond:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &termcond_)));
          set_has_termcond();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(1441)) goto parse_tolerance;
        break;
      }

      // optional double tolerance = 180;
      case 180: {
        if (tag == 1441) {
         parse_tolerance:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &tolerance_)));
          set_has_tolerance();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(1525)) goto parse_axis;
        break;
      }

      // optional fixed32 axis = 190;
      case 190: {
        if (tag == 1525) {
         parse_axis:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &axis_)));
          set_has_axis();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(1601)) goto parse_scale;
        break;
      }

      // optional double scale = 200;
      case 200: {
        if (tag == 1601) {
         parse_scale:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &scale_)));
          set_has_scale();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(1681)) goto parse_offset;
        break;
      }

      // optional double offset = 210;
      case 210: {
        if (tag == 1681) {
         parse_offset:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &offset_)));
          set_has_offset();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(1761)) goto parse_home;
        break;
      }

      // optional double home = 220;
      case 220: {
        if (tag == 1761) {
         parse_home:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &home_)));
          set_has_home();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(1841)) goto parse_home_final_vel;
        break;
      }

      // optional double home_final_vel = 230;
      case 230: {
        if (tag == 1841) {
         parse_home_final_vel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &home_final_vel_)));
          set_has_home_final_vel();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(1921)) goto parse_search_vel;
        break;
      }

      // optional double search_vel = 240;
      case 240: {
        if (tag == 1921) {
         parse_search_vel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &search_vel_)));
          set_has_search_vel();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(2001)) goto parse_latch_vel;
        break;
      }

      // optional double latch_vel = 250;
      case 250: {
        if (tag == 2001) {
         parse_latch_vel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &latch_vel_)));
          set_has_latch_vel();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(2085)) goto parse_flags;
        break;
      }

      // optional fixed32 flags = 260;
      case 260: {
        if (tag == 2085) {
         parse_flags:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &flags_)));
          set_has_flags();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(2165)) goto parse_home_sequence;
        break;
      }

      // optional fixed32 home_sequence = 270;
      case 270: {
        if (tag == 2165) {
         parse_home_sequence:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &home_sequence_)));
          set_has_home_sequence();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(2245)) goto parse_volatile_home;
        break;
      }

      // optional fixed32 volatile_home = 280;
      case 280: {
        if (tag == 2245) {
         parse_volatile_home:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &volatile_home_)));
          set_has_volatile_home();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(2321)) goto parse_minFerror;
        break;
      }

      // optional double minFerror = 290;
      case 290: {
        if (tag == 2321) {
         parse_minFerror:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &minferror_)));
          set_has_minferror();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(2401)) goto parse_maxFerror;
        break;
      }

      // optional double maxFerror = 300;
      case 300: {
        if (tag == 2401) {
         parse_maxFerror:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &maxferror_)));
          set_has_maxferror();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(2485)) goto parse_wdWait;
        break;
      }

      // optional fixed32 wdWait = 310;
      case 310: {
        if (tag == 2485) {
         parse_wdWait:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &wdwait_)));
          set_has_wdwait();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(2565)) goto parse_debug;
        break;
      }

      // optional fixed32 debug = 320;
      case 320: {
        if (tag == 2565) {
         parse_debug:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &debug_)));
          set_has_debug();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(2640)) goto parse_now;
        break;
      }

      // optional int32 now = 330;
      case 330: {
        if (tag == 2640) {
         parse_now:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &now_)));
          set_has_now();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(2720)) goto parse_out;
        break;
      }

      // optional int32 out = 340;
      case 340: {
        if (tag == 2720) {
         parse_out:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &out_)));
          set_has_out();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(2800)) goto parse_start;
        break;
      }

      // optional int32 start = 350;
      case 350: {
        if (tag == 2800) {
         parse_start:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &start_)));
          set_has_start();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(2880)) goto parse_end;
        break;
      }

      // optional int32 end = 360;
      case 360: {
        if (tag == 2880) {
         parse_end:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &end_)));
          set_has_end();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(2960)) goto parse_mode;
        break;
      }

      // optional int32 mode = 370;
      case 370: {
        if (tag == 2960) {
         parse_mode:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &mode_)));
          set_has_mode();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(3041)) goto parse_comp_nominal;
        break;
      }

      // optional double comp_nominal = 380;
      case 380: {
        if (tag == 3041) {
         parse_comp_nominal:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &comp_nominal_)));
          set_has_comp_nominal();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(3121)) goto parse_comp_forward;
        break;
      }

      // optional double comp_forward = 390;
      case 390: {
        if (tag == 3121) {
         parse_comp_forward:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &comp_forward_)));
          set_has_comp_forward();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(3201)) goto parse_comp_reverse;
        break;
      }

      // optional double comp_reverse = 400;
      case 400: {
        if (tag == 3201) {
         parse_comp_reverse:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &comp_reverse_)));
          set_has_comp_reverse();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(3280)) goto parse_probe_type;
        break;
      }

      // optional int32 probe_type = 410;
      case 410: {
        if (tag == 3280) {
         parse_probe_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &probe_type_)));
          set_has_probe_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(3362)) goto parse_tool_offset;
        break;
      }

      // optional .pb.EmcPose tool_offset = 420;
      case 420: {
        if (tag == 3362) {
         parse_tool_offset:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_tool_offset()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.MotionCommand)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.MotionCommand)
  return false;
#undef DO_
}

void MotionCommand::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.MotionCommand)
  // required .pb.cmd_code_t command = 10;
  if (has_command()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      10, this->command(), output);
  }

  // required fixed32 commandNum = 20;
  if (has_commandnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(20, this->commandnum(), output);
  }

  // optional double motor_offset = 30;
  if (has_motor_offset()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(30, this->motor_offset(), output);
  }

  // optional double maxLimit = 40;
  if (has_maxlimit()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(40, this->maxlimit(), output);
  }

  // optional double minLimit = 50;
  if (has_minlimit()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(50, this->minlimit(), output);
  }

  // optional .pb.EmcPose pos = 60;
  if (has_pos()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      60, this->pos(), output);
  }

  // optional .pb.PmCartesian center = 70;
  if (has_center()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      70, this->center(), output);
  }

  // optional .pb.PmCartesian normal = 80;
  if (has_normal()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      80, this->normal(), output);
  }

  // optional fixed32 turn = 90;
  if (has_turn()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(90, this->turn(), output);
  }

  // optional double vel = 100;
  if (has_vel()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(100, this->vel(), output);
  }

  // optional double ini_maxvel = 110;
  if (has_ini_maxvel()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(110, this->ini_maxvel(), output);
  }

  // optional .pb.MotionType motion_type = 120;
  if (has_motion_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      120, this->motion_type(), output);
  }

  // optional double spindlesync = 130;
  if (has_spindlesync()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(130, this->spindlesync(), output);
  }

  // optional double acc = 140;
  if (has_acc()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(140, this->acc(), output);
  }

  // optional double backlash = 150;
  if (has_backlash()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(150, this->backlash(), output);
  }

  // optional fixed32 id = 160;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(160, this->id(), output);
  }

  // optional fixed32 termCond = 170;
  if (has_termcond()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(170, this->termcond(), output);
  }

  // optional double tolerance = 180;
  if (has_tolerance()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(180, this->tolerance(), output);
  }

  // optional fixed32 axis = 190;
  if (has_axis()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(190, this->axis(), output);
  }

  // optional double scale = 200;
  if (has_scale()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(200, this->scale(), output);
  }

  // optional double offset = 210;
  if (has_offset()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(210, this->offset(), output);
  }

  // optional double home = 220;
  if (has_home()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(220, this->home(), output);
  }

  // optional double home_final_vel = 230;
  if (has_home_final_vel()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(230, this->home_final_vel(), output);
  }

  // optional double search_vel = 240;
  if (has_search_vel()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(240, this->search_vel(), output);
  }

  // optional double latch_vel = 250;
  if (has_latch_vel()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(250, this->latch_vel(), output);
  }

  // optional fixed32 flags = 260;
  if (has_flags()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(260, this->flags(), output);
  }

  // optional fixed32 home_sequence = 270;
  if (has_home_sequence()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(270, this->home_sequence(), output);
  }

  // optional fixed32 volatile_home = 280;
  if (has_volatile_home()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(280, this->volatile_home(), output);
  }

  // optional double minFerror = 290;
  if (has_minferror()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(290, this->minferror(), output);
  }

  // optional double maxFerror = 300;
  if (has_maxferror()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(300, this->maxferror(), output);
  }

  // optional fixed32 wdWait = 310;
  if (has_wdwait()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(310, this->wdwait(), output);
  }

  // optional fixed32 debug = 320;
  if (has_debug()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(320, this->debug(), output);
  }

  // optional int32 now = 330;
  if (has_now()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(330, this->now(), output);
  }

  // optional int32 out = 340;
  if (has_out()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(340, this->out(), output);
  }

  // optional int32 start = 350;
  if (has_start()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(350, this->start(), output);
  }

  // optional int32 end = 360;
  if (has_end()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(360, this->end(), output);
  }

  // optional int32 mode = 370;
  if (has_mode()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(370, this->mode(), output);
  }

  // optional double comp_nominal = 380;
  if (has_comp_nominal()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(380, this->comp_nominal(), output);
  }

  // optional double comp_forward = 390;
  if (has_comp_forward()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(390, this->comp_forward(), output);
  }

  // optional double comp_reverse = 400;
  if (has_comp_reverse()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(400, this->comp_reverse(), output);
  }

  // optional int32 probe_type = 410;
  if (has_probe_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(410, this->probe_type(), output);
  }

  // optional .pb.EmcPose tool_offset = 420;
  if (has_tool_offset()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      420, this->tool_offset(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.MotionCommand)
}

::google::protobuf::uint8* MotionCommand::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.MotionCommand)
  // required .pb.cmd_code_t command = 10;
  if (has_command()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      10, this->command(), target);
  }

  // required fixed32 commandNum = 20;
  if (has_commandnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(20, this->commandnum(), target);
  }

  // optional double motor_offset = 30;
  if (has_motor_offset()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(30, this->motor_offset(), target);
  }

  // optional double maxLimit = 40;
  if (has_maxlimit()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(40, this->maxlimit(), target);
  }

  // optional double minLimit = 50;
  if (has_minlimit()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(50, this->minlimit(), target);
  }

  // optional .pb.EmcPose pos = 60;
  if (has_pos()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        60, this->pos(), target);
  }

  // optional .pb.PmCartesian center = 70;
  if (has_center()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        70, this->center(), target);
  }

  // optional .pb.PmCartesian normal = 80;
  if (has_normal()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        80, this->normal(), target);
  }

  // optional fixed32 turn = 90;
  if (has_turn()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(90, this->turn(), target);
  }

  // optional double vel = 100;
  if (has_vel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(100, this->vel(), target);
  }

  // optional double ini_maxvel = 110;
  if (has_ini_maxvel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(110, this->ini_maxvel(), target);
  }

  // optional .pb.MotionType motion_type = 120;
  if (has_motion_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      120, this->motion_type(), target);
  }

  // optional double spindlesync = 130;
  if (has_spindlesync()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(130, this->spindlesync(), target);
  }

  // optional double acc = 140;
  if (has_acc()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(140, this->acc(), target);
  }

  // optional double backlash = 150;
  if (has_backlash()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(150, this->backlash(), target);
  }

  // optional fixed32 id = 160;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(160, this->id(), target);
  }

  // optional fixed32 termCond = 170;
  if (has_termcond()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(170, this->termcond(), target);
  }

  // optional double tolerance = 180;
  if (has_tolerance()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(180, this->tolerance(), target);
  }

  // optional fixed32 axis = 190;
  if (has_axis()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(190, this->axis(), target);
  }

  // optional double scale = 200;
  if (has_scale()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(200, this->scale(), target);
  }

  // optional double offset = 210;
  if (has_offset()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(210, this->offset(), target);
  }

  // optional double home = 220;
  if (has_home()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(220, this->home(), target);
  }

  // optional double home_final_vel = 230;
  if (has_home_final_vel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(230, this->home_final_vel(), target);
  }

  // optional double search_vel = 240;
  if (has_search_vel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(240, this->search_vel(), target);
  }

  // optional double latch_vel = 250;
  if (has_latch_vel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(250, this->latch_vel(), target);
  }

  // optional fixed32 flags = 260;
  if (has_flags()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(260, this->flags(), target);
  }

  // optional fixed32 home_sequence = 270;
  if (has_home_sequence()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(270, this->home_sequence(), target);
  }

  // optional fixed32 volatile_home = 280;
  if (has_volatile_home()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(280, this->volatile_home(), target);
  }

  // optional double minFerror = 290;
  if (has_minferror()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(290, this->minferror(), target);
  }

  // optional double maxFerror = 300;
  if (has_maxferror()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(300, this->maxferror(), target);
  }

  // optional fixed32 wdWait = 310;
  if (has_wdwait()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(310, this->wdwait(), target);
  }

  // optional fixed32 debug = 320;
  if (has_debug()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(320, this->debug(), target);
  }

  // optional int32 now = 330;
  if (has_now()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(330, this->now(), target);
  }

  // optional int32 out = 340;
  if (has_out()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(340, this->out(), target);
  }

  // optional int32 start = 350;
  if (has_start()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(350, this->start(), target);
  }

  // optional int32 end = 360;
  if (has_end()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(360, this->end(), target);
  }

  // optional int32 mode = 370;
  if (has_mode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(370, this->mode(), target);
  }

  // optional double comp_nominal = 380;
  if (has_comp_nominal()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(380, this->comp_nominal(), target);
  }

  // optional double comp_forward = 390;
  if (has_comp_forward()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(390, this->comp_forward(), target);
  }

  // optional double comp_reverse = 400;
  if (has_comp_reverse()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(400, this->comp_reverse(), target);
  }

  // optional int32 probe_type = 410;
  if (has_probe_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(410, this->probe_type(), target);
  }

  // optional .pb.EmcPose tool_offset = 420;
  if (has_tool_offset()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        420, this->tool_offset(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.MotionCommand)
  return target;
}

int MotionCommand::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .pb.cmd_code_t command = 10;
    if (has_command()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->command());
    }

    // required fixed32 commandNum = 20;
    if (has_commandnum()) {
      total_size += 2 + 4;
    }

    // optional double motor_offset = 30;
    if (has_motor_offset()) {
      total_size += 2 + 8;
    }

    // optional double maxLimit = 40;
    if (has_maxlimit()) {
      total_size += 2 + 8;
    }

    // optional double minLimit = 50;
    if (has_minlimit()) {
      total_size += 2 + 8;
    }

    // optional .pb.EmcPose pos = 60;
    if (has_pos()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->pos());
    }

    // optional .pb.PmCartesian center = 70;
    if (has_center()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->center());
    }

    // optional .pb.PmCartesian normal = 80;
    if (has_normal()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->normal());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional fixed32 turn = 90;
    if (has_turn()) {
      total_size += 2 + 4;
    }

    // optional double vel = 100;
    if (has_vel()) {
      total_size += 2 + 8;
    }

    // optional double ini_maxvel = 110;
    if (has_ini_maxvel()) {
      total_size += 2 + 8;
    }

    // optional .pb.MotionType motion_type = 120;
    if (has_motion_type()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->motion_type());
    }

    // optional double spindlesync = 130;
    if (has_spindlesync()) {
      total_size += 2 + 8;
    }

    // optional double acc = 140;
    if (has_acc()) {
      total_size += 2 + 8;
    }

    // optional double backlash = 150;
    if (has_backlash()) {
      total_size += 2 + 8;
    }

    // optional fixed32 id = 160;
    if (has_id()) {
      total_size += 2 + 4;
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional fixed32 termCond = 170;
    if (has_termcond()) {
      total_size += 2 + 4;
    }

    // optional double tolerance = 180;
    if (has_tolerance()) {
      total_size += 2 + 8;
    }

    // optional fixed32 axis = 190;
    if (has_axis()) {
      total_size += 2 + 4;
    }

    // optional double scale = 200;
    if (has_scale()) {
      total_size += 2 + 8;
    }

    // optional double offset = 210;
    if (has_offset()) {
      total_size += 2 + 8;
    }

    // optional double home = 220;
    if (has_home()) {
      total_size += 2 + 8;
    }

    // optional double home_final_vel = 230;
    if (has_home_final_vel()) {
      total_size += 2 + 8;
    }

    // optional double search_vel = 240;
    if (has_search_vel()) {
      total_size += 2 + 8;
    }

  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    // optional double latch_vel = 250;
    if (has_latch_vel()) {
      total_size += 2 + 8;
    }

    // optional fixed32 flags = 260;
    if (has_flags()) {
      total_size += 2 + 4;
    }

    // optional fixed32 home_sequence = 270;
    if (has_home_sequence()) {
      total_size += 2 + 4;
    }

    // optional fixed32 volatile_home = 280;
    if (has_volatile_home()) {
      total_size += 2 + 4;
    }

    // optional double minFerror = 290;
    if (has_minferror()) {
      total_size += 2 + 8;
    }

    // optional double maxFerror = 300;
    if (has_maxferror()) {
      total_size += 2 + 8;
    }

    // optional fixed32 wdWait = 310;
    if (has_wdwait()) {
      total_size += 2 + 4;
    }

    // optional fixed32 debug = 320;
    if (has_debug()) {
      total_size += 2 + 4;
    }

  }
  if (_has_bits_[32 / 32] & (0xffu << (32 % 32))) {
    // optional int32 now = 330;
    if (has_now()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->now());
    }

    // optional int32 out = 340;
    if (has_out()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->out());
    }

    // optional int32 start = 350;
    if (has_start()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->start());
    }

    // optional int32 end = 360;
    if (has_end()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->end());
    }

    // optional int32 mode = 370;
    if (has_mode()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->mode());
    }

    // optional double comp_nominal = 380;
    if (has_comp_nominal()) {
      total_size += 2 + 8;
    }

    // optional double comp_forward = 390;
    if (has_comp_forward()) {
      total_size += 2 + 8;
    }

    // optional double comp_reverse = 400;
    if (has_comp_reverse()) {
      total_size += 2 + 8;
    }

  }
  if (_has_bits_[40 / 32] & (0xffu << (40 % 32))) {
    // optional int32 probe_type = 410;
    if (has_probe_type()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->probe_type());
    }

    // optional .pb.EmcPose tool_offset = 420;
    if (has_tool_offset()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->tool_offset());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MotionCommand::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MotionCommand* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MotionCommand*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MotionCommand::MergeFrom(const MotionCommand& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_command()) {
      set_command(from.command());
    }
    if (from.has_commandnum()) {
      set_commandnum(from.commandnum());
    }
    if (from.has_motor_offset()) {
      set_motor_offset(from.motor_offset());
    }
    if (from.has_maxlimit()) {
      set_maxlimit(from.maxlimit());
    }
    if (from.has_minlimit()) {
      set_minlimit(from.minlimit());
    }
    if (from.has_pos()) {
      mutable_pos()->::pb::EmcPose::MergeFrom(from.pos());
    }
    if (from.has_center()) {
      mutable_center()->::pb::PmCartesian::MergeFrom(from.center());
    }
    if (from.has_normal()) {
      mutable_normal()->::pb::PmCartesian::MergeFrom(from.normal());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_turn()) {
      set_turn(from.turn());
    }
    if (from.has_vel()) {
      set_vel(from.vel());
    }
    if (from.has_ini_maxvel()) {
      set_ini_maxvel(from.ini_maxvel());
    }
    if (from.has_motion_type()) {
      set_motion_type(from.motion_type());
    }
    if (from.has_spindlesync()) {
      set_spindlesync(from.spindlesync());
    }
    if (from.has_acc()) {
      set_acc(from.acc());
    }
    if (from.has_backlash()) {
      set_backlash(from.backlash());
    }
    if (from.has_id()) {
      set_id(from.id());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_termcond()) {
      set_termcond(from.termcond());
    }
    if (from.has_tolerance()) {
      set_tolerance(from.tolerance());
    }
    if (from.has_axis()) {
      set_axis(from.axis());
    }
    if (from.has_scale()) {
      set_scale(from.scale());
    }
    if (from.has_offset()) {
      set_offset(from.offset());
    }
    if (from.has_home()) {
      set_home(from.home());
    }
    if (from.has_home_final_vel()) {
      set_home_final_vel(from.home_final_vel());
    }
    if (from.has_search_vel()) {
      set_search_vel(from.search_vel());
    }
  }
  if (from._has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    if (from.has_latch_vel()) {
      set_latch_vel(from.latch_vel());
    }
    if (from.has_flags()) {
      set_flags(from.flags());
    }
    if (from.has_home_sequence()) {
      set_home_sequence(from.home_sequence());
    }
    if (from.has_volatile_home()) {
      set_volatile_home(from.volatile_home());
    }
    if (from.has_minferror()) {
      set_minferror(from.minferror());
    }
    if (from.has_maxferror()) {
      set_maxferror(from.maxferror());
    }
    if (from.has_wdwait()) {
      set_wdwait(from.wdwait());
    }
    if (from.has_debug()) {
      set_debug(from.debug());
    }
  }
  if (from._has_bits_[32 / 32] & (0xffu << (32 % 32))) {
    if (from.has_now()) {
      set_now(from.now());
    }
    if (from.has_out()) {
      set_out(from.out());
    }
    if (from.has_start()) {
      set_start(from.start());
    }
    if (from.has_end()) {
      set_end(from.end());
    }
    if (from.has_mode()) {
      set_mode(from.mode());
    }
    if (from.has_comp_nominal()) {
      set_comp_nominal(from.comp_nominal());
    }
    if (from.has_comp_forward()) {
      set_comp_forward(from.comp_forward());
    }
    if (from.has_comp_reverse()) {
      set_comp_reverse(from.comp_reverse());
    }
  }
  if (from._has_bits_[40 / 32] & (0xffu << (40 % 32))) {
    if (from.has_probe_type()) {
      set_probe_type(from.probe_type());
    }
    if (from.has_tool_offset()) {
      mutable_tool_offset()->::pb::EmcPose::MergeFrom(from.tool_offset());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MotionCommand::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MotionCommand::CopyFrom(const MotionCommand& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MotionCommand::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_pos()) {
    if (!this->pos().IsInitialized()) return false;
  }
  if (has_tool_offset()) {
    if (!this->tool_offset().IsInitialized()) return false;
  }
  return true;
}

void MotionCommand::Swap(MotionCommand* other) {
  if (other != this) {
    std::swap(command_, other->command_);
    std::swap(commandnum_, other->commandnum_);
    std::swap(motor_offset_, other->motor_offset_);
    std::swap(maxlimit_, other->maxlimit_);
    std::swap(minlimit_, other->minlimit_);
    std::swap(pos_, other->pos_);
    std::swap(center_, other->center_);
    std::swap(normal_, other->normal_);
    std::swap(turn_, other->turn_);
    std::swap(vel_, other->vel_);
    std::swap(ini_maxvel_, other->ini_maxvel_);
    std::swap(motion_type_, other->motion_type_);
    std::swap(spindlesync_, other->spindlesync_);
    std::swap(acc_, other->acc_);
    std::swap(backlash_, other->backlash_);
    std::swap(id_, other->id_);
    std::swap(termcond_, other->termcond_);
    std::swap(tolerance_, other->tolerance_);
    std::swap(axis_, other->axis_);
    std::swap(scale_, other->scale_);
    std::swap(offset_, other->offset_);
    std::swap(home_, other->home_);
    std::swap(home_final_vel_, other->home_final_vel_);
    std::swap(search_vel_, other->search_vel_);
    std::swap(latch_vel_, other->latch_vel_);
    std::swap(flags_, other->flags_);
    std::swap(home_sequence_, other->home_sequence_);
    std::swap(volatile_home_, other->volatile_home_);
    std::swap(minferror_, other->minferror_);
    std::swap(maxferror_, other->maxferror_);
    std::swap(wdwait_, other->wdwait_);
    std::swap(debug_, other->debug_);
    std::swap(now_, other->now_);
    std::swap(out_, other->out_);
    std::swap(start_, other->start_);
    std::swap(end_, other->end_);
    std::swap(mode_, other->mode_);
    std::swap(comp_nominal_, other->comp_nominal_);
    std::swap(comp_forward_, other->comp_forward_);
    std::swap(comp_reverse_, other->comp_reverse_);
    std::swap(probe_type_, other->probe_type_);
    std::swap(tool_offset_, other->tool_offset_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_has_bits_[1], other->_has_bits_[1]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MotionCommand::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MotionCommand_descriptor_;
  metadata.reflection = MotionCommand_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MotionStatus::kCommandEchoFieldNumber;
const int MotionStatus::kCommandNumEchoFieldNumber;
const int MotionStatus::kCommandStatusFieldNumber;
const int MotionStatus::kCartePosFbFieldNumber;
#endif  // !_MSC_VER

MotionStatus::MotionStatus()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.MotionStatus)
}

void MotionStatus::InitAsDefaultInstance() {
  carte_pos_fb_ = const_cast< ::pb::EmcPose*>(&::pb::EmcPose::default_instance());
}

MotionStatus::MotionStatus(const MotionStatus& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.MotionStatus)
}

void MotionStatus::SharedCtor() {
  _cached_size_ = 0;
  commandecho_ = 4000;
  commandnumecho_ = 0u;
  commandstatus_ = 0;
  carte_pos_fb_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MotionStatus::~MotionStatus() {
  // @@protoc_insertion_point(destructor:pb.MotionStatus)
  SharedDtor();
}

void MotionStatus::SharedDtor() {
  if (this != default_instance_) {
    delete carte_pos_fb_;
  }
}

void MotionStatus::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MotionStatus::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MotionStatus_descriptor_;
}

const MotionStatus& MotionStatus::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_motcmds_2eproto();
  return *default_instance_;
}

MotionStatus* MotionStatus::default_instance_ = NULL;

MotionStatus* MotionStatus::New() const {
  return new MotionStatus;
}

void MotionStatus::Clear() {
  if (_has_bits_[0 / 32] & 15) {
    commandecho_ = 4000;
    commandnumecho_ = 0u;
    commandstatus_ = 0;
    if (has_carte_pos_fb()) {
      if (carte_pos_fb_ != NULL) carte_pos_fb_->::pb::EmcPose::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MotionStatus::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.MotionStatus)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .pb.cmd_code_t commandEcho = 10;
      case 10: {
        if (tag == 80) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::pb::cmd_code_t_IsValid(value)) {
            set_commandecho(static_cast< ::pb::cmd_code_t >(value));
          } else {
            mutable_unknown_fields()->AddVarint(10, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(165)) goto parse_commandNumEcho;
        break;
      }

      // required fixed32 commandNumEcho = 20;
      case 20: {
        if (tag == 165) {
         parse_commandNumEcho:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &commandnumecho_)));
          set_has_commandnumecho();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(240)) goto parse_commandStatus;
        break;
      }

      // required .pb.cmd_status_t commandStatus = 30;
      case 30: {
        if (tag == 240) {
         parse_commandStatus:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::pb::cmd_status_t_IsValid(value)) {
            set_commandstatus(static_cast< ::pb::cmd_status_t >(value));
          } else {
            mutable_unknown_fields()->AddVarint(30, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(322)) goto parse_carte_pos_fb;
        break;
      }

      // optional .pb.EmcPose carte_pos_fb = 40;
      case 40: {
        if (tag == 322) {
         parse_carte_pos_fb:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_carte_pos_fb()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.MotionStatus)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.MotionStatus)
  return false;
#undef DO_
}

void MotionStatus::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.MotionStatus)
  // required .pb.cmd_code_t commandEcho = 10;
  if (has_commandecho()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      10, this->commandecho(), output);
  }

  // required fixed32 commandNumEcho = 20;
  if (has_commandnumecho()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(20, this->commandnumecho(), output);
  }

  // required .pb.cmd_status_t commandStatus = 30;
  if (has_commandstatus()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      30, this->commandstatus(), output);
  }

  // optional .pb.EmcPose carte_pos_fb = 40;
  if (has_carte_pos_fb()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      40, this->carte_pos_fb(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.MotionStatus)
}

::google::protobuf::uint8* MotionStatus::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.MotionStatus)
  // required .pb.cmd_code_t commandEcho = 10;
  if (has_commandecho()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      10, this->commandecho(), target);
  }

  // required fixed32 commandNumEcho = 20;
  if (has_commandnumecho()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(20, this->commandnumecho(), target);
  }

  // required .pb.cmd_status_t commandStatus = 30;
  if (has_commandstatus()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      30, this->commandstatus(), target);
  }

  // optional .pb.EmcPose carte_pos_fb = 40;
  if (has_carte_pos_fb()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        40, this->carte_pos_fb(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.MotionStatus)
  return target;
}

int MotionStatus::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .pb.cmd_code_t commandEcho = 10;
    if (has_commandecho()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->commandecho());
    }

    // required fixed32 commandNumEcho = 20;
    if (has_commandnumecho()) {
      total_size += 2 + 4;
    }

    // required .pb.cmd_status_t commandStatus = 30;
    if (has_commandstatus()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->commandstatus());
    }

    // optional .pb.EmcPose carte_pos_fb = 40;
    if (has_carte_pos_fb()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->carte_pos_fb());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MotionStatus::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MotionStatus* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MotionStatus*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MotionStatus::MergeFrom(const MotionStatus& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_commandecho()) {
      set_commandecho(from.commandecho());
    }
    if (from.has_commandnumecho()) {
      set_commandnumecho(from.commandnumecho());
    }
    if (from.has_commandstatus()) {
      set_commandstatus(from.commandstatus());
    }
    if (from.has_carte_pos_fb()) {
      mutable_carte_pos_fb()->::pb::EmcPose::MergeFrom(from.carte_pos_fb());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MotionStatus::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MotionStatus::CopyFrom(const MotionStatus& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MotionStatus::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  if (has_carte_pos_fb()) {
    if (!this->carte_pos_fb().IsInitialized()) return false;
  }
  return true;
}

void MotionStatus::Swap(MotionStatus* other) {
  if (other != this) {
    std::swap(commandecho_, other->commandecho_);
    std::swap(commandnumecho_, other->commandnumecho_);
    std::swap(commandstatus_, other->commandstatus_);
    std::swap(carte_pos_fb_, other->carte_pos_fb_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MotionStatus::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MotionStatus_descriptor_;
  metadata.reflection = MotionStatus_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace pb

// @@protoc_insertion_point(global_scope)
