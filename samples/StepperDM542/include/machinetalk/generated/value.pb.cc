// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: value.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "value.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace pb {

namespace {

const ::google::protobuf::Descriptor* Value_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Value_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_value_2eproto() {
  protobuf_AddDesc_value_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "value.proto");
  GOOGLE_CHECK(file != NULL);
  Value_descriptor_ = file->message_type(0);
  static const int Value_offsets_[15] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Value, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Value, halbit_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Value, halfloat_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Value, hals32_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Value, halu32_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Value, v_bytes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Value, v_int32_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Value, v_int64_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Value, v_uint32_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Value, v_uint64_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Value, v_double_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Value, v_string_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Value, v_bool_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Value, carte_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Value, pose_),
  };
  Value_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Value_descriptor_,
      Value::default_instance_,
      Value_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Value, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Value, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Value));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_value_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Value_descriptor_, &Value::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_value_2eproto() {
  delete Value::default_instance_;
  delete Value_reflection_;
}

void protobuf_AddDesc_value_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::protobuf_AddDesc_nanopb_2eproto();
  ::pb::protobuf_AddDesc_emcclass_2eproto();
  ::pb::protobuf_AddDesc_types_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\013value.proto\022\002pb\032\014nanopb.proto\032\016emcclas"
    "s.proto\032\013types.proto\"\304\002\n\005Value\022\033\n\004type\030\n"
    " \002(\0162\r.pb.ValueType\022\016\n\006halbit\030d \001(\010\022\020\n\010h"
    "alfloat\030e \001(\001\022\016\n\006hals32\030f \001(\017\022\016\n\006halu32\030"
    "g \001(\007\022\017\n\007v_bytes\030x \001(\014\022\020\n\007v_int32\030\202\001 \001(\017"
    "\022\020\n\007v_int64\030\214\001 \001(\020\022\021\n\010v_uint32\030\226\001 \001(\007\022\021\n"
    "\010v_uint64\030\240\001 \001(\006\022\021\n\010v_double\030\252\001 \001(\001\022\030\n\010v"
    "_string\030\264\001 \001(\tB\005\222\?\002\010)\022\017\n\006v_bool\030\276\001 \001(\010\022\037"
    "\n\005carte\030\310\001 \001(\0132\017.pb.PmCartesian\022\032\n\004pose\030"
    "\334\001 \001(\0132\013.pb.EmcPose:\006\222\?\003H\334\013", 387);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "value.proto", &protobuf_RegisterTypes);
  Value::default_instance_ = new Value();
  Value::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_value_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_value_2eproto {
  StaticDescriptorInitializer_value_2eproto() {
    protobuf_AddDesc_value_2eproto();
  }
} static_descriptor_initializer_value_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int Value::kTypeFieldNumber;
const int Value::kHalbitFieldNumber;
const int Value::kHalfloatFieldNumber;
const int Value::kHals32FieldNumber;
const int Value::kHalu32FieldNumber;
const int Value::kVBytesFieldNumber;
const int Value::kVInt32FieldNumber;
const int Value::kVInt64FieldNumber;
const int Value::kVUint32FieldNumber;
const int Value::kVUint64FieldNumber;
const int Value::kVDoubleFieldNumber;
const int Value::kVStringFieldNumber;
const int Value::kVBoolFieldNumber;
const int Value::kCarteFieldNumber;
const int Value::kPoseFieldNumber;
#endif  // !_MSC_VER

Value::Value()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.Value)
}

void Value::InitAsDefaultInstance() {
  carte_ = const_cast< ::pb::PmCartesian*>(&::pb::PmCartesian::default_instance());
  pose_ = const_cast< ::pb::EmcPose*>(&::pb::EmcPose::default_instance());
}

Value::Value(const Value& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.Value)
}

void Value::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  type_ = 1;
  halbit_ = false;
  halfloat_ = 0;
  hals32_ = 0;
  halu32_ = 0u;
  v_bytes_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  v_int32_ = 0;
  v_int64_ = GOOGLE_LONGLONG(0);
  v_uint32_ = 0u;
  v_uint64_ = GOOGLE_ULONGLONG(0);
  v_double_ = 0;
  v_string_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  v_bool_ = false;
  carte_ = NULL;
  pose_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Value::~Value() {
  // @@protoc_insertion_point(destructor:pb.Value)
  SharedDtor();
}

void Value::SharedDtor() {
  if (v_bytes_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete v_bytes_;
  }
  if (v_string_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete v_string_;
  }
  if (this != default_instance_) {
    delete carte_;
    delete pose_;
  }
}

void Value::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Value::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Value_descriptor_;
}

const Value& Value::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_value_2eproto();
  return *default_instance_;
}

Value* Value::default_instance_ = NULL;

Value* Value::New() const {
  return new Value;
}

void Value::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<Value*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(hals32_, halfloat_);
    ZR_(halu32_, halbit_);
    type_ = 1;
    if (has_v_bytes()) {
      if (v_bytes_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        v_bytes_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & 32512) {
    ZR_(v_bool_, v_double_);
    if (has_v_string()) {
      if (v_string_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        v_string_->clear();
      }
    }
    if (has_carte()) {
      if (carte_ != NULL) carte_->::pb::PmCartesian::Clear();
    }
    if (has_pose()) {
      if (pose_ != NULL) pose_->::pb::EmcPose::Clear();
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Value::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.Value)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .pb.ValueType type = 10;
      case 10: {
        if (tag == 80) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::pb::ValueType_IsValid(value)) {
            set_type(static_cast< ::pb::ValueType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(10, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(800)) goto parse_halbit;
        break;
      }

      // optional bool halbit = 100;
      case 100: {
        if (tag == 800) {
         parse_halbit:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &halbit_)));
          set_has_halbit();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(809)) goto parse_halfloat;
        break;
      }

      // optional double halfloat = 101;
      case 101: {
        if (tag == 809) {
         parse_halfloat:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &halfloat_)));
          set_has_halfloat();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(821)) goto parse_hals32;
        break;
      }

      // optional sfixed32 hals32 = 102;
      case 102: {
        if (tag == 821) {
         parse_hals32:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED32>(
                 input, &hals32_)));
          set_has_hals32();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(829)) goto parse_halu32;
        break;
      }

      // optional fixed32 halu32 = 103;
      case 103: {
        if (tag == 829) {
         parse_halu32:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &halu32_)));
          set_has_halu32();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(962)) goto parse_v_bytes;
        break;
      }

      // optional bytes v_bytes = 120;
      case 120: {
        if (tag == 962) {
         parse_v_bytes:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_v_bytes()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(1045)) goto parse_v_int32;
        break;
      }

      // optional sfixed32 v_int32 = 130;
      case 130: {
        if (tag == 1045) {
         parse_v_int32:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED32>(
                 input, &v_int32_)));
          set_has_v_int32();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(1121)) goto parse_v_int64;
        break;
      }

      // optional sfixed64 v_int64 = 140;
      case 140: {
        if (tag == 1121) {
         parse_v_int64:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED64>(
                 input, &v_int64_)));
          set_has_v_int64();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(1205)) goto parse_v_uint32;
        break;
      }

      // optional fixed32 v_uint32 = 150;
      case 150: {
        if (tag == 1205) {
         parse_v_uint32:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &v_uint32_)));
          set_has_v_uint32();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(1281)) goto parse_v_uint64;
        break;
      }

      // optional fixed64 v_uint64 = 160;
      case 160: {
        if (tag == 1281) {
         parse_v_uint64:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &v_uint64_)));
          set_has_v_uint64();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(1361)) goto parse_v_double;
        break;
      }

      // optional double v_double = 170;
      case 170: {
        if (tag == 1361) {
         parse_v_double:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &v_double_)));
          set_has_v_double();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(1442)) goto parse_v_string;
        break;
      }

      // optional string v_string = 180;
      case 180: {
        if (tag == 1442) {
         parse_v_string:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_v_string()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->v_string().data(), this->v_string().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "v_string");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(1520)) goto parse_v_bool;
        break;
      }

      // optional bool v_bool = 190;
      case 190: {
        if (tag == 1520) {
         parse_v_bool:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &v_bool_)));
          set_has_v_bool();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(1602)) goto parse_carte;
        break;
      }

      // optional .pb.PmCartesian carte = 200;
      case 200: {
        if (tag == 1602) {
         parse_carte:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_carte()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(1762)) goto parse_pose;
        break;
      }

      // optional .pb.EmcPose pose = 220;
      case 220: {
        if (tag == 1762) {
         parse_pose:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_pose()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.Value)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.Value)
  return false;
#undef DO_
}

void Value::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.Value)
  // required .pb.ValueType type = 10;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      10, this->type(), output);
  }

  // optional bool halbit = 100;
  if (has_halbit()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(100, this->halbit(), output);
  }

  // optional double halfloat = 101;
  if (has_halfloat()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(101, this->halfloat(), output);
  }

  // optional sfixed32 hals32 = 102;
  if (has_hals32()) {
    ::google::protobuf::internal::WireFormatLite::WriteSFixed32(102, this->hals32(), output);
  }

  // optional fixed32 halu32 = 103;
  if (has_halu32()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(103, this->halu32(), output);
  }

  // optional bytes v_bytes = 120;
  if (has_v_bytes()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      120, this->v_bytes(), output);
  }

  // optional sfixed32 v_int32 = 130;
  if (has_v_int32()) {
    ::google::protobuf::internal::WireFormatLite::WriteSFixed32(130, this->v_int32(), output);
  }

  // optional sfixed64 v_int64 = 140;
  if (has_v_int64()) {
    ::google::protobuf::internal::WireFormatLite::WriteSFixed64(140, this->v_int64(), output);
  }

  // optional fixed32 v_uint32 = 150;
  if (has_v_uint32()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(150, this->v_uint32(), output);
  }

  // optional fixed64 v_uint64 = 160;
  if (has_v_uint64()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(160, this->v_uint64(), output);
  }

  // optional double v_double = 170;
  if (has_v_double()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(170, this->v_double(), output);
  }

  // optional string v_string = 180;
  if (has_v_string()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->v_string().data(), this->v_string().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "v_string");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      180, this->v_string(), output);
  }

  // optional bool v_bool = 190;
  if (has_v_bool()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(190, this->v_bool(), output);
  }

  // optional .pb.PmCartesian carte = 200;
  if (has_carte()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      200, this->carte(), output);
  }

  // optional .pb.EmcPose pose = 220;
  if (has_pose()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      220, this->pose(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.Value)
}

::google::protobuf::uint8* Value::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.Value)
  // required .pb.ValueType type = 10;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      10, this->type(), target);
  }

  // optional bool halbit = 100;
  if (has_halbit()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(100, this->halbit(), target);
  }

  // optional double halfloat = 101;
  if (has_halfloat()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(101, this->halfloat(), target);
  }

  // optional sfixed32 hals32 = 102;
  if (has_hals32()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSFixed32ToArray(102, this->hals32(), target);
  }

  // optional fixed32 halu32 = 103;
  if (has_halu32()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(103, this->halu32(), target);
  }

  // optional bytes v_bytes = 120;
  if (has_v_bytes()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        120, this->v_bytes(), target);
  }

  // optional sfixed32 v_int32 = 130;
  if (has_v_int32()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSFixed32ToArray(130, this->v_int32(), target);
  }

  // optional sfixed64 v_int64 = 140;
  if (has_v_int64()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSFixed64ToArray(140, this->v_int64(), target);
  }

  // optional fixed32 v_uint32 = 150;
  if (has_v_uint32()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(150, this->v_uint32(), target);
  }

  // optional fixed64 v_uint64 = 160;
  if (has_v_uint64()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(160, this->v_uint64(), target);
  }

  // optional double v_double = 170;
  if (has_v_double()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(170, this->v_double(), target);
  }

  // optional string v_string = 180;
  if (has_v_string()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->v_string().data(), this->v_string().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "v_string");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        180, this->v_string(), target);
  }

  // optional bool v_bool = 190;
  if (has_v_bool()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(190, this->v_bool(), target);
  }

  // optional .pb.PmCartesian carte = 200;
  if (has_carte()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        200, this->carte(), target);
  }

  // optional .pb.EmcPose pose = 220;
  if (has_pose()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        220, this->pose(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.Value)
  return target;
}

int Value::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .pb.ValueType type = 10;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // optional bool halbit = 100;
    if (has_halbit()) {
      total_size += 2 + 1;
    }

    // optional double halfloat = 101;
    if (has_halfloat()) {
      total_size += 2 + 8;
    }

    // optional sfixed32 hals32 = 102;
    if (has_hals32()) {
      total_size += 2 + 4;
    }

    // optional fixed32 halu32 = 103;
    if (has_halu32()) {
      total_size += 2 + 4;
    }

    // optional bytes v_bytes = 120;
    if (has_v_bytes()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->v_bytes());
    }

    // optional sfixed32 v_int32 = 130;
    if (has_v_int32()) {
      total_size += 2 + 4;
    }

    // optional sfixed64 v_int64 = 140;
    if (has_v_int64()) {
      total_size += 2 + 8;
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional fixed32 v_uint32 = 150;
    if (has_v_uint32()) {
      total_size += 2 + 4;
    }

    // optional fixed64 v_uint64 = 160;
    if (has_v_uint64()) {
      total_size += 2 + 8;
    }

    // optional double v_double = 170;
    if (has_v_double()) {
      total_size += 2 + 8;
    }

    // optional string v_string = 180;
    if (has_v_string()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->v_string());
    }

    // optional bool v_bool = 190;
    if (has_v_bool()) {
      total_size += 2 + 1;
    }

    // optional .pb.PmCartesian carte = 200;
    if (has_carte()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->carte());
    }

    // optional .pb.EmcPose pose = 220;
    if (has_pose()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->pose());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Value::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Value* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Value*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Value::MergeFrom(const Value& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_halbit()) {
      set_halbit(from.halbit());
    }
    if (from.has_halfloat()) {
      set_halfloat(from.halfloat());
    }
    if (from.has_hals32()) {
      set_hals32(from.hals32());
    }
    if (from.has_halu32()) {
      set_halu32(from.halu32());
    }
    if (from.has_v_bytes()) {
      set_v_bytes(from.v_bytes());
    }
    if (from.has_v_int32()) {
      set_v_int32(from.v_int32());
    }
    if (from.has_v_int64()) {
      set_v_int64(from.v_int64());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_v_uint32()) {
      set_v_uint32(from.v_uint32());
    }
    if (from.has_v_uint64()) {
      set_v_uint64(from.v_uint64());
    }
    if (from.has_v_double()) {
      set_v_double(from.v_double());
    }
    if (from.has_v_string()) {
      set_v_string(from.v_string());
    }
    if (from.has_v_bool()) {
      set_v_bool(from.v_bool());
    }
    if (from.has_carte()) {
      mutable_carte()->::pb::PmCartesian::MergeFrom(from.carte());
    }
    if (from.has_pose()) {
      mutable_pose()->::pb::EmcPose::MergeFrom(from.pose());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Value::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Value::CopyFrom(const Value& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Value::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_pose()) {
    if (!this->pose().IsInitialized()) return false;
  }
  return true;
}

void Value::Swap(Value* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(halbit_, other->halbit_);
    std::swap(halfloat_, other->halfloat_);
    std::swap(hals32_, other->hals32_);
    std::swap(halu32_, other->halu32_);
    std::swap(v_bytes_, other->v_bytes_);
    std::swap(v_int32_, other->v_int32_);
    std::swap(v_int64_, other->v_int64_);
    std::swap(v_uint32_, other->v_uint32_);
    std::swap(v_uint64_, other->v_uint64_);
    std::swap(v_double_, other->v_double_);
    std::swap(v_string_, other->v_string_);
    std::swap(v_bool_, other->v_bool_);
    std::swap(carte_, other->carte_);
    std::swap(pose_, other->pose_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Value::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Value_descriptor_;
  metadata.reflection = Value_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace pb

// @@protoc_insertion_point(global_scope)
