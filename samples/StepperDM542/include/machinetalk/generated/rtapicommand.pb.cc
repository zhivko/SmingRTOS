// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: rtapicommand.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "rtapicommand.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace pb {

namespace {

const ::google::protobuf::Descriptor* RTAPICommand_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RTAPICommand_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_rtapicommand_2eproto() {
  protobuf_AddDesc_rtapicommand_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "rtapicommand.proto");
  GOOGLE_CHECK(file != NULL);
  RTAPICommand_descriptor_ = file->message_type(0);
  static const int RTAPICommand_offsets_[13] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RTAPICommand, instance_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RTAPICommand, modname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RTAPICommand, rt_msglevel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RTAPICommand, user_msglevel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RTAPICommand, argv_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RTAPICommand, threadname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RTAPICommand, threadperiod_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RTAPICommand, use_fp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RTAPICommand, cpu_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RTAPICommand, comp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RTAPICommand, func_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RTAPICommand, instname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RTAPICommand, flags_),
  };
  RTAPICommand_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RTAPICommand_descriptor_,
      RTAPICommand::default_instance_,
      RTAPICommand_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RTAPICommand, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RTAPICommand, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RTAPICommand));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_rtapicommand_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RTAPICommand_descriptor_, &RTAPICommand::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_rtapicommand_2eproto() {
  delete RTAPICommand::default_instance_;
  delete RTAPICommand_reflection_;
}

void protobuf_AddDesc_rtapicommand_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::protobuf_AddDesc_nanopb_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\022rtapicommand.proto\022\002pb\032\014nanopb.proto\"\367"
    "\001\n\014RTAPICommand\022\020\n\010instance\030\001 \002(\005\022\017\n\007mod"
    "name\030\002 \001(\t\022\023\n\013rt_msglevel\030\003 \001(\005\022\025\n\ruser_"
    "msglevel\030\004 \001(\005\022\014\n\004argv\030\005 \003(\t\022\022\n\nthreadna"
    "me\030\006 \001(\t\022\024\n\014threadperiod\030\007 \001(\005\022\016\n\006use_fp"
    "\030\010 \001(\010\022\013\n\003cpu\030\t \001(\005\022\014\n\004comp\030\n \001(\t\022\014\n\004fun"
    "c\030\013 \001(\t\022\020\n\010instname\030\014 \001(\t\022\r\n\005flags\030\r \001(\005"
    ":\006\222\?\003H\204\007", 288);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "rtapicommand.proto", &protobuf_RegisterTypes);
  RTAPICommand::default_instance_ = new RTAPICommand();
  RTAPICommand::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_rtapicommand_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_rtapicommand_2eproto {
  StaticDescriptorInitializer_rtapicommand_2eproto() {
    protobuf_AddDesc_rtapicommand_2eproto();
  }
} static_descriptor_initializer_rtapicommand_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int RTAPICommand::kInstanceFieldNumber;
const int RTAPICommand::kModnameFieldNumber;
const int RTAPICommand::kRtMsglevelFieldNumber;
const int RTAPICommand::kUserMsglevelFieldNumber;
const int RTAPICommand::kArgvFieldNumber;
const int RTAPICommand::kThreadnameFieldNumber;
const int RTAPICommand::kThreadperiodFieldNumber;
const int RTAPICommand::kUseFpFieldNumber;
const int RTAPICommand::kCpuFieldNumber;
const int RTAPICommand::kCompFieldNumber;
const int RTAPICommand::kFuncFieldNumber;
const int RTAPICommand::kInstnameFieldNumber;
const int RTAPICommand::kFlagsFieldNumber;
#endif  // !_MSC_VER

RTAPICommand::RTAPICommand()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.RTAPICommand)
}

void RTAPICommand::InitAsDefaultInstance() {
}

RTAPICommand::RTAPICommand(const RTAPICommand& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.RTAPICommand)
}

void RTAPICommand::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  instance_ = 0;
  modname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  rt_msglevel_ = 0;
  user_msglevel_ = 0;
  threadname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  threadperiod_ = 0;
  use_fp_ = false;
  cpu_ = 0;
  comp_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  func_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  instname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  flags_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RTAPICommand::~RTAPICommand() {
  // @@protoc_insertion_point(destructor:pb.RTAPICommand)
  SharedDtor();
}

void RTAPICommand::SharedDtor() {
  if (modname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete modname_;
  }
  if (threadname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete threadname_;
  }
  if (comp_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete comp_;
  }
  if (func_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete func_;
  }
  if (instname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete instname_;
  }
  if (this != default_instance_) {
  }
}

void RTAPICommand::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RTAPICommand::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RTAPICommand_descriptor_;
}

const RTAPICommand& RTAPICommand::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_rtapicommand_2eproto();
  return *default_instance_;
}

RTAPICommand* RTAPICommand::default_instance_ = NULL;

RTAPICommand* RTAPICommand::New() const {
  return new RTAPICommand;
}

void RTAPICommand::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<RTAPICommand*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 239) {
    ZR_(instance_, rt_msglevel_);
    ZR_(user_msglevel_, threadperiod_);
    if (has_modname()) {
      if (modname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        modname_->clear();
      }
    }
    if (has_threadname()) {
      if (threadname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        threadname_->clear();
      }
    }
    use_fp_ = false;
  }
  if (_has_bits_[8 / 32] & 7936) {
    cpu_ = 0;
    if (has_comp()) {
      if (comp_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        comp_->clear();
      }
    }
    if (has_func()) {
      if (func_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        func_->clear();
      }
    }
    if (has_instname()) {
      if (instname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        instname_->clear();
      }
    }
    flags_ = 0;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  argv_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RTAPICommand::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.RTAPICommand)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 instance = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &instance_)));
          set_has_instance();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_modname;
        break;
      }

      // optional string modname = 2;
      case 2: {
        if (tag == 18) {
         parse_modname:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_modname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->modname().data(), this->modname().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "modname");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_rt_msglevel;
        break;
      }

      // optional int32 rt_msglevel = 3;
      case 3: {
        if (tag == 24) {
         parse_rt_msglevel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &rt_msglevel_)));
          set_has_rt_msglevel();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_user_msglevel;
        break;
      }

      // optional int32 user_msglevel = 4;
      case 4: {
        if (tag == 32) {
         parse_user_msglevel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &user_msglevel_)));
          set_has_user_msglevel();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_argv;
        break;
      }

      // repeated string argv = 5;
      case 5: {
        if (tag == 42) {
         parse_argv:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_argv()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->argv(this->argv_size() - 1).data(),
            this->argv(this->argv_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "argv");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_argv;
        if (input->ExpectTag(50)) goto parse_threadname;
        break;
      }

      // optional string threadname = 6;
      case 6: {
        if (tag == 50) {
         parse_threadname:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_threadname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->threadname().data(), this->threadname().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "threadname");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_threadperiod;
        break;
      }

      // optional int32 threadperiod = 7;
      case 7: {
        if (tag == 56) {
         parse_threadperiod:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &threadperiod_)));
          set_has_threadperiod();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_use_fp;
        break;
      }

      // optional bool use_fp = 8;
      case 8: {
        if (tag == 64) {
         parse_use_fp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &use_fp_)));
          set_has_use_fp();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_cpu;
        break;
      }

      // optional int32 cpu = 9;
      case 9: {
        if (tag == 72) {
         parse_cpu:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cpu_)));
          set_has_cpu();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(82)) goto parse_comp;
        break;
      }

      // optional string comp = 10;
      case 10: {
        if (tag == 82) {
         parse_comp:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_comp()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->comp().data(), this->comp().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "comp");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(90)) goto parse_func;
        break;
      }

      // optional string func = 11;
      case 11: {
        if (tag == 90) {
         parse_func:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_func()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->func().data(), this->func().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "func");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(98)) goto parse_instname;
        break;
      }

      // optional string instname = 12;
      case 12: {
        if (tag == 98) {
         parse_instname:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_instname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->instname().data(), this->instname().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "instname");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(104)) goto parse_flags;
        break;
      }

      // optional int32 flags = 13;
      case 13: {
        if (tag == 104) {
         parse_flags:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &flags_)));
          set_has_flags();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.RTAPICommand)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.RTAPICommand)
  return false;
#undef DO_
}

void RTAPICommand::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.RTAPICommand)
  // required int32 instance = 1;
  if (has_instance()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->instance(), output);
  }

  // optional string modname = 2;
  if (has_modname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->modname().data(), this->modname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "modname");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->modname(), output);
  }

  // optional int32 rt_msglevel = 3;
  if (has_rt_msglevel()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->rt_msglevel(), output);
  }

  // optional int32 user_msglevel = 4;
  if (has_user_msglevel()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->user_msglevel(), output);
  }

  // repeated string argv = 5;
  for (int i = 0; i < this->argv_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
    this->argv(i).data(), this->argv(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE,
    "argv");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->argv(i), output);
  }

  // optional string threadname = 6;
  if (has_threadname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->threadname().data(), this->threadname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "threadname");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->threadname(), output);
  }

  // optional int32 threadperiod = 7;
  if (has_threadperiod()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->threadperiod(), output);
  }

  // optional bool use_fp = 8;
  if (has_use_fp()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(8, this->use_fp(), output);
  }

  // optional int32 cpu = 9;
  if (has_cpu()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->cpu(), output);
  }

  // optional string comp = 10;
  if (has_comp()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->comp().data(), this->comp().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "comp");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      10, this->comp(), output);
  }

  // optional string func = 11;
  if (has_func()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->func().data(), this->func().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "func");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      11, this->func(), output);
  }

  // optional string instname = 12;
  if (has_instname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->instname().data(), this->instname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "instname");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      12, this->instname(), output);
  }

  // optional int32 flags = 13;
  if (has_flags()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(13, this->flags(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.RTAPICommand)
}

::google::protobuf::uint8* RTAPICommand::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.RTAPICommand)
  // required int32 instance = 1;
  if (has_instance()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->instance(), target);
  }

  // optional string modname = 2;
  if (has_modname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->modname().data(), this->modname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "modname");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->modname(), target);
  }

  // optional int32 rt_msglevel = 3;
  if (has_rt_msglevel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->rt_msglevel(), target);
  }

  // optional int32 user_msglevel = 4;
  if (has_user_msglevel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->user_msglevel(), target);
  }

  // repeated string argv = 5;
  for (int i = 0; i < this->argv_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->argv(i).data(), this->argv(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "argv");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(5, this->argv(i), target);
  }

  // optional string threadname = 6;
  if (has_threadname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->threadname().data(), this->threadname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "threadname");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->threadname(), target);
  }

  // optional int32 threadperiod = 7;
  if (has_threadperiod()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->threadperiod(), target);
  }

  // optional bool use_fp = 8;
  if (has_use_fp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(8, this->use_fp(), target);
  }

  // optional int32 cpu = 9;
  if (has_cpu()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->cpu(), target);
  }

  // optional string comp = 10;
  if (has_comp()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->comp().data(), this->comp().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "comp");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->comp(), target);
  }

  // optional string func = 11;
  if (has_func()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->func().data(), this->func().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "func");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        11, this->func(), target);
  }

  // optional string instname = 12;
  if (has_instname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->instname().data(), this->instname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "instname");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        12, this->instname(), target);
  }

  // optional int32 flags = 13;
  if (has_flags()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(13, this->flags(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.RTAPICommand)
  return target;
}

int RTAPICommand::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 instance = 1;
    if (has_instance()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->instance());
    }

    // optional string modname = 2;
    if (has_modname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->modname());
    }

    // optional int32 rt_msglevel = 3;
    if (has_rt_msglevel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->rt_msglevel());
    }

    // optional int32 user_msglevel = 4;
    if (has_user_msglevel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->user_msglevel());
    }

    // optional string threadname = 6;
    if (has_threadname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->threadname());
    }

    // optional int32 threadperiod = 7;
    if (has_threadperiod()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->threadperiod());
    }

    // optional bool use_fp = 8;
    if (has_use_fp()) {
      total_size += 1 + 1;
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 cpu = 9;
    if (has_cpu()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cpu());
    }

    // optional string comp = 10;
    if (has_comp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->comp());
    }

    // optional string func = 11;
    if (has_func()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->func());
    }

    // optional string instname = 12;
    if (has_instname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->instname());
    }

    // optional int32 flags = 13;
    if (has_flags()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->flags());
    }

  }
  // repeated string argv = 5;
  total_size += 1 * this->argv_size();
  for (int i = 0; i < this->argv_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->argv(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RTAPICommand::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RTAPICommand* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RTAPICommand*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RTAPICommand::MergeFrom(const RTAPICommand& from) {
  GOOGLE_CHECK_NE(&from, this);
  argv_.MergeFrom(from.argv_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_instance()) {
      set_instance(from.instance());
    }
    if (from.has_modname()) {
      set_modname(from.modname());
    }
    if (from.has_rt_msglevel()) {
      set_rt_msglevel(from.rt_msglevel());
    }
    if (from.has_user_msglevel()) {
      set_user_msglevel(from.user_msglevel());
    }
    if (from.has_threadname()) {
      set_threadname(from.threadname());
    }
    if (from.has_threadperiod()) {
      set_threadperiod(from.threadperiod());
    }
    if (from.has_use_fp()) {
      set_use_fp(from.use_fp());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_cpu()) {
      set_cpu(from.cpu());
    }
    if (from.has_comp()) {
      set_comp(from.comp());
    }
    if (from.has_func()) {
      set_func(from.func());
    }
    if (from.has_instname()) {
      set_instname(from.instname());
    }
    if (from.has_flags()) {
      set_flags(from.flags());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RTAPICommand::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RTAPICommand::CopyFrom(const RTAPICommand& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RTAPICommand::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void RTAPICommand::Swap(RTAPICommand* other) {
  if (other != this) {
    std::swap(instance_, other->instance_);
    std::swap(modname_, other->modname_);
    std::swap(rt_msglevel_, other->rt_msglevel_);
    std::swap(user_msglevel_, other->user_msglevel_);
    argv_.Swap(&other->argv_);
    std::swap(threadname_, other->threadname_);
    std::swap(threadperiod_, other->threadperiod_);
    std::swap(use_fp_, other->use_fp_);
    std::swap(cpu_, other->cpu_);
    std::swap(comp_, other->comp_);
    std::swap(func_, other->func_);
    std::swap(instname_, other->instname_);
    std::swap(flags_, other->flags_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RTAPICommand::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RTAPICommand_descriptor_;
  metadata.reflection = RTAPICommand_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace pb

// @@protoc_insertion_point(global_scope)
