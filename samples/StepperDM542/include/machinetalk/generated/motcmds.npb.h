/* Automatically generated nanopb header */
/* Generated by nanopb-0.3.3-dev at Wed May 25 22:29:17 2016. */

#ifndef PB_MOTCMDS_NPB_H_INCLUDED
#define PB_MOTCMDS_NPB_H_INCLUDED
#include <pb.h>

#include <machinetalk/generated/emcclass.npb.h>
#if PB_PROTO_HEADER_VERSION != 30
#error Regenerate this file with the current version of nanopb generator.
#endif

#ifdef __cplusplus
extern "C" {
#endif

/* Enum definitions */
typedef enum _pb_MotionType {
    pb_MotionType__EMC_MOTION_TYPE_NONE = 0,
    pb_MotionType__EMC_MOTION_TYPE_TRAVERSE = 1,
    pb_MotionType__EMC_MOTION_TYPE_FEED = 2,
    pb_MotionType__EMC_MOTION_TYPE_ARC = 3,
    pb_MotionType__EMC_MOTION_TYPE_TOOLCHANGE = 4,
    pb_MotionType__EMC_MOTION_TYPE_PROBING = 5,
    pb_MotionType__EMC_MOTION_TYPE_INDEXROTARY = 6
} pb_MotionType;

typedef enum _pb_cmd_code_t {
    pb_cmd_code_t_EMCMOT_ABORT = 4000,
    pb_cmd_code_t_EMCMOT_AXIS_ABORT = 4001,
    pb_cmd_code_t_EMCMOT_ENABLE = 4002,
    pb_cmd_code_t_EMCMOT_DISABLE = 4003,
    pb_cmd_code_t_EMCMOT_ENABLE_AMPLIFIER = 4004,
    pb_cmd_code_t_EMCMOT_DISABLE_AMPLIFIER = 4005,
    pb_cmd_code_t_EMCMOT_ENABLE_WATCHDOG = 4006,
    pb_cmd_code_t_EMCMOT_DISABLE_WATCHDOG = 4007,
    pb_cmd_code_t_EMCMOT_ACTIVATE_JOINT = 4008,
    pb_cmd_code_t_EMCMOT_DEACTIVATE_JOINT = 4009,
    pb_cmd_code_t_EMCMOT_PAUSE = 4010,
    pb_cmd_code_t_EMCMOT_RESUME = 4011,
    pb_cmd_code_t_EMCMOT_STEP = 4012,
    pb_cmd_code_t_EMCMOT_FREE = 4013,
    pb_cmd_code_t_EMCMOT_COORD = 4014,
    pb_cmd_code_t_EMCMOT_TELEOP = 4015,
    pb_cmd_code_t_EMCMOT_SPINDLE_SCALE = 4016,
    pb_cmd_code_t_EMCMOT_SS_ENABLE = 4017,
    pb_cmd_code_t_EMCMOT_FEED_SCALE = 4018,
    pb_cmd_code_t_EMCMOT_FS_ENABLE = 4019,
    pb_cmd_code_t_EMCMOT_FH_ENABLE = 4020,
    pb_cmd_code_t_EMCMOT_AF_ENABLE = 4021,
    pb_cmd_code_t_EMCMOT_OVERRIDE_LIMITS = 4022,
    pb_cmd_code_t_EMCMOT_HOME = 4023,
    pb_cmd_code_t_EMCMOT_UNHOME = 4024,
    pb_cmd_code_t_EMCMOT_JOG_CONT = 4025,
    pb_cmd_code_t_EMCMOT_JOG_INCR = 4026,
    pb_cmd_code_t_EMCMOT_JOG_ABS = 4027,
    pb_cmd_code_t_EMCMOT_SET_LINE = 4028,
    pb_cmd_code_t_EMCMOT_SET_CIRCLE = 4029,
    pb_cmd_code_t_EMCMOT_SET_TELEOP_VECTOR = 4030,
    pb_cmd_code_t_EMCMOT_CLEAR_PROBE_FLAGS = 4031,
    pb_cmd_code_t_EMCMOT_PROBE = 4032,
    pb_cmd_code_t_EMCMOT_RIGID_TAP = 4033,
    pb_cmd_code_t_EMCMOT_SET_POSITION_LIMITS = 4034,
    pb_cmd_code_t_EMCMOT_SET_BACKLASH = 4035,
    pb_cmd_code_t_EMCMOT_SET_MIN_FERROR = 4036,
    pb_cmd_code_t_EMCMOT_SET_MAX_FERROR = 4037,
    pb_cmd_code_t_EMCMOT_SET_VEL = 4038,
    pb_cmd_code_t_EMCMOT_SET_VEL_LIMIT = 4039,
    pb_cmd_code_t_EMCMOT_SET_JOINT_VEL_LIMIT = 4040,
    pb_cmd_code_t_EMCMOT_SET_JOINT_ACC_LIMIT = 4041,
    pb_cmd_code_t_EMCMOT_SET_ACC = 4042,
    pb_cmd_code_t_EMCMOT_SET_TERM_COND = 4043,
    pb_cmd_code_t_EMCMOT_SET_NUM_AXES = 4044,
    pb_cmd_code_t_EMCMOT_SET_WORLD_HOME = 4045,
    pb_cmd_code_t_EMCMOT_SET_HOMING_PARAMS = 4046,
    pb_cmd_code_t_EMCMOT_SET_DEBUG = 4047,
    pb_cmd_code_t_EMCMOT_SET_DOUT = 4048,
    pb_cmd_code_t_EMCMOT_SET_AOUT = 4049,
    pb_cmd_code_t_EMCMOT_SET_SPINDLESYNC = 4050,
    pb_cmd_code_t_EMCMOT_SPINDLE_ON = 4051,
    pb_cmd_code_t_EMCMOT_SPINDLE_OFF = 4052,
    pb_cmd_code_t_EMCMOT_SPINDLE_INCREASE = 4053,
    pb_cmd_code_t_EMCMOT_SPINDLE_DECREASE = 4054,
    pb_cmd_code_t_EMCMOT_SPINDLE_BRAKE_ENGAGE = 4055,
    pb_cmd_code_t_EMCMOT_SPINDLE_BRAKE_RELEASE = 4056,
    pb_cmd_code_t_EMCMOT_SET_MOTOR_OFFSET = 4057,
    pb_cmd_code_t_EMCMOT_SET_JOINT_COMP = 4058,
    pb_cmd_code_t_EMCMOT_SET_OFFSET = 4059
} pb_cmd_code_t;

typedef enum _pb_cmd_status_t {
    pb_cmd_status_t_EMCMOT_COMMAND_OK = 0,
    pb_cmd_status_t_EMCMOT_COMMAND_UNKNOWN_COMMAND = 1,
    pb_cmd_status_t_EMCMOT_COMMAND_INVALID_COMMAND = 2,
    pb_cmd_status_t_EMCMOT_COMMAND_INVALID_PARAMS = 3,
    pb_cmd_status_t_EMCMOT_COMMAND_BAD_EXEC = 4
} pb_cmd_status_t;

/* Struct definitions */
typedef struct _pb_MotionCommand {
    pb_cmd_code_t command;
    uint32_t commandNum;
    bool has_motor_offset;
    double motor_offset;
    bool has_maxLimit;
    double maxLimit;
    bool has_minLimit;
    double minLimit;
    bool has_pos;
    pb_EmcPose pos;
    bool has_center;
    pb_PmCartesian center;
    bool has_normal;
    pb_PmCartesian normal;
    bool has_turn;
    uint32_t turn;
    bool has_vel;
    double vel;
    bool has_ini_maxvel;
    double ini_maxvel;
    bool has_motion_type;
    pb_MotionType motion_type;
    bool has_spindlesync;
    double spindlesync;
    bool has_acc;
    double acc;
    bool has_backlash;
    double backlash;
    bool has_id;
    uint32_t id;
    bool has_termCond;
    uint32_t termCond;
    bool has_tolerance;
    double tolerance;
    bool has_axis;
    uint32_t axis;
    bool has_scale;
    double scale;
    bool has_offset;
    double offset;
    bool has_home;
    double home;
    bool has_home_final_vel;
    double home_final_vel;
    bool has_search_vel;
    double search_vel;
    bool has_latch_vel;
    double latch_vel;
    bool has_flags;
    uint32_t flags;
    bool has_home_sequence;
    uint32_t home_sequence;
    bool has_volatile_home;
    uint32_t volatile_home;
    bool has_minFerror;
    double minFerror;
    bool has_maxFerror;
    double maxFerror;
    bool has_wdWait;
    uint32_t wdWait;
    bool has_debug;
    uint32_t debug;
    bool has_now;
    int32_t now;
    bool has_out;
    int32_t out;
    bool has_start;
    int32_t start;
    bool has_end;
    int32_t end;
    bool has_mode;
    int32_t mode;
    bool has_comp_nominal;
    double comp_nominal;
    bool has_comp_forward;
    double comp_forward;
    bool has_comp_reverse;
    double comp_reverse;
    bool has_probe_type;
    int32_t probe_type;
    bool has_tool_offset;
    pb_EmcPose tool_offset;
} pb_MotionCommand;

typedef struct _pb_MotionStatus {
    pb_cmd_code_t commandEcho;
    uint32_t commandNumEcho;
    pb_cmd_status_t commandStatus;
    bool has_carte_pos_fb;
    pb_EmcPose carte_pos_fb;
} pb_MotionStatus;

/* Default values for struct fields */

/* Initializer values for message structs */
#define pb_MotionCommand_init_default            {(pb_cmd_code_t)0, 0, false, 0, false, 0, false, 0, false, pb_EmcPose_init_default, false, pb_PmCartesian_init_default, false, pb_PmCartesian_init_default, false, 0, false, 0, false, 0, false, (pb_MotionType)0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, pb_EmcPose_init_default}
#define pb_MotionStatus_init_default             {(pb_cmd_code_t)0, 0, (pb_cmd_status_t)0, false, pb_EmcPose_init_default}
#define pb_MotionCommand_init_zero               {(pb_cmd_code_t)0, 0, false, 0, false, 0, false, 0, false, pb_EmcPose_init_zero, false, pb_PmCartesian_init_zero, false, pb_PmCartesian_init_zero, false, 0, false, 0, false, 0, false, (pb_MotionType)0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, pb_EmcPose_init_zero}
#define pb_MotionStatus_init_zero                {(pb_cmd_code_t)0, 0, (pb_cmd_status_t)0, false, pb_EmcPose_init_zero}

/* Field tags (for use in manual encoding/decoding) */
#define pb_MotionCommand_command_tag             10
#define pb_MotionCommand_commandNum_tag          20
#define pb_MotionCommand_motor_offset_tag        30
#define pb_MotionCommand_maxLimit_tag            40
#define pb_MotionCommand_minLimit_tag            50
#define pb_MotionCommand_pos_tag                 60
#define pb_MotionCommand_center_tag              70
#define pb_MotionCommand_normal_tag              80
#define pb_MotionCommand_turn_tag                90
#define pb_MotionCommand_vel_tag                 100
#define pb_MotionCommand_ini_maxvel_tag          110
#define pb_MotionCommand_motion_type_tag         120
#define pb_MotionCommand_spindlesync_tag         130
#define pb_MotionCommand_acc_tag                 140
#define pb_MotionCommand_backlash_tag            150
#define pb_MotionCommand_id_tag                  160
#define pb_MotionCommand_termCond_tag            170
#define pb_MotionCommand_tolerance_tag           180
#define pb_MotionCommand_axis_tag                190
#define pb_MotionCommand_scale_tag               200
#define pb_MotionCommand_offset_tag              210
#define pb_MotionCommand_home_tag                220
#define pb_MotionCommand_home_final_vel_tag      230
#define pb_MotionCommand_search_vel_tag          240
#define pb_MotionCommand_latch_vel_tag           250
#define pb_MotionCommand_flags_tag               260
#define pb_MotionCommand_home_sequence_tag       270
#define pb_MotionCommand_volatile_home_tag       280
#define pb_MotionCommand_minFerror_tag           290
#define pb_MotionCommand_maxFerror_tag           300
#define pb_MotionCommand_wdWait_tag              310
#define pb_MotionCommand_debug_tag               320
#define pb_MotionCommand_now_tag                 330
#define pb_MotionCommand_out_tag                 340
#define pb_MotionCommand_start_tag               350
#define pb_MotionCommand_end_tag                 360
#define pb_MotionCommand_mode_tag                370
#define pb_MotionCommand_comp_nominal_tag        380
#define pb_MotionCommand_comp_forward_tag        390
#define pb_MotionCommand_comp_reverse_tag        400
#define pb_MotionCommand_probe_type_tag          410
#define pb_MotionCommand_tool_offset_tag         420
#define pb_MotionStatus_commandEcho_tag          10
#define pb_MotionStatus_commandNumEcho_tag       20
#define pb_MotionStatus_commandStatus_tag        30
#define pb_MotionStatus_carte_pos_fb_tag         40

/* Struct field encoding specification for nanopb */
extern const pb_field_t pb_MotionCommand_fields[43];
extern const pb_field_t pb_MotionStatus_fields[5];

/* Maximum encoded size of messages (where known) */
#define pb_MotionCommand_size                    (373 + pb_EmcPose_size + pb_PmCartesian_size + pb_PmCartesian_size + pb_EmcPose_size)
#define pb_MotionStatus_size                     (26 + pb_EmcPose_size)

/* helper macros for message type ids if set with */
/* option (nanopb_msgopt).msgid = <id>; */

#ifdef PB_MSGID
#define PB_MSG_600 pb_MotionCommand
#define PB_MSG_601 pb_MotionStatus

#define MOTCMDS_MESSAGES \
	PB_MSG(600,(373 + pb_EmcPose_size + pb_PmCartesian_size + pb_PmCartesian_size + pb_EmcPose_size),pb_MotionCommand) \
	PB_MSG(601,(26 + pb_EmcPose_size),pb_MotionStatus) \

#endif

#ifdef __cplusplus
} /* extern "C" */
#endif

#endif
